GAS LISTING /tmp/ccCs0PLf.s 			page 1


   1              		.file	"Interrupt.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN9Interrupt7callSysEmmmmm
   9              	_ZN9Interrupt7callSysEmmmmm:
  10              	.LFB11:
  11              		.file 1 "src/Interrupt.cpp"
   1:src/Interrupt.cpp **** //
   2:src/Interrupt.cpp **** // Created by os on 4/23/22.
   3:src/Interrupt.cpp **** //
   4:src/Interrupt.cpp **** #include "../h/Interrupt.h"
   5:src/Interrupt.cpp **** #include "../h/Cons.hpp"
   6:src/Interrupt.cpp **** 
   7:src/Interrupt.cpp **** uint64 Interrupt::prevSstatus = 2;
   8:src/Interrupt.cpp **** int Interrupt::lock_var = 1;
   9:src/Interrupt.cpp **** bool Interrupt::enableSystemStack = false;
  10:src/Interrupt.cpp **** void Interrupt::handleSysCall() {
  11:src/Interrupt.cpp **** 
  12:src/Interrupt.cpp **** 
  13:src/Interrupt.cpp ****     uint64 scause = r_scausei();
  14:src/Interrupt.cpp ****     if(scause == 0x0000000000000009UL || scause == 0x0000000000000008UL) {
  15:src/Interrupt.cpp **** 
  16:src/Interrupt.cpp ****         uint64 sepc = r_sepci() + 4;
  17:src/Interrupt.cpp ****         uint64 sscause = r_scausei();
  18:src/Interrupt.cpp ****         uint64 opCode,arg1,arg2,arg3,arg4;
  19:src/Interrupt.cpp ****         __asm__ volatile("ld %0,80(s0)" : "=r"(opCode));
  20:src/Interrupt.cpp ****         __asm__ volatile("ld %0,88(s0)" : "=r"(arg1));
  21:src/Interrupt.cpp ****         __asm__ volatile("ld %0,96(s0)" : "=r"(arg2));
  22:src/Interrupt.cpp ****         __asm__ volatile("ld %0,104(s0)" : "=r"(arg3));
  23:src/Interrupt.cpp ****         __asm__ volatile("ld %0,112(s0)" : "=r"(arg4));
  24:src/Interrupt.cpp ****         callSys(opCode,arg1,arg2,arg3,arg4);
  25:src/Interrupt.cpp ****         w_scausei(sscause);
  26:src/Interrupt.cpp ****         w_sepci(sepc);
  27:src/Interrupt.cpp **** 
  28:src/Interrupt.cpp **** 
  29:src/Interrupt.cpp **** 
  30:src/Interrupt.cpp ****     }
  31:src/Interrupt.cpp ****     else if(scause == 0x8000000000000001UL){
  32:src/Interrupt.cpp ****         uint64 sie = r_siei();
  33:src/Interrupt.cpp ****         if((sie & 2) == 0){
  34:src/Interrupt.cpp ****             mc_sip(SIP_SSIP);
  35:src/Interrupt.cpp ****             return;
  36:src/Interrupt.cpp ****         }
  37:src/Interrupt.cpp ****         PCB::sleeping_list->decTime();
  38:src/Interrupt.cpp ****         while (PCB::sleeping_list->getTimeLeft() == 0){
  39:src/Interrupt.cpp ****             PCB* pcb = PCB::sleeping_list->get();
  40:src/Interrupt.cpp ****             if(pcb->isPeriodic && PCB::isPeriodicBlocked){
  41:src/Interrupt.cpp ****                 PCB::sleeping_list->putTime(pcb,1);
  42:src/Interrupt.cpp ****             }
  43:src/Interrupt.cpp ****             else{
  44:src/Interrupt.cpp ****                 pcb->setSleeping(false);
  45:src/Interrupt.cpp ****                 Scheduler::put(pcb);
  46:src/Interrupt.cpp ****             }
  47:src/Interrupt.cpp **** 
GAS LISTING /tmp/ccCs0PLf.s 			page 2


  48:src/Interrupt.cpp ****         }
  49:src/Interrupt.cpp ****         PCB::timeLeft++;
  50:src/Interrupt.cpp ****         if(PCB::timeLeft >= PCB::running->getTimeSlice()){
  51:src/Interrupt.cpp ****           uint64 sepc = r_sepc();
  52:src/Interrupt.cpp ****           uint64 sscause = r_scausei();
  53:src/Interrupt.cpp ****           PCB::timeLeft = 0;
  54:src/Interrupt.cpp ****           PCB::dispatch();
  55:src/Interrupt.cpp ****           w_scausei(sscause);
  56:src/Interrupt.cpp ****          w_sepc(sepc);
  57:src/Interrupt.cpp ****         }
  58:src/Interrupt.cpp ****            mc_sip(SIP_SSIP);
  59:src/Interrupt.cpp ****     }
  60:src/Interrupt.cpp ****     else if(scause == 0x8000000000000009UL){
  61:src/Interrupt.cpp ****         int irq = plic_claim();
  62:src/Interrupt.cpp ****         if(irq == CONSOLE_IRQ){
  63:src/Interrupt.cpp ****             volatile char status = *((char *)CONSOLE_STATUS);
  64:src/Interrupt.cpp ****             while (status & CONSOLE_RX_STATUS_BIT){
  65:src/Interrupt.cpp ****                 char c = (*(char *) CONSOLE_RX_DATA);
  66:src/Interrupt.cpp ****                 Cons::inputBuffer->put(c);
  67:src/Interrupt.cpp ****                 status = *((char *)CONSOLE_STATUS);
  68:src/Interrupt.cpp ****             }
  69:src/Interrupt.cpp ****         }
  70:src/Interrupt.cpp ****         plic_complete(irq);
  71:src/Interrupt.cpp ****     }
  72:src/Interrupt.cpp **** 
  73:src/Interrupt.cpp **** }
  74:src/Interrupt.cpp **** 
  75:src/Interrupt.cpp **** void Interrupt::callSys(uint64 opCode, uint64 arg1,uint64 arg2 , uint64 arg3 , uint64 arg4) {
  12              		.loc 1 75 93
  13              		.cfi_startproc
  14              	.LVL0:
  15 0000 130101F5 		addi	sp,sp,-176
  16              		.cfi_def_cfa_offset 176
  17 0004 2334110A 		sd	ra,168(sp)
  18 0008 2330810A 		sd	s0,160(sp)
  19 000c 233C9108 		sd	s1,152(sp)
  20 0010 23382109 		sd	s2,144(sp)
  21 0014 23343109 		sd	s3,136(sp)
  22 0018 23304109 		sd	s4,128(sp)
  23 001c 233C5107 		sd	s5,120(sp)
  24              		.cfi_offset 1, -8
  25              		.cfi_offset 8, -16
  26              		.cfi_offset 9, -24
  27              		.cfi_offset 18, -32
  28              		.cfi_offset 19, -40
  29              		.cfi_offset 20, -48
  30              		.cfi_offset 21, -56
  31 0020 1304010B 		addi	s0,sp,176
  32              		.cfi_def_cfa 8, 0
  33 0024 93840500 		mv	s1,a1
  76:src/Interrupt.cpp ****     //switchToSystemStack();
  77:src/Interrupt.cpp ****     if(opCode == 0x1){
  34              		.loc 1 77 5
  35              	.LBB98:
  36 0028 93071000 		li	a5,1
  37 002c 630AF50A 		beq	a0,a5,.L32
  38 0030 13090600 		mv	s2,a2
GAS LISTING /tmp/ccCs0PLf.s 			page 3


  39 0034 93890600 		mv	s3,a3
  40 0038 130A0700 		mv	s4,a4
  41              	.LBE98:
  78:src/Interrupt.cpp ****         uint64 size = arg1;
  79:src/Interrupt.cpp ****         size*=MEM_BLOCK_SIZE;
  80:src/Interrupt.cpp ****         void* retAdr = MemoryAllocator::mem_alloc((size_t) size);
  81:src/Interrupt.cpp ****         long* header = (long*) retAdr;
  82:src/Interrupt.cpp ****         size/=MEM_BLOCK_SIZE;
  83:src/Interrupt.cpp ****         *header = size;
  84:src/Interrupt.cpp ****         header++;
  85:src/Interrupt.cpp ****         __asm__ volatile("mv a0,%0" : : "r"((uint64)header));
  86:src/Interrupt.cpp **** 
  87:src/Interrupt.cpp **** 
  88:src/Interrupt.cpp ****     }
  89:src/Interrupt.cpp ****     else if(opCode == 0x2){
  42              		.loc 1 89 10
  43              	.LBB259:
  44              	.LBB99:
  45 003c 93072000 		li	a5,2
  46 0040 6304F50E 		beq	a0,a5,.L33
  47              	.LBE99:
  48              	.LBE259:
  90:src/Interrupt.cpp ****         uint64 adr = arg1;
  91:src/Interrupt.cpp ****         int res = MemoryAllocator::mem_free((void*) adr);
  92:src/Interrupt.cpp ****         __asm__ volatile("mv a0,%0" : : "r"((uint64)res));
  93:src/Interrupt.cpp **** 
  94:src/Interrupt.cpp ****     }
  95:src/Interrupt.cpp ****     else if(opCode == 0x10){
  49              		.loc 1 95 10
  50              	.LBB260:
  51              	.LBB242:
  52              	.LBB100:
  53 0044 93070001 		li	a5,16
  54 0048 630AF50E 		beq	a0,a5,.L34
  55              	.LBE100:
  56              	.LBE242:
  57              	.LBE260:
  96:src/Interrupt.cpp ****         uint64 handle = arg1,body = arg2,args = arg3,stac = arg4,res;
  97:src/Interrupt.cpp ****         (*(thread_t*)handle)->PCB = PCB::allocatePCB();
  98:src/Interrupt.cpp ****         if((*(thread_t*)handle)->PCB == 0){
  99:src/Interrupt.cpp ****             res = -1;
 100:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 101:src/Interrupt.cpp **** 
 102:src/Interrupt.cpp ****         }
 103:src/Interrupt.cpp ****         else {
 104:src/Interrupt.cpp ****             *(PCB *) (*(thread_t *) handle)->PCB = PCB((PCB::Body) body, (void *) args, (uint64 *) 
 105:src/Interrupt.cpp ****                                                        DEFAULT_TIME_SLICE);
 106:src/Interrupt.cpp ****             res = 0;
 107:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 108:src/Interrupt.cpp ****         }
 109:src/Interrupt.cpp ****     }
 110:src/Interrupt.cpp ****     else if(opCode == 0x11) {
  58              		.loc 1 110 10
  59              	.LBB261:
  60              	.LBB243:
  61              	.LBB226:
  62              	.LBB101:
GAS LISTING /tmp/ccCs0PLf.s 			page 4


  63 004c 93071001 		li	a5,17
  64 0050 630EF518 		beq	a0,a5,.L35
  65              	.LBE101:
  66              	.LBE226:
  67              	.LBE243:
  68              	.LBE261:
 111:src/Interrupt.cpp ****         uint64 handle = arg1, body = arg2, args = arg3, stac = arg4, res;
 112:src/Interrupt.cpp ****         (*(thread_t *) handle)->PCB = PCB::allocatePCB();
 113:src/Interrupt.cpp ****         if ((*(thread_t *) handle)->PCB == 0) {
 114:src/Interrupt.cpp ****             res = -1;
 115:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 116:src/Interrupt.cpp **** 
 117:src/Interrupt.cpp ****         } else {
 118:src/Interrupt.cpp ****             *(PCB *) (*(thread_t *) handle)->PCB = PCB((PCB::Body) body, (void *) args, (uint64 *) 
 119:src/Interrupt.cpp ****                                                        DEFAULT_TIME_SLICE);
 120:src/Interrupt.cpp ****             if (PCB::running == nullptr) {
 121:src/Interrupt.cpp ****                 PCB::running = (PCB *) (*(thread_t *) handle)->PCB;
 122:src/Interrupt.cpp ****             } else {
 123:src/Interrupt.cpp ****                 Scheduler::put((PCB *) (*(thread_t *) handle)->PCB);
 124:src/Interrupt.cpp ****             }
 125:src/Interrupt.cpp ****             res = 0;
 126:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 127:src/Interrupt.cpp ****         }
 128:src/Interrupt.cpp ****     }
 129:src/Interrupt.cpp ****     else if(opCode == 0x12){
  69              		.loc 1 129 10
  70              	.LBB262:
  71              	.LBB244:
  72              	.LBB227:
  73              	.LBB211:
  74              	.LBB102:
  75 0054 93072001 		li	a5,18
  76 0058 630EF526 		beq	a0,a5,.L36
  77              	.LBE102:
  78              	.LBE211:
  79              	.LBE227:
  80              	.LBE244:
  81              	.LBE262:
 130:src/Interrupt.cpp ****         if(PCB::running!= nullptr) {
 131:src/Interrupt.cpp ****             PCB::running->setFinished(true);
 132:src/Interrupt.cpp ****             uint64 res = 0;
 133:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 134:src/Interrupt.cpp ****         } else {
 135:src/Interrupt.cpp ****             uint64 res = -1;
 136:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 137:src/Interrupt.cpp ****         }
 138:src/Interrupt.cpp **** 
 139:src/Interrupt.cpp ****     }
 140:src/Interrupt.cpp ****     else if(opCode == 0x13){
  82              		.loc 1 140 10
  83              	.LBB263:
  84              	.LBB245:
  85              	.LBB228:
  86              	.LBB212:
  87              	.LBB198:
  88              	.LBB103:
  89 005c 93073001 		li	a5,19
GAS LISTING /tmp/ccCs0PLf.s 			page 5


  90 0060 6304F52A 		beq	a0,a5,.L37
  91              	.LBE103:
  92              	.LBE198:
  93              	.LBE212:
  94              	.LBE228:
  95              	.LBE245:
  96              	.LBE263:
 141:src/Interrupt.cpp ****         PCB::timeLeft = 0;
 142:src/Interrupt.cpp ****         PCB::dispatch();
 143:src/Interrupt.cpp ****     }
 144:src/Interrupt.cpp ****     else if(opCode == 0x21){
  97              		.loc 1 144 10
  98              	.LBB264:
  99              	.LBB246:
 100              	.LBB229:
 101              	.LBB213:
 102              	.LBB199:
 103              	.LBB184:
 104              	.LBB104:
 105 0064 93071002 		li	a5,33
 106 0068 630CF52A 		beq	a0,a5,.L38
 107              	.LBE104:
 108              	.LBE184:
 109              	.LBE199:
 110              	.LBE213:
 111              	.LBE229:
 112              	.LBE246:
 113              	.LBE264:
 145:src/Interrupt.cpp ****         uint64 handle = arg1,init = arg2,res;
 146:src/Interrupt.cpp ****         (*(sem_t *)handle)->Sem = Sem::allocateSem();
 147:src/Interrupt.cpp ****         if((*(sem_t *)handle)->Sem == 0){
 148:src/Interrupt.cpp ****             res = -1;
 149:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 150:src/Interrupt.cpp **** 
 151:src/Interrupt.cpp ****         } else {
 152:src/Interrupt.cpp ****             *(Sem *) (*(sem_t *) handle)->Sem = Sem((int) init);
 153:src/Interrupt.cpp ****             res = 0;
 154:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 155:src/Interrupt.cpp ****         }
 156:src/Interrupt.cpp **** 
 157:src/Interrupt.cpp ****     }
 158:src/Interrupt.cpp ****     else if(opCode == 0x22){
 114              		.loc 1 158 10
 115              	.LBB265:
 116              	.LBB247:
 117              	.LBB230:
 118              	.LBB214:
 119              	.LBB200:
 120              	.LBB185:
 121              	.LBB174:
 122              	.LBB105:
 123 006c 93072002 		li	a5,34
 124 0070 6306F530 		beq	a0,a5,.L39
 125              	.LBE105:
 126              	.LBE174:
 127              	.LBE185:
 128              	.LBE200:
GAS LISTING /tmp/ccCs0PLf.s 			page 6


 129              	.LBE214:
 130              	.LBE230:
 131              	.LBE247:
 132              	.LBE265:
 159:src/Interrupt.cpp ****         uint64 handle = arg1,res;
 160:src/Interrupt.cpp ****         if((Sem*)((sem_t)handle)->Sem!= nullptr) {
 161:src/Interrupt.cpp ****             ((Sem *) ((sem_t ) handle)->Sem)->deblockAll();
 162:src/Interrupt.cpp ****             res = 0;
 163:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 164:src/Interrupt.cpp **** 
 165:src/Interrupt.cpp ****         }
 166:src/Interrupt.cpp ****         else {
 167:src/Interrupt.cpp ****             res = -1;
 168:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 169:src/Interrupt.cpp ****         }
 170:src/Interrupt.cpp ****     }
 171:src/Interrupt.cpp ****     else if(opCode == 0x23){
 133              		.loc 1 171 10
 134              	.LBB266:
 135              	.LBB248:
 136              	.LBB231:
 137              	.LBB215:
 138              	.LBB201:
 139              	.LBB186:
 140              	.LBB175:
 141              	.LBB164:
 142              	.LBB106:
 143 0074 93073002 		li	a5,35
 144 0078 6306F532 		beq	a0,a5,.L40
 145              	.LBE106:
 146              	.LBE164:
 147              	.LBE175:
 148              	.LBE186:
 149              	.LBE201:
 150              	.LBE215:
 151              	.LBE231:
 152              	.LBE248:
 153              	.LBE266:
 172:src/Interrupt.cpp ****         uint64 handle = arg1,res;
 173:src/Interrupt.cpp ****         if((Sem*)((sem_t)handle)->Sem!= nullptr) {
 174:src/Interrupt.cpp ****             ((Sem *) ((sem_t ) handle)->Sem)->wait();
 175:src/Interrupt.cpp ****             if(!PCB::running->unblockError) {
 176:src/Interrupt.cpp ****                 res = 0;
 177:src/Interrupt.cpp ****                 __asm__ volatile("mv a0,%0" : : "r"(res));
 178:src/Interrupt.cpp **** 
 179:src/Interrupt.cpp ****             } else{
 180:src/Interrupt.cpp ****                 res = -2;
 181:src/Interrupt.cpp ****                 __asm__ volatile("mv a0,%0" : : "r"(res));
 182:src/Interrupt.cpp **** 
 183:src/Interrupt.cpp ****             }
 184:src/Interrupt.cpp ****         } else {
 185:src/Interrupt.cpp ****             res = -1;
 186:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 187:src/Interrupt.cpp ****         }
 188:src/Interrupt.cpp ****     }
 189:src/Interrupt.cpp ****     else if(opCode == 0x24){
 154              		.loc 1 189 10
GAS LISTING /tmp/ccCs0PLf.s 			page 7


 155              	.LBB267:
 156              	.LBB249:
 157              	.LBB232:
 158              	.LBB216:
 159              	.LBB202:
 160              	.LBB187:
 161              	.LBB176:
 162              	.LBB165:
 163              	.LBB155:
 164              	.LBB107:
 165 007c 93074002 		li	a5,36
 166 0080 6304F536 		beq	a0,a5,.L41
 167              	.LBE107:
 168              	.LBE155:
 169              	.LBE165:
 170              	.LBE176:
 171              	.LBE187:
 172              	.LBE202:
 173              	.LBE216:
 174              	.LBE232:
 175              	.LBE249:
 176              	.LBE267:
 190:src/Interrupt.cpp ****         uint64 handle = arg1,res;
 191:src/Interrupt.cpp ****         if((Sem*)((sem_t)handle)->Sem!= nullptr) {
 192:src/Interrupt.cpp ****             ((Sem *) ((sem_t ) handle)->Sem)->signal();
 193:src/Interrupt.cpp ****             res = 0;
 194:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 195:src/Interrupt.cpp ****         }
 196:src/Interrupt.cpp ****         else {
 197:src/Interrupt.cpp ****             res = -1;
 198:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 199:src/Interrupt.cpp ****         }
 200:src/Interrupt.cpp **** 
 201:src/Interrupt.cpp **** 
 202:src/Interrupt.cpp ****     } else if(opCode == 0x31){
 177              		.loc 1 202 12
 178              	.LBB268:
 179              	.LBB250:
 180              	.LBB233:
 181              	.LBB217:
 182              	.LBB203:
 183              	.LBB188:
 184              	.LBB177:
 185              	.LBB166:
 186              	.LBB156:
 187              	.LBB147:
 188              	.LBB108:
 189 0084 93071003 		li	a5,49
 190 0088 6304F538 		beq	a0,a5,.L42
 191              	.LBE108:
 192              	.LBE147:
 193              	.LBE156:
 194              	.LBE166:
 195              	.LBE177:
 196              	.LBE188:
 197              	.LBE203:
 198              	.LBE217:
GAS LISTING /tmp/ccCs0PLf.s 			page 8


 199              	.LBE233:
 200              	.LBE250:
 201              	.LBE268:
 203:src/Interrupt.cpp ****         uint64 time = arg1,res;
 204:src/Interrupt.cpp ****         PCB::sleep((time_t) time);
 205:src/Interrupt.cpp ****         PCB::timeLeft = 0;
 206:src/Interrupt.cpp ****         PCB::dispatch();
 207:src/Interrupt.cpp ****         res = 0;
 208:src/Interrupt.cpp ****         __asm__ volatile("mv a0,%0" : : "r"(res));
 209:src/Interrupt.cpp **** 
 210:src/Interrupt.cpp ****     }
 211:src/Interrupt.cpp ****     else if(opCode == 0x41){
 202              		.loc 1 211 10
 203              	.LBB269:
 204              	.LBB251:
 205              	.LBB234:
 206              	.LBB218:
 207              	.LBB204:
 208              	.LBB189:
 209              	.LBB178:
 210              	.LBB167:
 211              	.LBB157:
 212              	.LBB148:
 213              	.LBB140:
 214              	.LBB109:
 215 008c 93071004 		li	a5,65
 216 0090 6306F53A 		beq	a0,a5,.L43
 217              	.LBE109:
 218              	.LBE140:
 219              	.LBE148:
 220              	.LBE157:
 221              	.LBE167:
 222              	.LBE178:
 223              	.LBE189:
 224              	.LBE204:
 225              	.LBE218:
 226              	.LBE234:
 227              	.LBE251:
 228              	.LBE269:
 212:src/Interrupt.cpp ****         uint64 chr;
 213:src/Interrupt.cpp ****         char c = Cons::inputBuffer->get();
 214:src/Interrupt.cpp ****         chr = (uint64)c;
 215:src/Interrupt.cpp ****         __asm__ volatile("mv a0,%0" : : "r"(chr));
 216:src/Interrupt.cpp ****     }
 217:src/Interrupt.cpp ****     else if(opCode == 0x42){
 229              		.loc 1 217 10
 230              	.LBB270:
 231              	.LBB252:
 232              	.LBB235:
 233              	.LBB219:
 234              	.LBB205:
 235              	.LBB190:
 236              	.LBB179:
 237              	.LBB168:
 238              	.LBB158:
 239              	.LBB149:
 240              	.LBB141:
GAS LISTING /tmp/ccCs0PLf.s 			page 9


 241              	.LBB134:
 242              	.LBB110:
 243 0094 93072004 		li	a5,66
 244 0098 6300F53C 		beq	a0,a5,.L44
 245              	.LBE110:
 246              	.LBE134:
 247              	.LBE141:
 248              	.LBE149:
 249              	.LBE158:
 250              	.LBE168:
 251              	.LBE179:
 252              	.LBE190:
 253              	.LBE205:
 254              	.LBE219:
 255              	.LBE235:
 256              	.LBE252:
 257              	.LBE270:
 218:src/Interrupt.cpp ****         uint64 chr = arg1;
 219:src/Interrupt.cpp ****         Cons::outputBuffer->put((char)chr);
 220:src/Interrupt.cpp **** 
 221:src/Interrupt.cpp ****     }
 222:src/Interrupt.cpp ****     else if(opCode == 0x50){
 258              		.loc 1 222 10
 259              	.LBB271:
 260              	.LBB253:
 261              	.LBB236:
 262              	.LBB220:
 263              	.LBB206:
 264              	.LBB191:
 265              	.LBB180:
 266              	.LBB169:
 267              	.LBB159:
 268              	.LBB150:
 269              	.LBB142:
 270              	.LBB135:
 271              	.LBB129:
 272              	.LBB111:
 273 009c 93070005 		li	a5,80
 274 00a0 630AF53C 		beq	a0,a5,.L45
 275              	.LBE111:
 276              	.LBE129:
 277              	.LBE135:
 278              	.LBE142:
 279              	.LBE150:
 280              	.LBE159:
 281              	.LBE169:
 282              	.LBE180:
 283              	.LBE191:
 284              	.LBE206:
 285              	.LBE220:
 286              	.LBE236:
 287              	.LBE253:
 288              	.LBE271:
 223:src/Interrupt.cpp ****         mc_status(SSTATUS_SPP);
 224:src/Interrupt.cpp ****     }
 225:src/Interrupt.cpp ****     else if(opCode == 0x55){
 289              		.loc 1 225 10
GAS LISTING /tmp/ccCs0PLf.s 			page 10


 290              	.LBB272:
 291              	.LBB254:
 292              	.LBB237:
 293              	.LBB221:
 294              	.LBB207:
 295              	.LBB192:
 296              	.LBB181:
 297              	.LBB170:
 298              	.LBB160:
 299              	.LBB151:
 300              	.LBB143:
 301              	.LBB136:
 302              	.LBB130:
 303              	.LBB125:
 304              	.LBB112:
 305 00a4 93075005 		li	a5,85
 306 00a8 630CF53C 		beq	a0,a5,.L46
 307              	.LBE112:
 308              	.LBE125:
 309              	.LBE130:
 310              	.LBE136:
 311              	.LBE143:
 312              	.LBE151:
 313              	.LBE160:
 314              	.LBE170:
 315              	.LBE181:
 316              	.LBE192:
 317              	.LBE207:
 318              	.LBE221:
 319              	.LBE237:
 320              	.LBE254:
 321              	.LBE272:
 226:src/Interrupt.cpp ****         uint64 handle = arg1;
 227:src/Interrupt.cpp ****         ((PCB *) (*(thread_t *) handle)->PCB)->isPeriodic = true;
 228:src/Interrupt.cpp **** 
 229:src/Interrupt.cpp ****     }
 230:src/Interrupt.cpp ****     else if(opCode == 0x56){
 322              		.loc 1 230 10
 323              	.LBB273:
 324              	.LBB255:
 325              	.LBB238:
 326              	.LBB222:
 327              	.LBB208:
 328              	.LBB193:
 329              	.LBB182:
 330              	.LBB171:
 331              	.LBB161:
 332              	.LBB152:
 333              	.LBB144:
 334              	.LBB137:
 335              	.LBB131:
 336              	.LBB126:
 337              	.LBB121:
 338              	.LBB113:
 339 00ac 93076005 		li	a5,86
 340 00b0 631AF504 		bne	a0,a5,.L1
 341              	.LBB114:
GAS LISTING /tmp/ccCs0PLf.s 			page 11


 231:src/Interrupt.cpp ****         if(PCB::isPeriodicBlocked) {
 342              		.loc 1 231 9
 343              	.LBB115:
 344 00b4 97070000 		la	a5,_ZN3PCB17isPeriodicBlockedE
 344      83B70700 
 345 00bc 83C70700 		lbu	a5,0(a5)
 346 00c0 639A073C 		bnez	a5,.L47
 232:src/Interrupt.cpp ****             PCB::isPeriodicBlocked = false;
 233:src/Interrupt.cpp ****             PCB* periodicThread = PCB::perioThreads->get();
 234:src/Interrupt.cpp ****             while (periodicThread != nullptr) {
 235:src/Interrupt.cpp ****                 Scheduler::put(periodicThread);
 236:src/Interrupt.cpp ****                 periodicThread = PCB::perioThreads->get();
 237:src/Interrupt.cpp ****             }
 238:src/Interrupt.cpp ****         }
 239:src/Interrupt.cpp ****         else PCB::isPeriodicBlocked = true;
 347              		.loc 1 239 14
 348              		.loc 1 239 37 is_stmt 0
 349 00c4 97070000 		la	a5,_ZN3PCB17isPeriodicBlockedE
 349      83B70700 
 350 00cc 13071000 		li	a4,1
 351              	.LVL1:
 352 00d0 2380E700 		sb	a4,0(a5)
 353              	.LVL2:
 354              	.L29:
 355              	.LBE115:
 240:src/Interrupt.cpp ****         PCB::dispatch();
 356              		.loc 1 240 9 is_stmt 1
 357              		.loc 1 240 22 is_stmt 0
 358 00d4 97000000 		call	_ZN3PCB8dispatchEv@plt
 358      E7800000 
 359              	.LVL3:
 360              	.LBE114:
 361              	.LBE113:
 362              	.LBE121:
 363              	.LBE126:
 364              	.LBE131:
 365              	.LBE137:
 366              	.LBE144:
 367              	.LBE152:
 368              	.LBE161:
 369              	.LBE171:
 370              	.LBE182:
 371              	.LBE193:
 372              	.LBE208:
 373              	.LBE222:
 374              	.LBE238:
 375              	.LBE255:
 376              	.LBE273:
 241:src/Interrupt.cpp ****     }
 242:src/Interrupt.cpp ****     //switchToUserStack();
 243:src/Interrupt.cpp **** }
 377              		.loc 1 243 1
 378 00dc 6F008002 		j	.L1
 379              	.LVL4:
 380              	.L32:
 381              	.LBB274:
 382              	.LBB256:
GAS LISTING /tmp/ccCs0PLf.s 			page 12


  78:src/Interrupt.cpp ****         size*=MEM_BLOCK_SIZE;
 383              		.loc 1 78 9 is_stmt 1
  79:src/Interrupt.cpp ****         void* retAdr = MemoryAllocator::mem_alloc((size_t) size);
 384              		.loc 1 79 9
  80:src/Interrupt.cpp ****         long* header = (long*) retAdr;
 385              		.loc 1 80 9
  80:src/Interrupt.cpp ****         long* header = (long*) retAdr;
 386              		.loc 1 80 50 is_stmt 0
 387 00e0 13956500 		slli	a0,a1,6
 388              	.LVL5:
 389 00e4 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 389      E7800000 
 390              	.LVL6:
  81:src/Interrupt.cpp ****         size/=MEM_BLOCK_SIZE;
 391              		.loc 1 81 9 is_stmt 1
  82:src/Interrupt.cpp ****         *header = size;
 392              		.loc 1 82 9
  82:src/Interrupt.cpp ****         *header = size;
 393              		.loc 1 82 13 is_stmt 0
 394 00ec 9305F0FF 		li	a1,-1
 395 00f0 93D56500 		srli	a1,a1,6
 396 00f4 B3F5B400 		and	a1,s1,a1
 397              	.LVL7:
  83:src/Interrupt.cpp ****         header++;
 398              		.loc 1 83 9 is_stmt 1
  83:src/Interrupt.cpp ****         header++;
 399              		.loc 1 83 17 is_stmt 0
 400 00f8 2330B500 		sd	a1,0(a0)
  84:src/Interrupt.cpp ****         __asm__ volatile("mv a0,%0" : : "r"((uint64)header));
 401              		.loc 1 84 9 is_stmt 1
  84:src/Interrupt.cpp ****         __asm__ volatile("mv a0,%0" : : "r"((uint64)header));
 402              		.loc 1 84 15 is_stmt 0
 403 00fc 13058500 		addi	a0,a0,8
 404              	.LVL8:
  85:src/Interrupt.cpp **** 
 405              		.loc 1 85 9 is_stmt 1
  85:src/Interrupt.cpp **** 
 406              		.loc 1 85 61 is_stmt 0
 407              	#APP
 408              	# 85 "src/Interrupt.cpp" 1
 409              		mv a0,a0
 410              	# 0 "" 2
 411              	.LVL9:
 412              	#NO_APP
 413              	.L1:
 414              	.LBE256:
 415              	.LBE274:
 416              		.loc 1 243 1
 417 0104 8330810A 		ld	ra,168(sp)
 418              		.cfi_remember_state
 419              		.cfi_restore 1
 420 0108 0334010A 		ld	s0,160(sp)
 421              		.cfi_restore 8
 422              		.cfi_def_cfa 2, 176
 423 010c 83348109 		ld	s1,152(sp)
 424              		.cfi_restore 9
 425              	.LVL10:
GAS LISTING /tmp/ccCs0PLf.s 			page 13


 426 0110 03390109 		ld	s2,144(sp)
 427              		.cfi_restore 18
 428 0114 83398108 		ld	s3,136(sp)
 429              		.cfi_restore 19
 430 0118 033A0108 		ld	s4,128(sp)
 431              		.cfi_restore 20
 432 011c 833A8107 		ld	s5,120(sp)
 433              		.cfi_restore 21
 434 0120 1301010B 		addi	sp,sp,176
 435              		.cfi_def_cfa_offset 0
 436 0124 67800000 		jr	ra
 437              	.LVL11:
 438              	.L33:
 439              		.cfi_restore_state
 440              	.LBB275:
 441              	.LBB257:
 442              	.LBB239:
  90:src/Interrupt.cpp ****         int res = MemoryAllocator::mem_free((void*) adr);
 443              		.loc 1 90 9 is_stmt 1
  91:src/Interrupt.cpp ****         __asm__ volatile("mv a0,%0" : : "r"((uint64)res));
 444              		.loc 1 91 9
  91:src/Interrupt.cpp ****         __asm__ volatile("mv a0,%0" : : "r"((uint64)res));
 445              		.loc 1 91 44 is_stmt 0
 446 0128 13850500 		mv	a0,a1
 447              	.LVL12:
 448 012c 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 448      E7800000 
 449              	.LVL13:
  92:src/Interrupt.cpp **** 
 450              		.loc 1 92 9 is_stmt 1
  92:src/Interrupt.cpp **** 
 451              		.loc 1 92 58 is_stmt 0
 452              	#APP
 453              	# 92 "src/Interrupt.cpp" 1
 454              		mv a0,a0
 455              	# 0 "" 2
 456              	#NO_APP
 457              	.LBE239:
 458 0138 6FF0DFFC 		j	.L1
 459              	.LVL14:
 460              	.L34:
 461              	.LBB240:
 462              	.LBB223:
  96:src/Interrupt.cpp ****         (*(thread_t*)handle)->PCB = PCB::allocatePCB();
 463              		.loc 1 96 9 is_stmt 1
  97:src/Interrupt.cpp ****         if((*(thread_t*)handle)->PCB == 0){
 464              		.loc 1 97 9
  97:src/Interrupt.cpp ****         if((*(thread_t*)handle)->PCB == 0){
 465              		.loc 1 97 10 is_stmt 0
 466 013c 83BA0500 		ld	s5,0(a1)
  97:src/Interrupt.cpp ****         if((*(thread_t*)handle)->PCB == 0){
 467              		.loc 1 97 53
 468 0140 97000000 		call	_ZN3PCB11allocatePCBEv@plt
 468      E7800000 
 469              	.LVL15:
  97:src/Interrupt.cpp ****         if((*(thread_t*)handle)->PCB == 0){
 470              		.loc 1 97 35
GAS LISTING /tmp/ccCs0PLf.s 			page 14


 471 0148 23B0AA00 		sd	a0,0(s5)
  98:src/Interrupt.cpp ****             res = -1;
 472              		.loc 1 98 9 is_stmt 1
  98:src/Interrupt.cpp ****             res = -1;
 473              		.loc 1 98 13 is_stmt 0
 474 014c 83B70400 		ld	a5,0(s1)
  98:src/Interrupt.cpp ****             res = -1;
 475              		.loc 1 98 34
 476 0150 83B70700 		ld	a5,0(a5)
  98:src/Interrupt.cpp ****             res = -1;
 477              		.loc 1 98 9
 478 0154 63860708 		beqz	a5,.L48
 104:src/Interrupt.cpp ****                                                        DEFAULT_TIME_SLICE);
 479              		.loc 1 104 13 is_stmt 1
 104:src/Interrupt.cpp ****                                                        DEFAULT_TIME_SLICE);
 480              		.loc 1 104 52 is_stmt 0
 481 0158 13072000 		li	a4,2
 482 015c 93060A00 		mv	a3,s4
 483 0160 13860900 		mv	a2,s3
 484 0164 93050900 		mv	a1,s2
 485 0168 130584F5 		addi	a0,s0,-168
 486 016c 97000000 		call	_ZN3PCBC1EPFvPvES0_Pmm@plt
 486      E7800000 
 487              	.LVL16:
 104:src/Interrupt.cpp ****                                                        DEFAULT_TIME_SLICE);
 488              		.loc 1 104 23
 489 0174 83B70400 		ld	a5,0(s1)
 104:src/Interrupt.cpp ****                                                        DEFAULT_TIME_SLICE);
 490              		.loc 1 104 46
 491 0178 83B70700 		ld	a5,0(a5)
 104:src/Interrupt.cpp ****                                                        DEFAULT_TIME_SLICE);
 492              		.loc 1 104 50
 493 017c 833E04F6 		ld	t4,-160(s0)
 494 0180 033E84F6 		ld	t3,-152(s0)
 495 0184 033304F7 		ld	t1,-144(s0)
 496 0188 833884F7 		ld	a7,-136(s0)
 497 018c 033804F8 		ld	a6,-128(s0)
 498 0190 033584F8 		ld	a0,-120(s0)
 499 0194 833504F9 		ld	a1,-112(s0)
 500 0198 033684F9 		ld	a2,-104(s0)
 501 019c 833604FA 		ld	a3,-96(s0)
 502 01a0 033784FA 		ld	a4,-88(s0)
 503 01a4 033F84F5 		ld	t5,-168(s0)
 504 01a8 23B0E701 		sd	t5,0(a5)
 505 01ac 23B4D701 		sd	t4,8(a5)
 506 01b0 23B8C701 		sd	t3,16(a5)
 507 01b4 23BC6700 		sd	t1,24(a5)
 508 01b8 23B01703 		sd	a7,32(a5)
 509 01bc 23B40703 		sd	a6,40(a5)
 510 01c0 23B8A702 		sd	a0,48(a5)
 511 01c4 23BCB702 		sd	a1,56(a5)
 512 01c8 23B0C704 		sd	a2,64(a5)
 513 01cc 23B4D704 		sd	a3,72(a5)
 514 01d0 23B8E704 		sd	a4,80(a5)
 106:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 515              		.loc 1 106 13 is_stmt 1
 516              	.LVL17:
GAS LISTING /tmp/ccCs0PLf.s 			page 15


 107:src/Interrupt.cpp ****         }
 517              		.loc 1 107 13
 107:src/Interrupt.cpp ****         }
 518              		.loc 1 107 54 is_stmt 0
 519 01d4 93070000 		li	a5,0
 520              	#APP
 521              	# 107 "src/Interrupt.cpp" 1
 522              		mv a0,a5
 523              	# 0 "" 2
 524              	#NO_APP
 525 01dc 6FF09FF2 		j	.L1
 526              	.LVL18:
 527              	.L48:
  99:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 528              		.loc 1 99 13 is_stmt 1
 100:src/Interrupt.cpp **** 
 529              		.loc 1 100 13
 100:src/Interrupt.cpp **** 
 530              		.loc 1 100 54 is_stmt 0
 531 01e0 9307F0FF 		li	a5,-1
 532              	#APP
 533              	# 100 "src/Interrupt.cpp" 1
 534              		mv a0,a5
 535              	# 0 "" 2
 536              	#NO_APP
 537 01e8 6FF0DFF1 		j	.L1
 538              	.LVL19:
 539              	.L35:
 540              	.LBE223:
 541              	.LBB224:
 542              	.LBB209:
 111:src/Interrupt.cpp ****         (*(thread_t *) handle)->PCB = PCB::allocatePCB();
 543              		.loc 1 111 9 is_stmt 1
 112:src/Interrupt.cpp ****         if ((*(thread_t *) handle)->PCB == 0) {
 544              		.loc 1 112 9
 112:src/Interrupt.cpp ****         if ((*(thread_t *) handle)->PCB == 0) {
 545              		.loc 1 112 10 is_stmt 0
 546 01ec 83BA0500 		ld	s5,0(a1)
 112:src/Interrupt.cpp ****         if ((*(thread_t *) handle)->PCB == 0) {
 547              		.loc 1 112 55
 548 01f0 97000000 		call	_ZN3PCB11allocatePCBEv@plt
 548      E7800000 
 549              	.LVL20:
 112:src/Interrupt.cpp ****         if ((*(thread_t *) handle)->PCB == 0) {
 550              		.loc 1 112 37
 551 01f8 23B0AA00 		sd	a0,0(s5)
 113:src/Interrupt.cpp ****             res = -1;
 552              		.loc 1 113 9 is_stmt 1
 113:src/Interrupt.cpp ****             res = -1;
 553              		.loc 1 113 14 is_stmt 0
 554 01fc 83B70400 		ld	a5,0(s1)
 113:src/Interrupt.cpp ****             res = -1;
 555              		.loc 1 113 37
 556 0200 83B70700 		ld	a5,0(a5)
 113:src/Interrupt.cpp ****             res = -1;
 557              		.loc 1 113 9
 558 0204 6386070A 		beqz	a5,.L49
GAS LISTING /tmp/ccCs0PLf.s 			page 16


 118:src/Interrupt.cpp ****                                                        DEFAULT_TIME_SLICE);
 559              		.loc 1 118 13 is_stmt 1
 118:src/Interrupt.cpp ****                                                        DEFAULT_TIME_SLICE);
 560              		.loc 1 118 52 is_stmt 0
 561 0208 13072000 		li	a4,2
 562 020c 93060A00 		mv	a3,s4
 563 0210 13860900 		mv	a2,s3
 564 0214 93050900 		mv	a1,s2
 565 0218 130584F5 		addi	a0,s0,-168
 566 021c 97000000 		call	_ZN3PCBC1EPFvPvES0_Pmm@plt
 566      E7800000 
 567              	.LVL21:
 118:src/Interrupt.cpp ****                                                        DEFAULT_TIME_SLICE);
 568              		.loc 1 118 23
 569 0224 83B70400 		ld	a5,0(s1)
 118:src/Interrupt.cpp ****                                                        DEFAULT_TIME_SLICE);
 570              		.loc 1 118 46
 571 0228 83B70700 		ld	a5,0(a5)
 118:src/Interrupt.cpp ****                                                        DEFAULT_TIME_SLICE);
 572              		.loc 1 118 50
 573 022c 833E04F6 		ld	t4,-160(s0)
 574 0230 033E84F6 		ld	t3,-152(s0)
 575 0234 033304F7 		ld	t1,-144(s0)
 576 0238 833884F7 		ld	a7,-136(s0)
 577 023c 033804F8 		ld	a6,-128(s0)
 578 0240 033584F8 		ld	a0,-120(s0)
 579 0244 833504F9 		ld	a1,-112(s0)
 580 0248 033684F9 		ld	a2,-104(s0)
 581 024c 833604FA 		ld	a3,-96(s0)
 582 0250 033784FA 		ld	a4,-88(s0)
 583 0254 033F84F5 		ld	t5,-168(s0)
 584 0258 23B0E701 		sd	t5,0(a5)
 585 025c 23B4D701 		sd	t4,8(a5)
 586 0260 23B8C701 		sd	t3,16(a5)
 587 0264 23BC6700 		sd	t1,24(a5)
 588 0268 23B01703 		sd	a7,32(a5)
 589 026c 23B40703 		sd	a6,40(a5)
 590 0270 23B8A702 		sd	a0,48(a5)
 591 0274 23BCB702 		sd	a1,56(a5)
 592 0278 23B0C704 		sd	a2,64(a5)
 593 027c 23B4D704 		sd	a3,72(a5)
 594 0280 23B8E704 		sd	a4,80(a5)
 120:src/Interrupt.cpp ****                 PCB::running = (PCB *) (*(thread_t *) handle)->PCB;
 595              		.loc 1 120 13 is_stmt 1
 120:src/Interrupt.cpp ****                 PCB::running = (PCB *) (*(thread_t *) handle)->PCB;
 596              		.loc 1 120 30 is_stmt 0
 597 0284 97070000 		la	a5,_ZN3PCB7runningE
 597      83B70700 
 598 028c 83B70700 		ld	a5,0(a5)
 120:src/Interrupt.cpp ****                 PCB::running = (PCB *) (*(thread_t *) handle)->PCB;
 599              		.loc 1 120 13
 600 0290 63860702 		beqz	a5,.L50
 123:src/Interrupt.cpp ****             }
 601              		.loc 1 123 17 is_stmt 1
 123:src/Interrupt.cpp ****             }
 602              		.loc 1 123 41 is_stmt 0
 603 0294 83B70400 		ld	a5,0(s1)
GAS LISTING /tmp/ccCs0PLf.s 			page 17


 123:src/Interrupt.cpp ****             }
 604              		.loc 1 123 31
 605 0298 03B50700 		ld	a0,0(a5)
 606 029c 97000000 		call	_ZN9Scheduler3putEP3PCB@plt
 606      E7800000 
 607              	.LVL22:
 608              	.L10:
 125:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 609              		.loc 1 125 13 is_stmt 1
 126:src/Interrupt.cpp ****         }
 610              		.loc 1 126 13
 126:src/Interrupt.cpp ****         }
 611              		.loc 1 126 54 is_stmt 0
 612 02a4 93070000 		li	a5,0
 613              	#APP
 614              	# 126 "src/Interrupt.cpp" 1
 615              		mv a0,a5
 616              	# 0 "" 2
 617              	#NO_APP
 618 02ac 6FF09FE5 		j	.L1
 619              	.LVL23:
 620              	.L49:
 114:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 621              		.loc 1 114 13 is_stmt 1
 115:src/Interrupt.cpp **** 
 622              		.loc 1 115 13
 115:src/Interrupt.cpp **** 
 623              		.loc 1 115 54 is_stmt 0
 624 02b0 9307F0FF 		li	a5,-1
 625              	#APP
 626              	# 115 "src/Interrupt.cpp" 1
 627              		mv a0,a5
 628              	# 0 "" 2
 629              	#NO_APP
 630 02b8 6FF0DFE4 		j	.L1
 631              	.LVL24:
 632              	.L50:
 121:src/Interrupt.cpp ****             } else {
 633              		.loc 1 121 17 is_stmt 1
 121:src/Interrupt.cpp ****             } else {
 634              		.loc 1 121 41 is_stmt 0
 635 02bc 83B70400 		ld	a5,0(s1)
 121:src/Interrupt.cpp ****             } else {
 636              		.loc 1 121 64
 637 02c0 03B70700 		ld	a4,0(a5)
 121:src/Interrupt.cpp ****             } else {
 638              		.loc 1 121 30
 639 02c4 97070000 		la	a5,_ZN3PCB7runningE
 639      83B70700 
 640 02cc 23B0E700 		sd	a4,0(a5)
 641 02d0 6FF05FFD 		j	.L10
 642              	.LVL25:
 643              	.L36:
 644              	.LBE209:
 645              	.LBE224:
 646              	.LBE240:
 647              	.LBE257:
GAS LISTING /tmp/ccCs0PLf.s 			page 18


 648              	.LBE275:
 130:src/Interrupt.cpp ****             PCB::running->setFinished(true);
 649              		.loc 1 130 9 is_stmt 1
 650              	.LBB276:
 651              	.LBB258:
 652              	.LBB241:
 653              	.LBB225:
 654              	.LBB210:
 655              	.LBB194:
 130:src/Interrupt.cpp ****             PCB::running->setFinished(true);
 656              		.loc 1 130 24 is_stmt 0
 657 02d4 97070000 		la	a5,_ZN3PCB7runningE
 657      83B70700 
 658 02dc 03B50700 		ld	a0,0(a5)
 659              	.LVL26:
 130:src/Interrupt.cpp ****             PCB::running->setFinished(true);
 660              		.loc 1 130 9
 661 02e0 630E0500 		beqz	a0,.L12
 662              	.LBB195:
 131:src/Interrupt.cpp ****             uint64 res = 0;
 663              		.loc 1 131 13 is_stmt 1
 131:src/Interrupt.cpp ****             uint64 res = 0;
 664              		.loc 1 131 38 is_stmt 0
 665 02e4 93051000 		li	a1,1
 666 02e8 97000000 		call	_ZN3PCB11setFinishedEb@plt
 666      E7800000 
 667              	.LVL27:
 132:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 668              		.loc 1 132 13 is_stmt 1
 133:src/Interrupt.cpp ****         } else {
 669              		.loc 1 133 13
 133:src/Interrupt.cpp ****         } else {
 670              		.loc 1 133 54 is_stmt 0
 671 02f0 93070000 		li	a5,0
 672              	#APP
 673              	# 133 "src/Interrupt.cpp" 1
 674              		mv a0,a5
 675              	# 0 "" 2
 676              	#NO_APP
 677              	.LBE195:
 678 02f8 6FF0DFE0 		j	.L1
 679              	.LVL28:
 680              	.L12:
 681              	.LBB196:
 135:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 682              		.loc 1 135 13 is_stmt 1
 136:src/Interrupt.cpp ****         }
 683              		.loc 1 136 13
 136:src/Interrupt.cpp ****         }
 684              		.loc 1 136 54 is_stmt 0
 685 02fc 9307F0FF 		li	a5,-1
 686              	#APP
 687              	# 136 "src/Interrupt.cpp" 1
 688              		mv a0,a5
 689              	# 0 "" 2
 690              	#NO_APP
 691 0304 6FF01FE0 		j	.L1
GAS LISTING /tmp/ccCs0PLf.s 			page 19


 692              	.LVL29:
 693              	.L37:
 694              	.LBE196:
 695              	.LBE194:
 696              	.LBB197:
 141:src/Interrupt.cpp ****         PCB::dispatch();
 697              		.loc 1 141 9 is_stmt 1
 141:src/Interrupt.cpp ****         PCB::dispatch();
 698              		.loc 1 141 23 is_stmt 0
 699 0308 97070000 		la	a5,_ZN3PCB8timeLeftE
 699      83B70700 
 700 0310 23B00700 		sd	zero,0(a5)
 142:src/Interrupt.cpp ****     }
 701              		.loc 1 142 9 is_stmt 1
 142:src/Interrupt.cpp ****     }
 702              		.loc 1 142 22 is_stmt 0
 703 0314 97000000 		call	_ZN3PCB8dispatchEv@plt
 703      E7800000 
 704              	.LVL30:
 705 031c 6FF09FDE 		j	.L1
 706              	.LVL31:
 707              	.L38:
 708              	.LBB183:
 709              	.LBB172:
 145:src/Interrupt.cpp ****         (*(sem_t *)handle)->Sem = Sem::allocateSem();
 710              		.loc 1 145 9 is_stmt 1
 146:src/Interrupt.cpp ****         if((*(sem_t *)handle)->Sem == 0){
 711              		.loc 1 146 9
 146:src/Interrupt.cpp ****         if((*(sem_t *)handle)->Sem == 0){
 712              		.loc 1 146 10 is_stmt 0
 713 0320 83B90500 		ld	s3,0(a1)
 146:src/Interrupt.cpp ****         if((*(sem_t *)handle)->Sem == 0){
 714              		.loc 1 146 51
 715 0324 97000000 		call	_ZN3Sem11allocateSemEv@plt
 715      E7800000 
 716              	.LVL32:
 146:src/Interrupt.cpp ****         if((*(sem_t *)handle)->Sem == 0){
 717              		.loc 1 146 33
 718 032c 23B0A900 		sd	a0,0(s3)
 147:src/Interrupt.cpp ****             res = -1;
 719              		.loc 1 147 9 is_stmt 1
 147:src/Interrupt.cpp ****             res = -1;
 720              		.loc 1 147 13 is_stmt 0
 721 0330 83B70400 		ld	a5,0(s1)
 147:src/Interrupt.cpp ****             res = -1;
 722              		.loc 1 147 32
 723 0334 83B70700 		ld	a5,0(a5)
 147:src/Interrupt.cpp ****             res = -1;
 724              		.loc 1 147 9
 725 0338 638C0702 		beqz	a5,.L51
 152:src/Interrupt.cpp ****             res = 0;
 726              		.loc 1 152 13 is_stmt 1
 152:src/Interrupt.cpp ****             res = 0;
 727              		.loc 1 152 49 is_stmt 0
 728 033c 9B050900 		sext.w	a1,s2
 729 0340 130504FB 		addi	a0,s0,-80
 730 0344 97000000 		call	_ZN3SemC1Ei@plt
GAS LISTING /tmp/ccCs0PLf.s 			page 20


 730      E7800000 
 731              	.LVL33:
 152:src/Interrupt.cpp ****             res = 0;
 732              		.loc 1 152 23
 733 034c 83B70400 		ld	a5,0(s1)
 152:src/Interrupt.cpp ****             res = 0;
 734              		.loc 1 152 43
 735 0350 83B70700 		ld	a5,0(a5)
 152:src/Interrupt.cpp ****             res = 0;
 736              		.loc 1 152 47
 737 0354 033704FB 		ld	a4,-80(s0)
 738 0358 23B0E700 		sd	a4,0(a5)
 739 035c 033784FB 		ld	a4,-72(s0)
 740 0360 23B4E700 		sd	a4,8(a5)
 153:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 741              		.loc 1 153 13 is_stmt 1
 742              	.LVL34:
 154:src/Interrupt.cpp ****         }
 743              		.loc 1 154 13
 154:src/Interrupt.cpp ****         }
 744              		.loc 1 154 54 is_stmt 0
 745 0364 93070000 		li	a5,0
 746              	#APP
 747              	# 154 "src/Interrupt.cpp" 1
 748              		mv a0,a5
 749              	# 0 "" 2
 750              	#NO_APP
 751 036c 6FF09FD9 		j	.L1
 752              	.LVL35:
 753              	.L51:
 148:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 754              		.loc 1 148 13 is_stmt 1
 149:src/Interrupt.cpp **** 
 755              		.loc 1 149 13
 149:src/Interrupt.cpp **** 
 756              		.loc 1 149 54 is_stmt 0
 757 0370 9307F0FF 		li	a5,-1
 758              	#APP
 759              	# 149 "src/Interrupt.cpp" 1
 760              		mv a0,a5
 761              	# 0 "" 2
 762              	#NO_APP
 763 0378 6FF0DFD8 		j	.L1
 764              	.LVL36:
 765              	.L39:
 766              	.LBE172:
 767              	.LBB173:
 768              	.LBB162:
 159:src/Interrupt.cpp ****         if((Sem*)((sem_t)handle)->Sem!= nullptr) {
 769              		.loc 1 159 9 is_stmt 1
 160:src/Interrupt.cpp ****             ((Sem *) ((sem_t ) handle)->Sem)->deblockAll();
 770              		.loc 1 160 9
 160:src/Interrupt.cpp ****             ((Sem *) ((sem_t ) handle)->Sem)->deblockAll();
 771              		.loc 1 160 35 is_stmt 0
 772 037c 03B50500 		ld	a0,0(a1)
 773              	.LVL37:
 160:src/Interrupt.cpp ****             ((Sem *) ((sem_t ) handle)->Sem)->deblockAll();
GAS LISTING /tmp/ccCs0PLf.s 			page 21


 774              		.loc 1 160 9
 775 0380 630C0500 		beqz	a0,.L17
 161:src/Interrupt.cpp ****             res = 0;
 776              		.loc 1 161 13 is_stmt 1
 161:src/Interrupt.cpp ****             res = 0;
 777              		.loc 1 161 57 is_stmt 0
 778 0384 97000000 		call	_ZN3Sem10deblockAllEv@plt
 778      E7800000 
 779              	.LVL38:
 162:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 780              		.loc 1 162 13 is_stmt 1
 163:src/Interrupt.cpp **** 
 781              		.loc 1 163 13
 163:src/Interrupt.cpp **** 
 782              		.loc 1 163 54 is_stmt 0
 783 038c 93070000 		li	a5,0
 784              	#APP
 785              	# 163 "src/Interrupt.cpp" 1
 786              		mv a0,a5
 787              	# 0 "" 2
 788              	#NO_APP
 789 0394 6FF01FD7 		j	.L1
 790              	.LVL39:
 791              	.L17:
 167:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 792              		.loc 1 167 13 is_stmt 1
 168:src/Interrupt.cpp ****         }
 793              		.loc 1 168 13
 168:src/Interrupt.cpp ****         }
 794              		.loc 1 168 54 is_stmt 0
 795 0398 9307F0FF 		li	a5,-1
 796              	#APP
 797              	# 168 "src/Interrupt.cpp" 1
 798              		mv a0,a5
 799              	# 0 "" 2
 800              	#NO_APP
 801 03a0 6FF05FD6 		j	.L1
 802              	.LVL40:
 803              	.L40:
 804              	.LBE162:
 805              	.LBB163:
 806              	.LBB153:
 172:src/Interrupt.cpp ****         if((Sem*)((sem_t)handle)->Sem!= nullptr) {
 807              		.loc 1 172 9 is_stmt 1
 173:src/Interrupt.cpp ****             ((Sem *) ((sem_t ) handle)->Sem)->wait();
 808              		.loc 1 173 9
 173:src/Interrupt.cpp ****             ((Sem *) ((sem_t ) handle)->Sem)->wait();
 809              		.loc 1 173 35 is_stmt 0
 810 03a4 03B50500 		ld	a0,0(a1)
 811              	.LVL41:
 173:src/Interrupt.cpp ****             ((Sem *) ((sem_t ) handle)->Sem)->wait();
 812              		.loc 1 173 9
 813 03a8 630A0502 		beqz	a0,.L19
 174:src/Interrupt.cpp ****             if(!PCB::running->unblockError) {
 814              		.loc 1 174 13 is_stmt 1
 174:src/Interrupt.cpp ****             if(!PCB::running->unblockError) {
 815              		.loc 1 174 51 is_stmt 0
GAS LISTING /tmp/ccCs0PLf.s 			page 22


 816 03ac 97000000 		call	_ZN3Sem4waitEv@plt
 816      E7800000 
 817              	.LVL42:
 175:src/Interrupt.cpp ****                 res = 0;
 818              		.loc 1 175 13 is_stmt 1
 175:src/Interrupt.cpp ****                 res = 0;
 819              		.loc 1 175 31 is_stmt 0
 820 03b4 97070000 		la	a5,_ZN3PCB7runningE
 820      83B70700 
 821 03bc 83B70700 		ld	a5,0(a5)
 822 03c0 83C70700 		lbu	a5,0(a5)
 175:src/Interrupt.cpp ****                 res = 0;
 823              		.loc 1 175 13
 824 03c4 63960700 		bnez	a5,.L20
 176:src/Interrupt.cpp ****                 __asm__ volatile("mv a0,%0" : : "r"(res));
 825              		.loc 1 176 17 is_stmt 1
 826              	.LVL43:
 177:src/Interrupt.cpp **** 
 827              		.loc 1 177 17
 177:src/Interrupt.cpp **** 
 828              		.loc 1 177 58 is_stmt 0
 829              	#APP
 830              	# 177 "src/Interrupt.cpp" 1
 831              		mv a0,a5
 832              	# 0 "" 2
 833              	#NO_APP
 834 03cc 6FF09FD3 		j	.L1
 835              	.LVL44:
 836              	.L20:
 180:src/Interrupt.cpp ****                 __asm__ volatile("mv a0,%0" : : "r"(res));
 837              		.loc 1 180 17 is_stmt 1
 181:src/Interrupt.cpp **** 
 838              		.loc 1 181 17
 181:src/Interrupt.cpp **** 
 839              		.loc 1 181 58 is_stmt 0
 840 03d0 9307E0FF 		li	a5,-2
 841              	#APP
 842              	# 181 "src/Interrupt.cpp" 1
 843              		mv a0,a5
 844              	# 0 "" 2
 845              	#NO_APP
 846 03d8 6FF0DFD2 		j	.L1
 847              	.LVL45:
 848              	.L19:
 185:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 849              		.loc 1 185 13 is_stmt 1
 186:src/Interrupt.cpp ****         }
 850              		.loc 1 186 13
 186:src/Interrupt.cpp ****         }
 851              		.loc 1 186 54 is_stmt 0
 852 03dc 9307F0FF 		li	a5,-1
 853              	#APP
 854              	# 186 "src/Interrupt.cpp" 1
 855              		mv a0,a5
 856              	# 0 "" 2
 857              	#NO_APP
 858 03e4 6FF01FD2 		j	.L1
GAS LISTING /tmp/ccCs0PLf.s 			page 23


 859              	.LVL46:
 860              	.L41:
 861              	.LBE153:
 862              	.LBB154:
 863              	.LBB145:
 190:src/Interrupt.cpp ****         if((Sem*)((sem_t)handle)->Sem!= nullptr) {
 864              		.loc 1 190 9 is_stmt 1
 191:src/Interrupt.cpp ****             ((Sem *) ((sem_t ) handle)->Sem)->signal();
 865              		.loc 1 191 9
 191:src/Interrupt.cpp ****             ((Sem *) ((sem_t ) handle)->Sem)->signal();
 866              		.loc 1 191 35 is_stmt 0
 867 03e8 03B50500 		ld	a0,0(a1)
 868              	.LVL47:
 191:src/Interrupt.cpp ****             ((Sem *) ((sem_t ) handle)->Sem)->signal();
 869              		.loc 1 191 9
 870 03ec 630C0500 		beqz	a0,.L22
 192:src/Interrupt.cpp ****             res = 0;
 871              		.loc 1 192 13 is_stmt 1
 192:src/Interrupt.cpp ****             res = 0;
 872              		.loc 1 192 53 is_stmt 0
 873 03f0 97000000 		call	_ZN3Sem6signalEv@plt
 873      E7800000 
 874              	.LVL48:
 193:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 875              		.loc 1 193 13 is_stmt 1
 194:src/Interrupt.cpp ****         }
 876              		.loc 1 194 13
 194:src/Interrupt.cpp ****         }
 877              		.loc 1 194 54 is_stmt 0
 878 03f8 93070000 		li	a5,0
 879              	#APP
 880              	# 194 "src/Interrupt.cpp" 1
 881              		mv a0,a5
 882              	# 0 "" 2
 883              	#NO_APP
 884 0400 6FF05FD0 		j	.L1
 885              	.LVL49:
 886              	.L22:
 197:src/Interrupt.cpp ****             __asm__ volatile("mv a0,%0" : : "r"(res));
 887              		.loc 1 197 13 is_stmt 1
 198:src/Interrupt.cpp ****         }
 888              		.loc 1 198 13
 198:src/Interrupt.cpp ****         }
 889              		.loc 1 198 54 is_stmt 0
 890 0404 9307F0FF 		li	a5,-1
 891              	#APP
 892              	# 198 "src/Interrupt.cpp" 1
 893              		mv a0,a5
 894              	# 0 "" 2
 895              	#NO_APP
 896 040c 6FF09FCF 		j	.L1
 897              	.LVL50:
 898              	.L42:
 899              	.LBE145:
 900              	.LBB146:
 901              	.LBB138:
 203:src/Interrupt.cpp ****         PCB::sleep((time_t) time);
GAS LISTING /tmp/ccCs0PLf.s 			page 24


 902              		.loc 1 203 9 is_stmt 1
 204:src/Interrupt.cpp ****         PCB::timeLeft = 0;
 903              		.loc 1 204 9
 204:src/Interrupt.cpp ****         PCB::timeLeft = 0;
 904              		.loc 1 204 19 is_stmt 0
 905 0410 13850500 		mv	a0,a1
 906              	.LVL51:
 907 0414 97000000 		call	_ZN3PCB5sleepEm@plt
 907      E7800000 
 908              	.LVL52:
 205:src/Interrupt.cpp ****         PCB::dispatch();
 909              		.loc 1 205 9 is_stmt 1
 205:src/Interrupt.cpp ****         PCB::dispatch();
 910              		.loc 1 205 23 is_stmt 0
 911 041c 97070000 		la	a5,_ZN3PCB8timeLeftE
 911      83B70700 
 912 0424 23B00700 		sd	zero,0(a5)
 206:src/Interrupt.cpp ****         res = 0;
 913              		.loc 1 206 9 is_stmt 1
 206:src/Interrupt.cpp ****         res = 0;
 914              		.loc 1 206 22 is_stmt 0
 915 0428 97000000 		call	_ZN3PCB8dispatchEv@plt
 915      E7800000 
 916              	.LVL53:
 207:src/Interrupt.cpp ****         __asm__ volatile("mv a0,%0" : : "r"(res));
 917              		.loc 1 207 9 is_stmt 1
 208:src/Interrupt.cpp **** 
 918              		.loc 1 208 9
 208:src/Interrupt.cpp **** 
 919              		.loc 1 208 50 is_stmt 0
 920 0430 93070000 		li	a5,0
 921              	#APP
 922              	# 208 "src/Interrupt.cpp" 1
 923              		mv a0,a5
 924              	# 0 "" 2
 925              	#NO_APP
 926              	.LBE138:
 927 0438 6FF0DFCC 		j	.L1
 928              	.LVL54:
 929              	.L43:
 930              	.LBB139:
 931              	.LBB132:
 212:src/Interrupt.cpp ****         char c = Cons::inputBuffer->get();
 932              		.loc 1 212 9 is_stmt 1
 213:src/Interrupt.cpp ****         chr = (uint64)c;
 933              		.loc 1 213 9
 213:src/Interrupt.cpp ****         chr = (uint64)c;
 934              		.loc 1 213 40 is_stmt 0
 935 043c 97070000 		la	a5,_ZN4Cons11inputBufferE
 935      83B70700 
 936 0444 03B50700 		ld	a0,0(a5)
 937              	.LVL55:
 938 0448 97000000 		call	_ZN10CharBuffer3getEv@plt
 938      E7800000 
 939              	.LVL56:
 214:src/Interrupt.cpp ****         __asm__ volatile("mv a0,%0" : : "r"(chr));
 940              		.loc 1 214 9 is_stmt 1
GAS LISTING /tmp/ccCs0PLf.s 			page 25


 215:src/Interrupt.cpp ****     }
 941              		.loc 1 215 9
 215:src/Interrupt.cpp ****     }
 942              		.loc 1 215 50 is_stmt 0
 943              	#APP
 944              	# 215 "src/Interrupt.cpp" 1
 945              		mv a0,a0
 946              	# 0 "" 2
 947              	#NO_APP
 948              	.LBE132:
 949 0454 6FF01FCB 		j	.L1
 950              	.LVL57:
 951              	.L44:
 952              	.LBB133:
 953              	.LBB127:
 218:src/Interrupt.cpp ****         Cons::outputBuffer->put((char)chr);
 954              		.loc 1 218 9 is_stmt 1
 219:src/Interrupt.cpp **** 
 955              		.loc 1 219 9
 219:src/Interrupt.cpp **** 
 956              		.loc 1 219 32 is_stmt 0
 957 0458 93F5F50F 		andi	a1,a1,0xff
 958 045c 97070000 		la	a5,_ZN4Cons12outputBufferE
 958      83B70700 
 959 0464 03B50700 		ld	a0,0(a5)
 960              	.LVL58:
 961 0468 97000000 		call	_ZN10CharBuffer3putEc@plt
 961      E7800000 
 962              	.LVL59:
 963              	.LBE127:
 964 0470 6FF05FC9 		j	.L1
 965              	.LVL60:
 966              	.L45:
 967              	.LBB128:
 223:src/Interrupt.cpp ****     }
 968              		.loc 1 223 9 is_stmt 1
 969              	.LBB122:
 970              	.LBB123:
 244:src/Interrupt.cpp **** 
 245:src/Interrupt.cpp **** inline void Interrupt::ms_status(uint64 mask) {
 246:src/Interrupt.cpp ****     __asm__ volatile("csrs sstatus, %[mask]" : : [mask]"r"(mask));
 247:src/Interrupt.cpp **** }
 248:src/Interrupt.cpp **** inline void Interrupt::mc_status(uint64 mask) {
 249:src/Interrupt.cpp ****     __asm__ volatile("csrc sstatus, %[mask]" : : [mask]"r"(mask));
 971              		.loc 1 249 5
 972              		.loc 1 249 66 is_stmt 0
 973 0474 93070010 		li	a5,256
 974              	#APP
 975              	# 249 "src/Interrupt.cpp" 1
 250              	}
 976              		csrc sstatus, a5
 977              	# 0 "" 2
 978              		.loc 1 250 1
 979              	#NO_APP
 980 047c 6FF09FC8 		j	.L1
 981              	.LVL61:
 982              	.L46:
GAS LISTING /tmp/ccCs0PLf.s 			page 26


 983              	.LBE123:
 984              	.LBE122:
 985              	.LBB124:
 986              	.LBB119:
 226:src/Interrupt.cpp ****         ((PCB *) (*(thread_t *) handle)->PCB)->isPeriodic = true;
 987              		.loc 1 226 9 is_stmt 1
 227:src/Interrupt.cpp **** 
 988              		.loc 1 227 9
 227:src/Interrupt.cpp **** 
 989              		.loc 1 227 19 is_stmt 0
 990 0480 83B70500 		ld	a5,0(a1)
 227:src/Interrupt.cpp **** 
 991              		.loc 1 227 42
 992 0484 83B70700 		ld	a5,0(a5)
 227:src/Interrupt.cpp **** 
 993              		.loc 1 227 59
 994 0488 13071000 		li	a4,1
 995              	.LVL62:
 996 048c A380E700 		sb	a4,1(a5)
 997              	.LBE119:
 998 0490 6FF05FC7 		j	.L1
 999              	.LVL63:
 1000              	.L47:
 1001              	.LBB120:
 1002              	.LBB118:
 1003              	.LBB117:
 1004              	.LBB116:
 232:src/Interrupt.cpp ****             PCB* periodicThread = PCB::perioThreads->get();
 1005              		.loc 1 232 13 is_stmt 1
 232:src/Interrupt.cpp ****             PCB* periodicThread = PCB::perioThreads->get();
 1006              		.loc 1 232 36 is_stmt 0
 1007 0494 97070000 		la	a5,_ZN3PCB17isPeriodicBlockedE
 1007      83B70700 
 1008 049c 23800700 		sb	zero,0(a5)
 233:src/Interrupt.cpp ****             while (periodicThread != nullptr) {
 1009              		.loc 1 233 13 is_stmt 1
 233:src/Interrupt.cpp ****             while (periodicThread != nullptr) {
 1010              		.loc 1 233 57 is_stmt 0
 1011 04a0 97070000 		la	a5,_ZN3PCB12perioThreadsE
 1011      83B70700 
 1012 04a8 03B50700 		ld	a0,0(a5)
 1013              	.LVL64:
 1014 04ac 97000000 		call	_ZN8PCB_List3getEv@plt
 1014      E7800000 
 1015              	.LVL65:
 1016              	.L30:
 234:src/Interrupt.cpp ****                 Scheduler::put(periodicThread);
 1017              		.loc 1 234 13 is_stmt 1
 234:src/Interrupt.cpp ****                 Scheduler::put(periodicThread);
 1018              		.loc 1 234 35
 1019 04b4 E30005C2 		beqz	a0,.L29
 235:src/Interrupt.cpp ****                 periodicThread = PCB::perioThreads->get();
 1020              		.loc 1 235 17
 235:src/Interrupt.cpp ****                 periodicThread = PCB::perioThreads->get();
 1021              		.loc 1 235 31 is_stmt 0
 1022 04b8 97000000 		call	_ZN9Scheduler3putEP3PCB@plt
 1022      E7800000 
GAS LISTING /tmp/ccCs0PLf.s 			page 27


 1023              	.LVL66:
 236:src/Interrupt.cpp ****             }
 1024              		.loc 1 236 17 is_stmt 1
 236:src/Interrupt.cpp ****             }
 1025              		.loc 1 236 56 is_stmt 0
 1026 04c0 97070000 		la	a5,_ZN3PCB12perioThreadsE
 1026      83B70700 
 1027 04c8 03B50700 		ld	a0,0(a5)
 1028 04cc 97000000 		call	_ZN8PCB_List3getEv@plt
 1028      E7800000 
 1029              	.LVL67:
 234:src/Interrupt.cpp ****                 Scheduler::put(periodicThread);
 1030              		.loc 1 234 13
 1031 04d4 6FF01FFE 		j	.L30
 1032              	.LBE116:
 1033              	.LBE117:
 1034              	.LBE118:
 1035              	.LBE120:
 1036              	.LBE124:
 1037              	.LBE128:
 1038              	.LBE133:
 1039              	.LBE139:
 1040              	.LBE146:
 1041              	.LBE154:
 1042              	.LBE163:
 1043              	.LBE173:
 1044              	.LBE183:
 1045              	.LBE197:
 1046              	.LBE210:
 1047              	.LBE225:
 1048              	.LBE241:
 1049              	.LBE258:
 1050              	.LBE276:
 1051              		.cfi_endproc
 1052              	.LFE11:
 1054              		.align	2
 1055              		.globl	_ZN9Interrupt8r_statusEv
 1057              	_ZN9Interrupt8r_statusEv:
 1058              	.LFB14:
 251:src/Interrupt.cpp **** 
 252:src/Interrupt.cpp **** uint64 Interrupt::r_status() {
 1059              		.loc 1 252 30 is_stmt 1
 1060              		.cfi_startproc
 1061 04d8 130101FF 		addi	sp,sp,-16
 1062              		.cfi_def_cfa_offset 16
 1063 04dc 23348100 		sd	s0,8(sp)
 1064              		.cfi_offset 8, -8
 1065 04e0 13040101 		addi	s0,sp,16
 1066              		.cfi_def_cfa 8, 0
 253:src/Interrupt.cpp ****     uint64 sstatus = r_statusi();
 1067              		.loc 1 253 5
 1068              	.LBB277:
 1069              	.LBB278:
 254:src/Interrupt.cpp ****     return sstatus;
 255:src/Interrupt.cpp **** }
 256:src/Interrupt.cpp **** inline uint64 Interrupt::r_statusi(){
 257:src/Interrupt.cpp ****     uint64 sstatus;
GAS LISTING /tmp/ccCs0PLf.s 			page 28


 1070              		.loc 1 257 5
 258:src/Interrupt.cpp ****     __asm__ volatile ("csrr %[sstatus],sstatus":  [sstatus]"=r"(sstatus));
 1071              		.loc 1 258 5
 1072              		.loc 1 258 74 is_stmt 0
 1073              	#APP
 1074              	# 258 "src/Interrupt.cpp" 1
 259              	    return sstatus;
 1075              		csrr a0,sstatus
 1076              	# 0 "" 2
 1077              	.LVL68:
 1078              		.loc 1 259 5 is_stmt 1
 1079              	#NO_APP
 1080              	.LBE278:
 1081              	.LBE277:
 254:src/Interrupt.cpp ****     return sstatus;
 1082              		.loc 1 254 5
 255:src/Interrupt.cpp **** inline uint64 Interrupt::r_statusi(){
 1083              		.loc 1 255 1 is_stmt 0
 1084 04e8 03348100 		ld	s0,8(sp)
 1085              		.cfi_restore 8
 1086              		.cfi_def_cfa 2, 16
 1087 04ec 13010101 		addi	sp,sp,16
 1088              		.cfi_def_cfa_offset 0
 1089 04f0 67800000 		jr	ra
 1090              		.cfi_endproc
 1091              	.LFE14:
 1093              		.align	2
 1094              		.globl	_ZN9Interrupt8w_statusEm
 1096              	_ZN9Interrupt8w_statusEm:
 1097              	.LFB16:
 260:src/Interrupt.cpp **** }
 261:src/Interrupt.cpp **** 
 262:src/Interrupt.cpp ****  void Interrupt::w_status(uint64 sstatus){
 1098              		.loc 1 262 42 is_stmt 1
 1099              		.cfi_startproc
 1100              	.LVL69:
 1101 04f4 130101FF 		addi	sp,sp,-16
 1102              		.cfi_def_cfa_offset 16
 1103 04f8 23348100 		sd	s0,8(sp)
 1104              		.cfi_offset 8, -8
 1105 04fc 13040101 		addi	s0,sp,16
 1106              		.cfi_def_cfa 8, 0
 263:src/Interrupt.cpp **** 
 264:src/Interrupt.cpp ****      w_statusi(sstatus);
 1107              		.loc 1 264 6
 1108              	.LVL70:
 1109              	.LBB279:
 1110              	.LBB280:
 265:src/Interrupt.cpp **** 
 266:src/Interrupt.cpp **** }
 267:src/Interrupt.cpp **** inline void Interrupt::w_statusi(uint64 sstatus){
 268:src/Interrupt.cpp **** 
 269:src/Interrupt.cpp ****     __asm__ volatile ("csrw sstatus,%[sstatus]": : [sstatus]"r"(sstatus));
 1111              		.loc 1 269 5
 1112              		.loc 1 269 74 is_stmt 0
 1113              	#APP
 1114              	# 269 "src/Interrupt.cpp" 1
GAS LISTING /tmp/ccCs0PLf.s 			page 29


 270              	
 1115              		csrw sstatus,a0
 1116              	# 0 "" 2
 1117              	.LVL71:
 1118              	#NO_APP
 1119              	.LBE280:
 1120              	.LBE279:
 266:src/Interrupt.cpp **** inline void Interrupt::w_statusi(uint64 sstatus){
 1121              		.loc 1 266 1
 1122 0504 03348100 		ld	s0,8(sp)
 1123              		.cfi_restore 8
 1124              		.cfi_def_cfa 2, 16
 1125 0508 13010101 		addi	sp,sp,16
 1126              		.cfi_def_cfa_offset 0
 1127 050c 67800000 		jr	ra
 1128              		.cfi_endproc
 1129              	.LFE16:
 1131              		.align	2
 1132              		.globl	_ZN9Interrupt7r_stvecEv
 1134              	_ZN9Interrupt7r_stvecEv:
 1135              	.LFB18:
 271:src/Interrupt.cpp **** }
 272:src/Interrupt.cpp **** uint64 Interrupt::r_stvec(){
 1136              		.loc 1 272 28 is_stmt 1
 1137              		.cfi_startproc
 1138 0510 130101FF 		addi	sp,sp,-16
 1139              		.cfi_def_cfa_offset 16
 1140 0514 23348100 		sd	s0,8(sp)
 1141              		.cfi_offset 8, -8
 1142 0518 13040101 		addi	s0,sp,16
 1143              		.cfi_def_cfa 8, 0
 273:src/Interrupt.cpp ****     uint64 stvec = r_stveci();
 1144              		.loc 1 273 5
 1145              	.LBB281:
 1146              	.LBB282:
 274:src/Interrupt.cpp ****     return stvec;
 275:src/Interrupt.cpp **** }
 276:src/Interrupt.cpp **** inline uint64 Interrupt::r_stveci(){
 277:src/Interrupt.cpp ****     uint64 stvec;
 1147              		.loc 1 277 5
 278:src/Interrupt.cpp ****     __asm__ volatile ("csrr %[stvec],stvec":  [stvec]"=r"(stvec));
 1148              		.loc 1 278 5
 1149              		.loc 1 278 66 is_stmt 0
 1150              	#APP
 1151              	# 278 "src/Interrupt.cpp" 1
 279              	    return stvec;
 1152              		csrr a0,stvec
 1153              	# 0 "" 2
 1154              	.LVL72:
 1155              		.loc 1 279 5 is_stmt 1
 1156              	#NO_APP
 1157              	.LBE282:
 1158              	.LBE281:
 274:src/Interrupt.cpp ****     return stvec;
 1159              		.loc 1 274 5
 275:src/Interrupt.cpp **** inline uint64 Interrupt::r_stveci(){
 1160              		.loc 1 275 1 is_stmt 0
GAS LISTING /tmp/ccCs0PLf.s 			page 30


 1161 0520 03348100 		ld	s0,8(sp)
 1162              		.cfi_restore 8
 1163              		.cfi_def_cfa 2, 16
 1164 0524 13010101 		addi	sp,sp,16
 1165              		.cfi_def_cfa_offset 0
 1166 0528 67800000 		jr	ra
 1167              		.cfi_endproc
 1168              	.LFE18:
 1170              		.align	2
 1171              		.globl	_ZN9Interrupt7w_stvecEm
 1173              	_ZN9Interrupt7w_stvecEm:
 1174              	.LFB20:
 280:src/Interrupt.cpp **** }
 281:src/Interrupt.cpp **** 
 282:src/Interrupt.cpp **** void Interrupt::w_stvec(uint64 stvec) {
 1175              		.loc 1 282 39 is_stmt 1
 1176              		.cfi_startproc
 1177              	.LVL73:
 1178 052c 130101FF 		addi	sp,sp,-16
 1179              		.cfi_def_cfa_offset 16
 1180 0530 23348100 		sd	s0,8(sp)
 1181              		.cfi_offset 8, -8
 1182 0534 13040101 		addi	s0,sp,16
 1183              		.cfi_def_cfa 8, 0
 283:src/Interrupt.cpp ****     w_stveci(stvec);
 1184              		.loc 1 283 5
 1185              	.LVL74:
 1186              	.LBB283:
 1187              	.LBB284:
 284:src/Interrupt.cpp **** }
 285:src/Interrupt.cpp **** inline void Interrupt::w_stveci(uint64 stvec) {
 286:src/Interrupt.cpp ****     __asm__ volatile ("csrw stvec,%[stvec]": : [stvec]"r"(stvec));
 1188              		.loc 1 286 5
 1189              		.loc 1 286 66 is_stmt 0
 1190              	#APP
 1191              	# 286 "src/Interrupt.cpp" 1
 287              	
 1192              		csrw stvec,a0
 1193              	# 0 "" 2
 1194              	.LVL75:
 1195              	#NO_APP
 1196              	.LBE284:
 1197              	.LBE283:
 284:src/Interrupt.cpp **** }
 1198              		.loc 1 284 1
 1199 053c 03348100 		ld	s0,8(sp)
 1200              		.cfi_restore 8
 1201              		.cfi_def_cfa 2, 16
 1202 0540 13010101 		addi	sp,sp,16
 1203              		.cfi_def_cfa_offset 0
 1204 0544 67800000 		jr	ra
 1205              		.cfi_endproc
 1206              	.LFE20:
 1208              		.align	2
 1209              		.globl	_ZN9Interrupt8r_scauseEv
 1211              	_ZN9Interrupt8r_scauseEv:
 1212              	.LFB22:
GAS LISTING /tmp/ccCs0PLf.s 			page 31


 288:src/Interrupt.cpp **** }
 289:src/Interrupt.cpp **** 
 290:src/Interrupt.cpp ****  uint64 Interrupt::r_scause() {
 1213              		.loc 1 290 31 is_stmt 1
 1214              		.cfi_startproc
 1215 0548 130101FF 		addi	sp,sp,-16
 1216              		.cfi_def_cfa_offset 16
 1217 054c 23348100 		sd	s0,8(sp)
 1218              		.cfi_offset 8, -8
 1219 0550 13040101 		addi	s0,sp,16
 1220              		.cfi_def_cfa 8, 0
 291:src/Interrupt.cpp ****     uint64 scause = r_scausei();
 1221              		.loc 1 291 5
 1222              	.LBB285:
 1223              	.LBB286:
 292:src/Interrupt.cpp ****     return scause;
 293:src/Interrupt.cpp **** }
 294:src/Interrupt.cpp **** 
 295:src/Interrupt.cpp **** inline uint64 Interrupt::r_scausei() {
 296:src/Interrupt.cpp ****     uint64 scause;
 1224              		.loc 1 296 5
 297:src/Interrupt.cpp ****     __asm__ volatile ("csrr %[scause],scause":  [scause]"=r"(scause));
 1225              		.loc 1 297 5
 1226              		.loc 1 297 70 is_stmt 0
 1227              	#APP
 1228              	# 297 "src/Interrupt.cpp" 1
 298              	    return scause;
 1229              		csrr a0,scause
 1230              	# 0 "" 2
 1231              	.LVL76:
 1232              		.loc 1 298 5 is_stmt 1
 1233              	#NO_APP
 1234              	.LBE286:
 1235              	.LBE285:
 292:src/Interrupt.cpp ****     return scause;
 1236              		.loc 1 292 5
 293:src/Interrupt.cpp **** 
 1237              		.loc 1 293 1 is_stmt 0
 1238 0558 03348100 		ld	s0,8(sp)
 1239              		.cfi_restore 8
 1240              		.cfi_def_cfa 2, 16
 1241 055c 13010101 		addi	sp,sp,16
 1242              		.cfi_def_cfa_offset 0
 1243 0560 67800000 		jr	ra
 1244              		.cfi_endproc
 1245              	.LFE22:
 1247              		.align	2
 1248              		.globl	_ZN9Interrupt8w_scauseEm
 1250              	_ZN9Interrupt8w_scauseEm:
 1251              	.LFB24:
 299:src/Interrupt.cpp **** }
 300:src/Interrupt.cpp **** 
 301:src/Interrupt.cpp ****  void Interrupt::w_scause(uint64 scause) {
 1252              		.loc 1 301 42 is_stmt 1
 1253              		.cfi_startproc
 1254              	.LVL77:
 1255 0564 130101FF 		addi	sp,sp,-16
GAS LISTING /tmp/ccCs0PLf.s 			page 32


 1256              		.cfi_def_cfa_offset 16
 1257 0568 23348100 		sd	s0,8(sp)
 1258              		.cfi_offset 8, -8
 1259 056c 13040101 		addi	s0,sp,16
 1260              		.cfi_def_cfa 8, 0
 302:src/Interrupt.cpp ****      w_scausei(scause);
 1261              		.loc 1 302 6
 1262              	.LVL78:
 1263              	.LBB287:
 1264              	.LBB288:
 303:src/Interrupt.cpp **** }
 304:src/Interrupt.cpp **** inline void Interrupt::w_scausei(uint64 scause) {
 305:src/Interrupt.cpp ****     __asm__ volatile ("csrw scause,%[scause]": : [scause]"r"(scause));
 1265              		.loc 1 305 5
 1266              		.loc 1 305 70 is_stmt 0
 1267              	#APP
 1268              	# 305 "src/Interrupt.cpp" 1
 306              	
 1269              		csrw scause,a0
 1270              	# 0 "" 2
 1271              	.LVL79:
 1272              	#NO_APP
 1273              	.LBE288:
 1274              	.LBE287:
 303:src/Interrupt.cpp **** }
 1275              		.loc 1 303 1
 1276 0574 03348100 		ld	s0,8(sp)
 1277              		.cfi_restore 8
 1278              		.cfi_def_cfa 2, 16
 1279 0578 13010101 		addi	sp,sp,16
 1280              		.cfi_def_cfa_offset 0
 1281 057c 67800000 		jr	ra
 1282              		.cfi_endproc
 1283              	.LFE24:
 1285              		.align	2
 1286              		.globl	_ZN9Interrupt6w_sepcEm
 1288              	_ZN9Interrupt6w_sepcEm:
 1289              	.LFB26:
 307:src/Interrupt.cpp **** }
 308:src/Interrupt.cpp **** 
 309:src/Interrupt.cpp **** void Interrupt::w_sepc(uint64 sepc) {
 1290              		.loc 1 309 37 is_stmt 1
 1291              		.cfi_startproc
 1292              	.LVL80:
 1293 0580 130101FF 		addi	sp,sp,-16
 1294              		.cfi_def_cfa_offset 16
 1295 0584 23348100 		sd	s0,8(sp)
 1296              		.cfi_offset 8, -8
 1297 0588 13040101 		addi	s0,sp,16
 1298              		.cfi_def_cfa 8, 0
 310:src/Interrupt.cpp ****     w_sepci(sepc);
 1299              		.loc 1 310 5
 1300              	.LVL81:
 1301              	.LBB289:
 1302              	.LBB290:
 311:src/Interrupt.cpp **** }
 312:src/Interrupt.cpp **** 
GAS LISTING /tmp/ccCs0PLf.s 			page 33


 313:src/Interrupt.cpp **** inline void Interrupt::w_sepci(uint64 sepc) {
 314:src/Interrupt.cpp ****     __asm__ volatile ("csrw sepc,%[sepc]": : [sepc]"r"(sepc));
 1303              		.loc 1 314 5
 1304              		.loc 1 314 62 is_stmt 0
 1305              	#APP
 1306              	# 314 "src/Interrupt.cpp" 1
 315              	
 1307              		csrw sepc,a0
 1308              	# 0 "" 2
 1309              	.LVL82:
 1310              	#NO_APP
 1311              	.LBE290:
 1312              	.LBE289:
 311:src/Interrupt.cpp **** }
 1313              		.loc 1 311 1
 1314 0590 03348100 		ld	s0,8(sp)
 1315              		.cfi_restore 8
 1316              		.cfi_def_cfa 2, 16
 1317 0594 13010101 		addi	sp,sp,16
 1318              		.cfi_def_cfa_offset 0
 1319 0598 67800000 		jr	ra
 1320              		.cfi_endproc
 1321              	.LFE26:
 1323              		.align	2
 1324              		.globl	_ZN9Interrupt6r_sepcEv
 1326              	_ZN9Interrupt6r_sepcEv:
 1327              	.LFB28:
 316:src/Interrupt.cpp **** }
 317:src/Interrupt.cpp **** 
 318:src/Interrupt.cpp ****  uint64 Interrupt::r_sepc() {
 1328              		.loc 1 318 29 is_stmt 1
 1329              		.cfi_startproc
 1330 059c 130101FF 		addi	sp,sp,-16
 1331              		.cfi_def_cfa_offset 16
 1332 05a0 23348100 		sd	s0,8(sp)
 1333              		.cfi_offset 8, -8
 1334 05a4 13040101 		addi	s0,sp,16
 1335              		.cfi_def_cfa 8, 0
 319:src/Interrupt.cpp ****     uint64 sepc = r_sepci();
 1336              		.loc 1 319 5
 1337              	.LBB291:
 1338              	.LBB292:
 320:src/Interrupt.cpp ****     return sepc;
 321:src/Interrupt.cpp **** }
 322:src/Interrupt.cpp **** 
 323:src/Interrupt.cpp **** inline uint64 Interrupt::r_sepci() {
 324:src/Interrupt.cpp ****     uint64 sepc;
 1339              		.loc 1 324 5
 325:src/Interrupt.cpp ****     __asm__ volatile ("csrr %[sepc],sepc":  [sepc]"=r"(sepc));
 1340              		.loc 1 325 5
 1341              		.loc 1 325 62 is_stmt 0
 1342              	#APP
 1343              	# 325 "src/Interrupt.cpp" 1
 326              	    return sepc;
 1344              		csrr a0,sepc
 1345              	# 0 "" 2
 1346              	.LVL83:
GAS LISTING /tmp/ccCs0PLf.s 			page 34


 1347              		.loc 1 326 5 is_stmt 1
 1348              	#NO_APP
 1349              	.LBE292:
 1350              	.LBE291:
 320:src/Interrupt.cpp ****     return sepc;
 1351              		.loc 1 320 5
 321:src/Interrupt.cpp **** 
 1352              		.loc 1 321 1 is_stmt 0
 1353 05ac 03348100 		ld	s0,8(sp)
 1354              		.cfi_restore 8
 1355              		.cfi_def_cfa 2, 16
 1356 05b0 13010101 		addi	sp,sp,16
 1357              		.cfi_def_cfa_offset 0
 1358 05b4 67800000 		jr	ra
 1359              		.cfi_endproc
 1360              	.LFE28:
 1362              		.align	2
 1363              		.globl	_ZN9Interrupt13handleSysCallEv
 1365              	_ZN9Interrupt13handleSysCallEv:
 1366              	.LFB10:
  10:src/Interrupt.cpp **** 
 1367              		.loc 1 10 33 is_stmt 1
 1368              		.cfi_startproc
 1369 05b8 130101FD 		addi	sp,sp,-48
 1370              		.cfi_def_cfa_offset 48
 1371 05bc 23341102 		sd	ra,40(sp)
 1372 05c0 23308102 		sd	s0,32(sp)
 1373 05c4 233C9100 		sd	s1,24(sp)
 1374 05c8 23382101 		sd	s2,16(sp)
 1375              		.cfi_offset 1, -8
 1376              		.cfi_offset 8, -16
 1377              		.cfi_offset 9, -24
 1378              		.cfi_offset 18, -32
 1379 05cc 13040103 		addi	s0,sp,48
 1380              		.cfi_def_cfa 8, 0
  13:src/Interrupt.cpp ****     if(scause == 0x0000000000000009UL || scause == 0x0000000000000008UL) {
 1381              		.loc 1 13 5
 1382              	.LBB293:
 1383              	.LBB294:
 296:src/Interrupt.cpp ****     __asm__ volatile ("csrr %[scause],scause":  [scause]"=r"(scause));
 1384              		.loc 1 296 5
 297:src/Interrupt.cpp ****     return scause;
 1385              		.loc 1 297 5
 297:src/Interrupt.cpp ****     return scause;
 1386              		.loc 1 297 70 is_stmt 0
 1387              	#APP
 1388              	# 297 "src/Interrupt.cpp" 1
 1389              		csrr a4,scause
 1390              	# 0 "" 2
 1391              	.LVL84:
 298:src/Interrupt.cpp **** }
 1392              		.loc 1 298 5 is_stmt 1
 1393              	#NO_APP
 1394              	.LBE294:
 1395              	.LBE293:
  14:src/Interrupt.cpp **** 
 1396              		.loc 1 14 5
GAS LISTING /tmp/ccCs0PLf.s 			page 35


 1397              	.LBB295:
  14:src/Interrupt.cpp **** 
 1398              		.loc 1 14 39 is_stmt 0
 1399 05d4 930687FF 		addi	a3,a4,-8
  14:src/Interrupt.cpp **** 
 1400              		.loc 1 14 5
 1401 05d8 93071000 		li	a5,1
 1402 05dc 63FED702 		bleu	a3,a5,.L81
 1403              	.LBE295:
  31:src/Interrupt.cpp ****         uint64 sie = r_siei();
 1404              		.loc 1 31 10 is_stmt 1
 1405              	.LBB332:
 1406              	.LBB296:
 1407 05e0 9307F0FF 		li	a5,-1
 1408 05e4 9397F703 		slli	a5,a5,63
 1409 05e8 93871700 		addi	a5,a5,1
 1410 05ec 6300F706 		beq	a4,a5,.L82
 1411              	.LBE296:
 1412              	.LBE332:
  60:src/Interrupt.cpp ****         int irq = plic_claim();
 1413              		.loc 1 60 10
 1414              	.LBB333:
 1415              	.LBB321:
 1416              	.LBB297:
 1417 05f0 9307F0FF 		li	a5,-1
 1418 05f4 9397F703 		slli	a5,a5,63
 1419 05f8 93879700 		addi	a5,a5,9
 1420 05fc 630CF716 		beq	a4,a5,.L83
 1421              	.LVL85:
 1422              	.L68:
 1423              	.LBE297:
 1424              	.LBE321:
 1425              	.LBE333:
  73:src/Interrupt.cpp **** 
 1426              		.loc 1 73 1 is_stmt 0
 1427 0600 83308102 		ld	ra,40(sp)
 1428              		.cfi_remember_state
 1429              		.cfi_restore 1
 1430 0604 03340102 		ld	s0,32(sp)
 1431              		.cfi_restore 8
 1432              		.cfi_def_cfa 2, 48
 1433 0608 83348101 		ld	s1,24(sp)
 1434              		.cfi_restore 9
 1435 060c 03390101 		ld	s2,16(sp)
 1436              		.cfi_restore 18
 1437 0610 13010103 		addi	sp,sp,48
 1438              		.cfi_def_cfa_offset 0
 1439 0614 67800000 		jr	ra
 1440              	.LVL86:
 1441              	.L81:
 1442              		.cfi_restore_state
 1443              	.LBB334:
 1444              	.LBB322:
  16:src/Interrupt.cpp ****         uint64 sscause = r_scausei();
 1445              		.loc 1 16 9 is_stmt 1
 1446              	.LBB323:
 1447              	.LBB324:
GAS LISTING /tmp/ccCs0PLf.s 			page 36


 324:src/Interrupt.cpp ****     __asm__ volatile ("csrr %[sepc],sepc":  [sepc]"=r"(sepc));
 1448              		.loc 1 324 5
 325:src/Interrupt.cpp ****     return sepc;
 1449              		.loc 1 325 5
 325:src/Interrupt.cpp ****     return sepc;
 1450              		.loc 1 325 62 is_stmt 0
 1451              	#APP
 1452              	# 325 "src/Interrupt.cpp" 1
 1453              		csrr s1,sepc
 1454              	# 0 "" 2
 1455              	.LVL87:
 1456              		.loc 1 326 5 is_stmt 1
 1457              	#NO_APP
 1458              	.LBE324:
 1459              	.LBE323:
  16:src/Interrupt.cpp ****         uint64 sscause = r_scausei();
 1460              		.loc 1 16 35 is_stmt 0
 1461 061c 93844400 		addi	s1,s1,4
 1462              	.LVL88:
  17:src/Interrupt.cpp ****         uint64 opCode,arg1,arg2,arg3,arg4;
 1463              		.loc 1 17 9 is_stmt 1
 1464              	.LBB325:
 1465              	.LBB326:
 296:src/Interrupt.cpp ****     __asm__ volatile ("csrr %[scause],scause":  [scause]"=r"(scause));
 1466              		.loc 1 296 5
 297:src/Interrupt.cpp ****     return scause;
 1467              		.loc 1 297 5
 297:src/Interrupt.cpp ****     return scause;
 1468              		.loc 1 297 70 is_stmt 0
 1469              	#APP
 1470              	# 297 "src/Interrupt.cpp" 1
 1471              		csrr s2,scause
 1472              	# 0 "" 2
 1473              	.LVL89:
 298:src/Interrupt.cpp **** }
 1474              		.loc 1 298 5 is_stmt 1
 1475              	#NO_APP
 1476              	.LBE326:
 1477              	.LBE325:
  18:src/Interrupt.cpp ****         __asm__ volatile("ld %0,80(s0)" : "=r"(opCode));
 1478              		.loc 1 18 9
  19:src/Interrupt.cpp ****         __asm__ volatile("ld %0,88(s0)" : "=r"(arg1));
 1479              		.loc 1 19 9
  19:src/Interrupt.cpp ****         __asm__ volatile("ld %0,88(s0)" : "=r"(arg1));
 1480              		.loc 1 19 56 is_stmt 0
 1481              	#APP
 1482              	# 19 "src/Interrupt.cpp" 1
 1483              		ld a0,80(s0)
 1484              	# 0 "" 2
 1485              	.LVL90:
  20:src/Interrupt.cpp ****         __asm__ volatile("ld %0,96(s0)" : "=r"(arg2));
 1486              		.loc 1 20 9 is_stmt 1
  20:src/Interrupt.cpp ****         __asm__ volatile("ld %0,96(s0)" : "=r"(arg2));
 1487              		.loc 1 20 54 is_stmt 0
 1488              	# 20 "src/Interrupt.cpp" 1
 1489              		ld a1,88(s0)
 1490              	# 0 "" 2
GAS LISTING /tmp/ccCs0PLf.s 			page 37


 1491              	.LVL91:
  21:src/Interrupt.cpp ****         __asm__ volatile("ld %0,104(s0)" : "=r"(arg3));
 1492              		.loc 1 21 9 is_stmt 1
  21:src/Interrupt.cpp ****         __asm__ volatile("ld %0,104(s0)" : "=r"(arg3));
 1493              		.loc 1 21 54 is_stmt 0
 1494              	# 21 "src/Interrupt.cpp" 1
 1495              		ld a2,96(s0)
 1496              	# 0 "" 2
 1497              	.LVL92:
  22:src/Interrupt.cpp ****         __asm__ volatile("ld %0,112(s0)" : "=r"(arg4));
 1498              		.loc 1 22 9 is_stmt 1
  22:src/Interrupt.cpp ****         __asm__ volatile("ld %0,112(s0)" : "=r"(arg4));
 1499              		.loc 1 22 55 is_stmt 0
 1500              	# 22 "src/Interrupt.cpp" 1
 1501              		ld a3,104(s0)
 1502              	# 0 "" 2
 1503              	.LVL93:
  23:src/Interrupt.cpp ****         callSys(opCode,arg1,arg2,arg3,arg4);
 1504              		.loc 1 23 9 is_stmt 1
  23:src/Interrupt.cpp ****         callSys(opCode,arg1,arg2,arg3,arg4);
 1505              		.loc 1 23 55 is_stmt 0
 1506              	# 23 "src/Interrupt.cpp" 1
 1507              		ld a4,112(s0)
 1508              	# 0 "" 2
 1509              	.LVL94:
  24:src/Interrupt.cpp ****         w_scausei(sscause);
 1510              		.loc 1 24 9 is_stmt 1
  24:src/Interrupt.cpp ****         w_scausei(sscause);
 1511              		.loc 1 24 16 is_stmt 0
 1512              	#NO_APP
 1513 0638 97000000 		call	_ZN9Interrupt7callSysEmmmmm
 1513      E7800000 
 1514              	.LVL95:
  25:src/Interrupt.cpp ****         w_sepci(sepc);
 1515              		.loc 1 25 9 is_stmt 1
 1516              	.LBB327:
 1517              	.LBB328:
 305:src/Interrupt.cpp **** 
 1518              		.loc 1 305 5
 305:src/Interrupt.cpp **** 
 1519              		.loc 1 305 70 is_stmt 0
 1520              	#APP
 1521              	# 305 "src/Interrupt.cpp" 1
 1522              		csrw scause,s2
 1523              	# 0 "" 2
 1524              	.LVL96:
 1525              	#NO_APP
 1526              	.LBE328:
 1527              	.LBE327:
  26:src/Interrupt.cpp **** 
 1528              		.loc 1 26 9 is_stmt 1
 1529              	.LBB329:
 1530              	.LBB330:
 314:src/Interrupt.cpp **** 
 1531              		.loc 1 314 5
 314:src/Interrupt.cpp **** 
 1532              		.loc 1 314 62 is_stmt 0
GAS LISTING /tmp/ccCs0PLf.s 			page 38


 1533              	#APP
 1534              	# 314 "src/Interrupt.cpp" 1
 316:src/Interrupt.cpp **** 
 1535              		csrw sepc,s1
 1536              	# 0 "" 2
 1537              		.loc 1 316 1
 1538              	#NO_APP
 1539 0648 6FF09FFB 		j	.L68
 1540              	.LVL97:
 1541              	.L82:
 1542              	.LBE330:
 1543              	.LBE329:
 1544              	.LBE322:
 1545              	.LBB331:
 1546              	.LBB304:
  32:src/Interrupt.cpp ****         if((sie & 2) == 0){
 1547              		.loc 1 32 9 is_stmt 1
 1548              	.LBB305:
 1549              	.LBB306:
 327:src/Interrupt.cpp **** }
 328:src/Interrupt.cpp **** 
 329:src/Interrupt.cpp **** void Interrupt::us_status(uint64 mask) {
 330:src/Interrupt.cpp ****     uint64 stat = r_statusi();
 331:src/Interrupt.cpp ****     stat= ~stat;
 332:src/Interrupt.cpp ****     stat|=mask;
 333:src/Interrupt.cpp ****     w_statusi(stat);
 334:src/Interrupt.cpp **** }
 335:src/Interrupt.cpp **** 
 336:src/Interrupt.cpp **** 
 337:src/Interrupt.cpp **** 
 338:src/Interrupt.cpp **** void Interrupt::popSppSpie() {
 339:src/Interrupt.cpp ****     __asm__ volatile("csrw sepc,ra");
 340:src/Interrupt.cpp ****     __asm__ volatile("sret");
 341:src/Interrupt.cpp **** }
 342:src/Interrupt.cpp **** 
 343:src/Interrupt.cpp **** void Interrupt::lock() {
 344:src/Interrupt.cpp ****     if(lock_var++ == 0){
 345:src/Interrupt.cpp ****         prevSstatus = r_status();
 346:src/Interrupt.cpp ****         mc_status(SSTATUS_SIE);
 347:src/Interrupt.cpp ****     }
 348:src/Interrupt.cpp **** }
 349:src/Interrupt.cpp **** 
 350:src/Interrupt.cpp **** void Interrupt::unlock() {
 351:src/Interrupt.cpp ****     if(--lock_var == 0){
 352:src/Interrupt.cpp ****             ms_status(prevSstatus&SSTATUS_SIE?SSTATUS_SIE:0);
 353:src/Interrupt.cpp **** //        ms_status(2);
 354:src/Interrupt.cpp **** //        ms_status(0b1000000000);
 355:src/Interrupt.cpp ****     }
 356:src/Interrupt.cpp **** }
 357:src/Interrupt.cpp **** 
 358:src/Interrupt.cpp **** void Interrupt::disable_sintr() {
 359:src/Interrupt.cpp ****         mc_status(SSTATUS_SIE);
 360:src/Interrupt.cpp **** }
 361:src/Interrupt.cpp **** 
 362:src/Interrupt.cpp **** void Interrupt::enable_sintr() {
 363:src/Interrupt.cpp ****     ms_status(SSTATUS_SIE);
 364:src/Interrupt.cpp **** }
GAS LISTING /tmp/ccCs0PLf.s 			page 39


 365:src/Interrupt.cpp **** 
 366:src/Interrupt.cpp **** inline void Interrupt::mc_sip(uint64 mask) {
 367:src/Interrupt.cpp ****     __asm__ volatile("csrc sip, %[mask]" : : [mask]"r"(mask));
 368:src/Interrupt.cpp **** }
 369:src/Interrupt.cpp **** 
 370:src/Interrupt.cpp ****  void Interrupt::userMaskSoft(){
 371:src/Interrupt.cpp ****     uint64 mask = 2;
 372:src/Interrupt.cpp ****     __asm__ volatile("csrc sie, %[mask]" : : [mask]"r"(mask));
 373:src/Interrupt.cpp **** }
 374:src/Interrupt.cpp ****  void Interrupt::userMaskHard(){
 375:src/Interrupt.cpp ****     uint64 mask = 512;
 376:src/Interrupt.cpp ****     __asm__ volatile("csrc sie, %[mask]" : : [mask]"r"(mask));
 377:src/Interrupt.cpp **** }
 378:src/Interrupt.cpp ****  void Interrupt::userUnmaskSoft(){
 379:src/Interrupt.cpp ****     uint64 mask = 2;
 380:src/Interrupt.cpp ****     __asm__ volatile("csrs sie, %[mask]" : : [mask]"r"(mask));
 381:src/Interrupt.cpp **** }
 382:src/Interrupt.cpp **** void Interrupt::userUnmaskHard(){
 383:src/Interrupt.cpp ****     uint64 mask = 512;
 384:src/Interrupt.cpp ****     __asm__ volatile("csrs sie, %[mask]" : : [mask]"r"(mask));
 385:src/Interrupt.cpp **** }
 386:src/Interrupt.cpp **** 
 387:src/Interrupt.cpp **** void Interrupt::switchToSystemStack() {
 388:src/Interrupt.cpp ****     if(PCB::running != nullptr && enableSystemStack)
 389:src/Interrupt.cpp ****     {
 390:src/Interrupt.cpp ****         uint64 sp, ssp = PCB::running->getSSP();
 391:src/Interrupt.cpp ****         __asm__ volatile("mv %[sp],sp" :  [sp]"=r"(sp));
 392:src/Interrupt.cpp ****         PCB::running->setSP(sp);
 393:src/Interrupt.cpp ****         __asm__ volatile("mv sp, %[ssp]" : : [ssp]"r"(ssp));
 394:src/Interrupt.cpp ****     }
 395:src/Interrupt.cpp **** 
 396:src/Interrupt.cpp **** }
 397:src/Interrupt.cpp **** 
 398:src/Interrupt.cpp **** void Interrupt::switchToUserStack() {
 399:src/Interrupt.cpp ****     if(PCB::running != nullptr && enableSystemStack)
 400:src/Interrupt.cpp ****     {
 401:src/Interrupt.cpp ****         uint64 sp = PCB::running->getSP();
 402:src/Interrupt.cpp ****         uint64 ssp;
 403:src/Interrupt.cpp ****         __asm__ volatile("mv %[ssp] , sp" : [ssp]"=r"(ssp));
 404:src/Interrupt.cpp ****         PCB::running->setSSP(ssp);
 405:src/Interrupt.cpp ****         __asm__ volatile("mv sp, %[sp]" : : [sp]"r"(sp));
 406:src/Interrupt.cpp ****     }
 407:src/Interrupt.cpp **** }
 408:src/Interrupt.cpp **** 
 409:src/Interrupt.cpp **** inline uint64 Interrupt::r_siei() {
 410:src/Interrupt.cpp ****     uint64 sie;
 1550              		.loc 1 410 5
 411:src/Interrupt.cpp ****     __asm__ volatile ("csrr %[sie],sie":  [sie]"=r"(sie));
 1551              		.loc 1 411 5
 1552              		.loc 1 411 58 is_stmt 0
 1553              	#APP
 1554              	# 411 "src/Interrupt.cpp" 1
 412              	    return sie;
 1555              		csrr a5,sie
 1556              	# 0 "" 2
 1557              	.LVL98:
 1558              		.loc 1 412 5 is_stmt 1
GAS LISTING /tmp/ccCs0PLf.s 			page 40


 1559              	#NO_APP
 1560              	.LBE306:
 1561              	.LBE305:
  33:src/Interrupt.cpp ****             mc_sip(SIP_SSIP);
 1562              		.loc 1 33 9
  33:src/Interrupt.cpp ****             mc_sip(SIP_SSIP);
 1563              		.loc 1 33 17 is_stmt 0
 1564 0650 93F72700 		andi	a5,a5,2
 1565              	.LVL99:
  33:src/Interrupt.cpp ****             mc_sip(SIP_SSIP);
 1566              		.loc 1 33 9
 1567 0654 63980700 		bnez	a5,.L72
  34:src/Interrupt.cpp ****             return;
 1568              		.loc 1 34 13 is_stmt 1
 1569              	.LVL100:
 1570              	.LBB307:
 1571              	.LBB308:
 367:src/Interrupt.cpp **** }
 1572              		.loc 1 367 5
 367:src/Interrupt.cpp **** }
 1573              		.loc 1 367 62 is_stmt 0
 1574 0658 93072000 		li	a5,2
 1575              	#APP
 1576              	# 367 "src/Interrupt.cpp" 1
 1577              		csrc sip, a5
 1578              	# 0 "" 2
 1579              	.LVL101:
 1580              	#NO_APP
 1581              	.LBE308:
 1582              	.LBE307:
  35:src/Interrupt.cpp ****         }
 1583              		.loc 1 35 13 is_stmt 1
 1584 0660 6FF01FFA 		j	.L68
 1585              	.L72:
  37:src/Interrupt.cpp ****         while (PCB::sleeping_list->getTimeLeft() == 0){
 1586              		.loc 1 37 9
  37:src/Interrupt.cpp ****         while (PCB::sleeping_list->getTimeLeft() == 0){
 1587              		.loc 1 37 36 is_stmt 0
 1588 0664 97070000 		la	a5,_ZN3PCB13sleeping_listE
 1588      83B70700 
 1589 066c 03B50700 		ld	a0,0(a5)
 1590 0670 97000000 		call	_ZN8PCB_List7decTimeEv@plt
 1590      E7800000 
 1591              	.LVL102:
 1592 0678 6F000002 		j	.L73
 1593              	.LVL103:
 1594              	.L75:
 1595              	.LBB309:
  44:src/Interrupt.cpp ****                 Scheduler::put(pcb);
 1596              		.loc 1 44 17 is_stmt 1
  44:src/Interrupt.cpp ****                 Scheduler::put(pcb);
 1597              		.loc 1 44 33 is_stmt 0
 1598 067c 93050000 		li	a1,0
 1599 0680 13850400 		mv	a0,s1
 1600 0684 97000000 		call	_ZN3PCB11setSleepingEb@plt
 1600      E7800000 
 1601              	.LVL104:
GAS LISTING /tmp/ccCs0PLf.s 			page 41


  45:src/Interrupt.cpp ****             }
 1602              		.loc 1 45 17 is_stmt 1
  45:src/Interrupt.cpp ****             }
 1603              		.loc 1 45 31 is_stmt 0
 1604 068c 13850400 		mv	a0,s1
 1605 0690 97000000 		call	_ZN9Scheduler3putEP3PCB@plt
 1605      E7800000 
 1606              	.LVL105:
 1607              	.L73:
 1608              	.LBE309:
  38:src/Interrupt.cpp ****             PCB* pcb = PCB::sleeping_list->get();
 1609              		.loc 1 38 9 is_stmt 1
  38:src/Interrupt.cpp ****             PCB* pcb = PCB::sleeping_list->get();
 1610              		.loc 1 38 50
  38:src/Interrupt.cpp ****             PCB* pcb = PCB::sleeping_list->get();
 1611              		.loc 1 38 47 is_stmt 0
 1612 0698 97070000 		la	a5,_ZN3PCB13sleeping_listE
 1612      83B70700 
 1613 06a0 03B50700 		ld	a0,0(a5)
 1614 06a4 97000000 		call	_ZN8PCB_List11getTimeLeftEv@plt
 1614      E7800000 
 1615              	.LVL106:
  38:src/Interrupt.cpp ****             PCB* pcb = PCB::sleeping_list->get();
 1616              		.loc 1 38 50
 1617 06ac 631A0504 		bnez	a0,.L74
 1618              	.LBB310:
  39:src/Interrupt.cpp ****             if(pcb->isPeriodic && PCB::isPeriodicBlocked){
 1619              		.loc 1 39 13 is_stmt 1
  39:src/Interrupt.cpp ****             if(pcb->isPeriodic && PCB::isPeriodicBlocked){
 1620              		.loc 1 39 47 is_stmt 0
 1621 06b0 97070000 		la	a5,_ZN3PCB13sleeping_listE
 1621      83B70700 
 1622 06b8 03B50700 		ld	a0,0(a5)
 1623 06bc 97000000 		call	_ZN8PCB_List3getEv@plt
 1623      E7800000 
 1624              	.LVL107:
 1625 06c4 93040500 		mv	s1,a0
 1626              	.LVL108:
  40:src/Interrupt.cpp ****                 PCB::sleeping_list->putTime(pcb,1);
 1627              		.loc 1 40 13 is_stmt 1
  40:src/Interrupt.cpp ****                 PCB::sleeping_list->putTime(pcb,1);
 1628              		.loc 1 40 21 is_stmt 0
 1629 06c8 83471500 		lbu	a5,1(a0)
  40:src/Interrupt.cpp ****                 PCB::sleeping_list->putTime(pcb,1);
 1630              		.loc 1 40 13
 1631 06cc E38807FA 		beqz	a5,.L75
  40:src/Interrupt.cpp ****                 PCB::sleeping_list->putTime(pcb,1);
 1632              		.loc 1 40 32 discriminator 1
 1633 06d0 97070000 		la	a5,_ZN3PCB17isPeriodicBlockedE
 1633      83B70700 
 1634 06d8 83C70700 		lbu	a5,0(a5)
 1635 06dc E38007FA 		beqz	a5,.L75
  41:src/Interrupt.cpp ****             }
 1636              		.loc 1 41 17 is_stmt 1
  41:src/Interrupt.cpp ****             }
 1637              		.loc 1 41 44 is_stmt 0
 1638 06e0 13061000 		li	a2,1
GAS LISTING /tmp/ccCs0PLf.s 			page 42


 1639 06e4 93050500 		mv	a1,a0
 1640 06e8 97070000 		la	a5,_ZN3PCB13sleeping_listE
 1640      83B70700 
 1641 06f0 03B50700 		ld	a0,0(a5)
 1642 06f4 97000000 		call	_ZN8PCB_List7putTimeEP3PCBm@plt
 1642      E7800000 
 1643              	.LVL109:
 1644 06fc 6FF0DFF9 		j	.L73
 1645              	.LVL110:
 1646              	.L74:
 1647              	.LBE310:
  49:src/Interrupt.cpp ****         if(PCB::timeLeft >= PCB::running->getTimeSlice()){
 1648              		.loc 1 49 9 is_stmt 1
  49:src/Interrupt.cpp ****         if(PCB::timeLeft >= PCB::running->getTimeSlice()){
 1649              		.loc 1 49 22 is_stmt 0
 1650 0700 97040000 		la	s1,_ZN3PCB8timeLeftE
 1650      83B40400 
 1651 0708 83B70400 		ld	a5,0(s1)
 1652 070c 93871700 		addi	a5,a5,1
 1653 0710 23B0F400 		sd	a5,0(s1)
  50:src/Interrupt.cpp ****           uint64 sepc = r_sepc();
 1654              		.loc 1 50 9 is_stmt 1
 1655              	.LBB311:
  50:src/Interrupt.cpp ****           uint64 sepc = r_sepc();
 1656              		.loc 1 50 55 is_stmt 0
 1657 0714 97070000 		la	a5,_ZN3PCB7runningE
 1657      83B70700 
 1658 071c 03B50700 		ld	a0,0(a5)
 1659 0720 97000000 		call	_ZNK3PCB12getTimeSliceEv@plt
 1659      E7800000 
 1660              	.LVL111:
  50:src/Interrupt.cpp ****           uint64 sepc = r_sepc();
 1661              		.loc 1 50 26
 1662 0728 83B70400 		ld	a5,0(s1)
  50:src/Interrupt.cpp ****           uint64 sepc = r_sepc();
 1663              		.loc 1 50 9
 1664 072c 63F8A700 		bgeu	a5,a0,.L84
 1665              	.L77:
 1666              	.LBE311:
  58:src/Interrupt.cpp ****     }
 1667              		.loc 1 58 12 is_stmt 1
 1668              	.LVL112:
 1669              	.LBB317:
 1670              	.LBB318:
 367:src/Interrupt.cpp **** }
 1671              		.loc 1 367 5
 367:src/Interrupt.cpp **** }
 1672              		.loc 1 367 62 is_stmt 0
 1673 0730 93072000 		li	a5,2
 1674              	#APP
 1675              	# 367 "src/Interrupt.cpp" 1
 368:src/Interrupt.cpp **** 
 1676              		csrc sip, a5
 1677              	# 0 "" 2
 1678              		.loc 1 368 1
 1679              	#NO_APP
 1680 0738 6FF09FEC 		j	.L68
GAS LISTING /tmp/ccCs0PLf.s 			page 43


 1681              	.LVL113:
 1682              	.L84:
 1683              	.LBE318:
 1684              	.LBE317:
 1685              	.LBB319:
 1686              	.LBB312:
  51:src/Interrupt.cpp ****           uint64 sscause = r_scausei();
 1687              		.loc 1 51 11 is_stmt 1
  51:src/Interrupt.cpp ****           uint64 sscause = r_scausei();
 1688              		.loc 1 51 31 is_stmt 0
 1689 073c 97000000 		call	_ZN9Interrupt6r_sepcEv
 1689      E7800000 
 1690              	.LVL114:
 1691 0744 93040500 		mv	s1,a0
 1692              	.LVL115:
  52:src/Interrupt.cpp ****           PCB::timeLeft = 0;
 1693              		.loc 1 52 11 is_stmt 1
 1694              	.LBB313:
 1695              	.LBB314:
 296:src/Interrupt.cpp ****     __asm__ volatile ("csrr %[scause],scause":  [scause]"=r"(scause));
 1696              		.loc 1 296 5
 297:src/Interrupt.cpp ****     return scause;
 1697              		.loc 1 297 5
 297:src/Interrupt.cpp ****     return scause;
 1698              		.loc 1 297 70 is_stmt 0
 1699              	#APP
 1700              	# 297 "src/Interrupt.cpp" 1
 1701              		csrr s2,scause
 1702              	# 0 "" 2
 1703              	.LVL116:
 298:src/Interrupt.cpp **** }
 1704              		.loc 1 298 5 is_stmt 1
 1705              	#NO_APP
 1706              	.LBE314:
 1707              	.LBE313:
  53:src/Interrupt.cpp ****           PCB::dispatch();
 1708              		.loc 1 53 11
  53:src/Interrupt.cpp ****           PCB::dispatch();
 1709              		.loc 1 53 25 is_stmt 0
 1710 074c 97070000 		la	a5,_ZN3PCB8timeLeftE
 1710      83B70700 
 1711 0754 23B00700 		sd	zero,0(a5)
  54:src/Interrupt.cpp ****           w_scausei(sscause);
 1712              		.loc 1 54 11 is_stmt 1
  54:src/Interrupt.cpp ****           w_scausei(sscause);
 1713              		.loc 1 54 24 is_stmt 0
 1714 0758 97000000 		call	_ZN3PCB8dispatchEv@plt
 1714      E7800000 
 1715              	.LVL117:
  55:src/Interrupt.cpp ****          w_sepc(sepc);
 1716              		.loc 1 55 11 is_stmt 1
 1717              	.LBB315:
 1718              	.LBB316:
 305:src/Interrupt.cpp **** 
 1719              		.loc 1 305 5
 305:src/Interrupt.cpp **** 
 1720              		.loc 1 305 70 is_stmt 0
GAS LISTING /tmp/ccCs0PLf.s 			page 44


 1721              	#APP
 1722              	# 305 "src/Interrupt.cpp" 1
 1723              		csrw scause,s2
 1724              	# 0 "" 2
 1725              	.LVL118:
 1726              	#NO_APP
 1727              	.LBE316:
 1728              	.LBE315:
  56:src/Interrupt.cpp ****         }
 1729              		.loc 1 56 10 is_stmt 1
  56:src/Interrupt.cpp ****         }
 1730              		.loc 1 56 16 is_stmt 0
 1731 0764 13850400 		mv	a0,s1
 1732 0768 97000000 		call	_ZN9Interrupt6w_sepcEm
 1732      E7800000 
 1733              	.LVL119:
 1734              	.LBE312:
 1735 0770 6FF01FFC 		j	.L77
 1736              	.LVL120:
 1737              	.L83:
 1738              	.LBE319:
 1739              	.LBE304:
 1740              	.LBB320:
 1741              	.LBB298:
  61:src/Interrupt.cpp ****         if(irq == CONSOLE_IRQ){
 1742              		.loc 1 61 9 is_stmt 1
  61:src/Interrupt.cpp ****         if(irq == CONSOLE_IRQ){
 1743              		.loc 1 61 29 is_stmt 0
 1744 0774 97000000 		call	plic_claim@plt
 1744      E7800000 
 1745              	.LVL121:
 1746 077c 93040500 		mv	s1,a0
 1747              	.LVL122:
  62:src/Interrupt.cpp ****             volatile char status = *((char *)CONSOLE_STATUS);
 1748              		.loc 1 62 9 is_stmt 1
 1749              	.LBB299:
 1750 0780 9307A000 		li	a5,10
 1751 0784 630AF500 		beq	a0,a5,.L85
 1752              	.LVL123:
 1753              	.L78:
 1754              	.LBE299:
  70:src/Interrupt.cpp ****     }
 1755              		.loc 1 70 9
  70:src/Interrupt.cpp ****     }
 1756              		.loc 1 70 22 is_stmt 0
 1757 0788 13850400 		mv	a0,s1
 1758 078c 97000000 		call	plic_complete@plt
 1758      E7800000 
 1759              	.LVL124:
 1760              	.LBE298:
 1761 0794 6FF0DFE6 		j	.L68
 1762              	.LVL125:
 1763              	.L85:
 1764              	.LBB303:
 1765              	.LBB302:
 1766              	.LBB300:
  63:src/Interrupt.cpp ****             while (status & CONSOLE_RX_STATUS_BIT){
GAS LISTING /tmp/ccCs0PLf.s 			page 45


 1767              		.loc 1 63 13 is_stmt 1
  63:src/Interrupt.cpp ****             while (status & CONSOLE_RX_STATUS_BIT){
 1768              		.loc 1 63 36 is_stmt 0
 1769 0798 97070000 		la	a5,CONSOLE_STATUS
 1769      83B70700 
 1770 07a0 03B90700 		ld	s2,0(a5)
 1771 07a4 83470900 		lbu	a5,0(s2)
  63:src/Interrupt.cpp ****             while (status & CONSOLE_RX_STATUS_BIT){
 1772              		.loc 1 63 27
 1773 07a8 A30FF4FC 		sb	a5,-33(s0)
 1774              	.LVL126:
 1775              	.L79:
  64:src/Interrupt.cpp ****                 char c = (*(char *) CONSOLE_RX_DATA);
 1776              		.loc 1 64 13 is_stmt 1
  64:src/Interrupt.cpp ****                 char c = (*(char *) CONSOLE_RX_DATA);
 1777              		.loc 1 64 29
  64:src/Interrupt.cpp ****                 char c = (*(char *) CONSOLE_RX_DATA);
 1778              		.loc 1 64 20 is_stmt 0
 1779 07ac 8347F4FD 		lbu	a5,-33(s0)
  64:src/Interrupt.cpp ****                 char c = (*(char *) CONSOLE_RX_DATA);
 1780              		.loc 1 64 29
 1781 07b0 93F71700 		andi	a5,a5,1
 1782 07b4 E38A07FC 		beqz	a5,.L78
 1783              	.LBB301:
  65:src/Interrupt.cpp ****                 Cons::inputBuffer->put(c);
 1784              		.loc 1 65 17 is_stmt 1
  65:src/Interrupt.cpp ****                 Cons::inputBuffer->put(c);
 1785              		.loc 1 65 27 is_stmt 0
 1786 07b8 97070000 		la	a5,CONSOLE_RX_DATA
 1786      83B70700 
 1787 07c0 83B70700 		ld	a5,0(a5)
 1788              	.LVL127:
  66:src/Interrupt.cpp ****                 status = *((char *)CONSOLE_STATUS);
 1789              		.loc 1 66 17 is_stmt 1
  66:src/Interrupt.cpp ****                 status = *((char *)CONSOLE_STATUS);
 1790              		.loc 1 66 39 is_stmt 0
 1791 07c4 83C50700 		lbu	a1,0(a5)
 1792 07c8 97070000 		la	a5,_ZN4Cons11inputBufferE
 1792      83B70700 
 1793              	.LVL128:
 1794 07d0 03B50700 		ld	a0,0(a5)
 1795 07d4 97000000 		call	_ZN10CharBuffer3putEc@plt
 1795      E7800000 
 1796              	.LVL129:
  67:src/Interrupt.cpp ****             }
 1797              		.loc 1 67 17 is_stmt 1
  67:src/Interrupt.cpp ****             }
 1798              		.loc 1 67 26 is_stmt 0
 1799 07dc 83470900 		lbu	a5,0(s2)
  67:src/Interrupt.cpp ****             }
 1800              		.loc 1 67 24
 1801 07e0 A30FF4FC 		sb	a5,-33(s0)
 1802              	.LBE301:
  64:src/Interrupt.cpp ****                 char c = (*(char *) CONSOLE_RX_DATA);
 1803              		.loc 1 64 13
 1804 07e4 6FF09FFC 		j	.L79
 1805              	.LBE300:
GAS LISTING /tmp/ccCs0PLf.s 			page 46


 1806              	.LBE302:
 1807              	.LBE303:
 1808              	.LBE320:
 1809              	.LBE331:
 1810              	.LBE334:
 1811              		.cfi_endproc
 1812              	.LFE10:
 1814              		.align	2
 1815              		.globl	_ZN9Interrupt9us_statusEm
 1817              	_ZN9Interrupt9us_statusEm:
 1818              	.LFB30:
 329:src/Interrupt.cpp ****     uint64 stat = r_statusi();
 1819              		.loc 1 329 40 is_stmt 1
 1820              		.cfi_startproc
 1821              	.LVL130:
 1822 07e8 130101FF 		addi	sp,sp,-16
 1823              		.cfi_def_cfa_offset 16
 1824 07ec 23348100 		sd	s0,8(sp)
 1825              		.cfi_offset 8, -8
 1826 07f0 13040101 		addi	s0,sp,16
 1827              		.cfi_def_cfa 8, 0
 330:src/Interrupt.cpp ****     stat= ~stat;
 1828              		.loc 1 330 5
 1829              	.LBB335:
 1830              	.LBB336:
 257:src/Interrupt.cpp ****     __asm__ volatile ("csrr %[sstatus],sstatus":  [sstatus]"=r"(sstatus));
 1831              		.loc 1 257 5
 258:src/Interrupt.cpp ****     return sstatus;
 1832              		.loc 1 258 5
 258:src/Interrupt.cpp ****     return sstatus;
 1833              		.loc 1 258 74 is_stmt 0
 1834              	#APP
 1835              	# 258 "src/Interrupt.cpp" 1
 1836              		csrr a5,sstatus
 1837              	# 0 "" 2
 1838              	.LVL131:
 259:src/Interrupt.cpp **** }
 1839              		.loc 1 259 5 is_stmt 1
 1840              	#NO_APP
 1841              	.LBE336:
 1842              	.LBE335:
 331:src/Interrupt.cpp ****     stat|=mask;
 1843              		.loc 1 331 5
 331:src/Interrupt.cpp ****     stat|=mask;
 1844              		.loc 1 331 9 is_stmt 0
 1845 07f8 93C7F7FF 		not	a5,a5
 1846              	.LVL132:
 332:src/Interrupt.cpp ****     w_statusi(stat);
 1847              		.loc 1 332 5 is_stmt 1
 332:src/Interrupt.cpp ****     w_statusi(stat);
 1848              		.loc 1 332 9 is_stmt 0
 1849 07fc 33E5A700 		or	a0,a5,a0
 1850              	.LVL133:
 333:src/Interrupt.cpp **** }
 1851              		.loc 1 333 5 is_stmt 1
 1852              	.LBB337:
 1853              	.LBB338:
GAS LISTING /tmp/ccCs0PLf.s 			page 47


 269:src/Interrupt.cpp **** 
 1854              		.loc 1 269 5
 269:src/Interrupt.cpp **** 
 1855              		.loc 1 269 74 is_stmt 0
 1856              	#APP
 1857              	# 269 "src/Interrupt.cpp" 1
 1858              		csrw sstatus,a0
 1859              	# 0 "" 2
 1860              	.LVL134:
 1861              	#NO_APP
 1862              	.LBE338:
 1863              	.LBE337:
 334:src/Interrupt.cpp **** 
 1864              		.loc 1 334 1
 1865 0804 03348100 		ld	s0,8(sp)
 1866              		.cfi_restore 8
 1867              		.cfi_def_cfa 2, 16
 1868 0808 13010101 		addi	sp,sp,16
 1869              		.cfi_def_cfa_offset 0
 1870 080c 67800000 		jr	ra
 1871              		.cfi_endproc
 1872              	.LFE30:
 1874              		.align	2
 1875              		.globl	_ZN9Interrupt10popSppSpieEv
 1877              	_ZN9Interrupt10popSppSpieEv:
 1878              	.LFB31:
 338:src/Interrupt.cpp ****     __asm__ volatile("csrw sepc,ra");
 1879              		.loc 1 338 30 is_stmt 1
 1880              		.cfi_startproc
 1881 0810 130101FF 		addi	sp,sp,-16
 1882              		.cfi_def_cfa_offset 16
 1883 0814 23348100 		sd	s0,8(sp)
 1884              		.cfi_offset 8, -8
 1885 0818 13040101 		addi	s0,sp,16
 1886              		.cfi_def_cfa 8, 0
 339:src/Interrupt.cpp ****     __asm__ volatile("sret");
 1887              		.loc 1 339 5
 339:src/Interrupt.cpp ****     __asm__ volatile("sret");
 1888              		.loc 1 339 37 is_stmt 0
 1889              	#APP
 1890              	# 339 "src/Interrupt.cpp" 1
 340:src/Interrupt.cpp **** }
 1891              		csrw sepc,ra
 1892              	# 0 "" 2
 1893              		.loc 1 340 5 is_stmt 1
 340:src/Interrupt.cpp **** }
 1894              		.loc 1 340 29 is_stmt 0
 1895              	# 340 "src/Interrupt.cpp" 1
 341:src/Interrupt.cpp **** 
 1896              		sret
 1897              	# 0 "" 2
 1898              		.loc 1 341 1
 1899              	#NO_APP
 1900 0824 03348100 		ld	s0,8(sp)
 1901              		.cfi_restore 8
 1902              		.cfi_def_cfa 2, 16
 1903 0828 13010101 		addi	sp,sp,16
GAS LISTING /tmp/ccCs0PLf.s 			page 48


 1904              		.cfi_def_cfa_offset 0
 1905 082c 67800000 		jr	ra
 1906              		.cfi_endproc
 1907              	.LFE31:
 1909              		.align	2
 1910              		.globl	_ZN9Interrupt4lockEv
 1912              	_ZN9Interrupt4lockEv:
 1913              	.LFB32:
 343:src/Interrupt.cpp ****     if(lock_var++ == 0){
 1914              		.loc 1 343 24 is_stmt 1
 1915              		.cfi_startproc
 344:src/Interrupt.cpp ****         prevSstatus = r_status();
 1916              		.loc 1 344 5
 344:src/Interrupt.cpp ****         prevSstatus = r_status();
 1917              		.loc 1 344 16 is_stmt 0
 1918 0830 17070000 		lla	a4,.LANCHOR0
 1918      13070700 
 1919 0838 83270700 		lw	a5,0(a4)
 1920 083c 9B861700 		addiw	a3,a5,1
 1921 0840 2320D700 		sw	a3,0(a4)
 344:src/Interrupt.cpp ****         prevSstatus = r_status();
 1922              		.loc 1 344 5
 1923 0844 63840700 		beqz	a5,.L96
 1924 0848 67800000 		ret
 1925              	.L96:
 343:src/Interrupt.cpp ****     if(lock_var++ == 0){
 1926              		.loc 1 343 24
 1927 084c 130101FF 		addi	sp,sp,-16
 1928              		.cfi_def_cfa_offset 16
 1929 0850 23341100 		sd	ra,8(sp)
 1930 0854 23308100 		sd	s0,0(sp)
 1931              		.cfi_offset 1, -8
 1932              		.cfi_offset 8, -16
 1933 0858 13040101 		addi	s0,sp,16
 1934              		.cfi_def_cfa 8, 0
 345:src/Interrupt.cpp ****         mc_status(SSTATUS_SIE);
 1935              		.loc 1 345 9 is_stmt 1
 345:src/Interrupt.cpp ****         mc_status(SSTATUS_SIE);
 1936              		.loc 1 345 31 is_stmt 0
 1937 085c 97000000 		call	_ZN9Interrupt8r_statusEv
 1937      E7800000 
 1938              	.LVL135:
 345:src/Interrupt.cpp ****         mc_status(SSTATUS_SIE);
 1939              		.loc 1 345 21
 1940 0864 97070000 		sd	a0,.LANCHOR0+8,a5
 1940      23B0A700 
 346:src/Interrupt.cpp ****     }
 1941              		.loc 1 346 9 is_stmt 1
 1942              	.LVL136:
 1943              	.LBB339:
 1944              	.LBB340:
 249:src/Interrupt.cpp **** }
 1945              		.loc 1 249 5
 249:src/Interrupt.cpp **** }
 1946              		.loc 1 249 66 is_stmt 0
 1947 086c 93072000 		li	a5,2
 1948              	#APP
GAS LISTING /tmp/ccCs0PLf.s 			page 49


 1949              	# 249 "src/Interrupt.cpp" 1
 1950              		csrc sstatus, a5
 1951              	# 0 "" 2
 1952              	.LVL137:
 1953              	#NO_APP
 1954              	.LBE340:
 1955              	.LBE339:
 348:src/Interrupt.cpp **** 
 1956              		.loc 1 348 1
 1957 0874 83308100 		ld	ra,8(sp)
 1958              		.cfi_restore 1
 1959 0878 03340100 		ld	s0,0(sp)
 1960              		.cfi_restore 8
 1961              		.cfi_def_cfa 2, 16
 1962 087c 13010101 		addi	sp,sp,16
 1963              		.cfi_def_cfa_offset 0
 1964 0880 67800000 		jr	ra
 1965              		.cfi_endproc
 1966              	.LFE32:
 1968              		.align	2
 1969              		.globl	_ZN9Interrupt6unlockEv
 1971              	_ZN9Interrupt6unlockEv:
 1972              	.LFB33:
 350:src/Interrupt.cpp ****     if(--lock_var == 0){
 1973              		.loc 1 350 26 is_stmt 1
 1974              		.cfi_startproc
 1975 0884 130101FF 		addi	sp,sp,-16
 1976              		.cfi_def_cfa_offset 16
 1977 0888 23348100 		sd	s0,8(sp)
 1978              		.cfi_offset 8, -8
 1979 088c 13040101 		addi	s0,sp,16
 1980              		.cfi_def_cfa 8, 0
 351:src/Interrupt.cpp ****             ms_status(prevSstatus&SSTATUS_SIE?SSTATUS_SIE:0);
 1981              		.loc 1 351 5
 351:src/Interrupt.cpp ****             ms_status(prevSstatus&SSTATUS_SIE?SSTATUS_SIE:0);
 1982              		.loc 1 351 8 is_stmt 0
 1983 0890 17070000 		lla	a4,.LANCHOR0
 1983      13070700 
 1984 0898 83270700 		lw	a5,0(a4)
 1985 089c 9B87F7FF 		addiw	a5,a5,-1
 1986 08a0 9B860700 		sext.w	a3,a5
 351:src/Interrupt.cpp ****             ms_status(prevSstatus&SSTATUS_SIE?SSTATUS_SIE:0);
 1987              		.loc 1 351 19
 1988 08a4 2320F700 		sw	a5,0(a4)
 351:src/Interrupt.cpp ****             ms_status(prevSstatus&SSTATUS_SIE?SSTATUS_SIE:0);
 1989              		.loc 1 351 5
 1990 08a8 639C0600 		bnez	a3,.L97
 352:src/Interrupt.cpp **** //        ms_status(2);
 1991              		.loc 1 352 13 is_stmt 1
 352:src/Interrupt.cpp **** //        ms_status(2);
 1992              		.loc 1 352 46 is_stmt 0
 1993 08ac 97070000 		lw	a5,.LANCHOR0+8
 1993      83A70700 
 352:src/Interrupt.cpp **** //        ms_status(2);
 1994              		.loc 1 352 22
 1995 08b4 93F72700 		andi	a5,a5,2
 1996 08b8 9B870700 		sext.w	a5,a5
GAS LISTING /tmp/ccCs0PLf.s 			page 50


 1997              	.LVL138:
 1998              	.LBB341:
 1999              	.LBB342:
 246:src/Interrupt.cpp **** }
 2000              		.loc 1 246 5 is_stmt 1
 246:src/Interrupt.cpp **** }
 2001              		.loc 1 246 66 is_stmt 0
 2002              	#APP
 2003              	# 246 "src/Interrupt.cpp" 1
 2004              		csrs sstatus, a5
 2005              	# 0 "" 2
 2006              	.LVL139:
 2007              	#NO_APP
 2008              	.L97:
 2009              	.LBE342:
 2010              	.LBE341:
 356:src/Interrupt.cpp **** 
 2011              		.loc 1 356 1
 2012 08c0 03348100 		ld	s0,8(sp)
 2013              		.cfi_restore 8
 2014              		.cfi_def_cfa 2, 16
 2015 08c4 13010101 		addi	sp,sp,16
 2016              		.cfi_def_cfa_offset 0
 2017 08c8 67800000 		jr	ra
 2018              		.cfi_endproc
 2019              	.LFE33:
 2021              		.align	2
 2022              		.globl	_ZN9Interrupt13disable_sintrEv
 2024              	_ZN9Interrupt13disable_sintrEv:
 2025              	.LFB34:
 358:src/Interrupt.cpp ****         mc_status(SSTATUS_SIE);
 2026              		.loc 1 358 33 is_stmt 1
 2027              		.cfi_startproc
 2028 08cc 130101FF 		addi	sp,sp,-16
 2029              		.cfi_def_cfa_offset 16
 2030 08d0 23348100 		sd	s0,8(sp)
 2031              		.cfi_offset 8, -8
 2032 08d4 13040101 		addi	s0,sp,16
 2033              		.cfi_def_cfa 8, 0
 359:src/Interrupt.cpp **** }
 2034              		.loc 1 359 9
 2035              	.LVL140:
 2036              	.LBB343:
 2037              	.LBB344:
 249:src/Interrupt.cpp **** }
 2038              		.loc 1 249 5
 249:src/Interrupt.cpp **** }
 2039              		.loc 1 249 66 is_stmt 0
 2040 08d8 93072000 		li	a5,2
 2041              	#APP
 2042              	# 249 "src/Interrupt.cpp" 1
 2043              		csrc sstatus, a5
 2044              	# 0 "" 2
 2045              	.LVL141:
 2046              	#NO_APP
 2047              	.LBE344:
 2048              	.LBE343:
GAS LISTING /tmp/ccCs0PLf.s 			page 51


 360:src/Interrupt.cpp **** 
 2049              		.loc 1 360 1
 2050 08e0 03348100 		ld	s0,8(sp)
 2051              		.cfi_restore 8
 2052              		.cfi_def_cfa 2, 16
 2053 08e4 13010101 		addi	sp,sp,16
 2054              		.cfi_def_cfa_offset 0
 2055 08e8 67800000 		jr	ra
 2056              		.cfi_endproc
 2057              	.LFE34:
 2059              		.align	2
 2060              		.globl	_ZN9Interrupt12enable_sintrEv
 2062              	_ZN9Interrupt12enable_sintrEv:
 2063              	.LFB35:
 362:src/Interrupt.cpp ****     ms_status(SSTATUS_SIE);
 2064              		.loc 1 362 32 is_stmt 1
 2065              		.cfi_startproc
 2066 08ec 130101FF 		addi	sp,sp,-16
 2067              		.cfi_def_cfa_offset 16
 2068 08f0 23348100 		sd	s0,8(sp)
 2069              		.cfi_offset 8, -8
 2070 08f4 13040101 		addi	s0,sp,16
 2071              		.cfi_def_cfa 8, 0
 363:src/Interrupt.cpp **** }
 2072              		.loc 1 363 5
 2073              	.LVL142:
 2074              	.LBB345:
 2075              	.LBB346:
 246:src/Interrupt.cpp **** }
 2076              		.loc 1 246 5
 246:src/Interrupt.cpp **** }
 2077              		.loc 1 246 66 is_stmt 0
 2078 08f8 93072000 		li	a5,2
 2079              	#APP
 2080              	# 246 "src/Interrupt.cpp" 1
 2081              		csrs sstatus, a5
 2082              	# 0 "" 2
 2083              	.LVL143:
 2084              	#NO_APP
 2085              	.LBE346:
 2086              	.LBE345:
 364:src/Interrupt.cpp **** 
 2087              		.loc 1 364 1
 2088 0900 03348100 		ld	s0,8(sp)
 2089              		.cfi_restore 8
 2090              		.cfi_def_cfa 2, 16
 2091 0904 13010101 		addi	sp,sp,16
 2092              		.cfi_def_cfa_offset 0
 2093 0908 67800000 		jr	ra
 2094              		.cfi_endproc
 2095              	.LFE35:
 2097              		.align	2
 2098              		.globl	_ZN9Interrupt12userMaskSoftEv
 2100              	_ZN9Interrupt12userMaskSoftEv:
 2101              	.LFB37:
 370:src/Interrupt.cpp ****     uint64 mask = 2;
 2102              		.loc 1 370 32 is_stmt 1
GAS LISTING /tmp/ccCs0PLf.s 			page 52


 2103              		.cfi_startproc
 2104 090c 130101FF 		addi	sp,sp,-16
 2105              		.cfi_def_cfa_offset 16
 2106 0910 23348100 		sd	s0,8(sp)
 2107              		.cfi_offset 8, -8
 2108 0914 13040101 		addi	s0,sp,16
 2109              		.cfi_def_cfa 8, 0
 371:src/Interrupt.cpp ****     __asm__ volatile("csrc sie, %[mask]" : : [mask]"r"(mask));
 2110              		.loc 1 371 5
 2111              	.LVL144:
 372:src/Interrupt.cpp **** }
 2112              		.loc 1 372 5
 372:src/Interrupt.cpp **** }
 2113              		.loc 1 372 62 is_stmt 0
 2114 0918 93072000 		li	a5,2
 2115              	#APP
 2116              	# 372 "src/Interrupt.cpp" 1
 373:src/Interrupt.cpp ****  void Interrupt::userMaskHard(){
 2117              		csrc sie, a5
 2118              	# 0 "" 2
 2119              		.loc 1 373 1
 2120              	#NO_APP
 2121 0920 03348100 		ld	s0,8(sp)
 2122              		.cfi_restore 8
 2123              		.cfi_def_cfa 2, 16
 2124 0924 13010101 		addi	sp,sp,16
 2125              		.cfi_def_cfa_offset 0
 2126 0928 67800000 		jr	ra
 2127              		.cfi_endproc
 2128              	.LFE37:
 2130              		.align	2
 2131              		.globl	_ZN9Interrupt12userMaskHardEv
 2133              	_ZN9Interrupt12userMaskHardEv:
 2134              	.LFB38:
 374:src/Interrupt.cpp ****     uint64 mask = 512;
 2135              		.loc 1 374 32 is_stmt 1
 2136              		.cfi_startproc
 2137 092c 130101FF 		addi	sp,sp,-16
 2138              		.cfi_def_cfa_offset 16
 2139 0930 23348100 		sd	s0,8(sp)
 2140              		.cfi_offset 8, -8
 2141 0934 13040101 		addi	s0,sp,16
 2142              		.cfi_def_cfa 8, 0
 375:src/Interrupt.cpp ****     __asm__ volatile("csrc sie, %[mask]" : : [mask]"r"(mask));
 2143              		.loc 1 375 5
 2144              	.LVL145:
 376:src/Interrupt.cpp **** }
 2145              		.loc 1 376 5
 376:src/Interrupt.cpp **** }
 2146              		.loc 1 376 62 is_stmt 0
 2147 0938 93070020 		li	a5,512
 2148              	#APP
 2149              	# 376 "src/Interrupt.cpp" 1
 377:src/Interrupt.cpp ****  void Interrupt::userUnmaskSoft(){
 2150              		csrc sie, a5
 2151              	# 0 "" 2
 2152              		.loc 1 377 1
GAS LISTING /tmp/ccCs0PLf.s 			page 53


 2153              	#NO_APP
 2154 0940 03348100 		ld	s0,8(sp)
 2155              		.cfi_restore 8
 2156              		.cfi_def_cfa 2, 16
 2157 0944 13010101 		addi	sp,sp,16
 2158              		.cfi_def_cfa_offset 0
 2159 0948 67800000 		jr	ra
 2160              		.cfi_endproc
 2161              	.LFE38:
 2163              		.align	2
 2164              		.globl	_ZN9Interrupt14userUnmaskSoftEv
 2166              	_ZN9Interrupt14userUnmaskSoftEv:
 2167              	.LFB39:
 378:src/Interrupt.cpp ****     uint64 mask = 2;
 2168              		.loc 1 378 34 is_stmt 1
 2169              		.cfi_startproc
 2170 094c 130101FF 		addi	sp,sp,-16
 2171              		.cfi_def_cfa_offset 16
 2172 0950 23348100 		sd	s0,8(sp)
 2173              		.cfi_offset 8, -8
 2174 0954 13040101 		addi	s0,sp,16
 2175              		.cfi_def_cfa 8, 0
 379:src/Interrupt.cpp ****     __asm__ volatile("csrs sie, %[mask]" : : [mask]"r"(mask));
 2176              		.loc 1 379 5
 2177              	.LVL146:
 380:src/Interrupt.cpp **** }
 2178              		.loc 1 380 5
 380:src/Interrupt.cpp **** }
 2179              		.loc 1 380 62 is_stmt 0
 2180 0958 93072000 		li	a5,2
 2181              	#APP
 2182              	# 380 "src/Interrupt.cpp" 1
 381:src/Interrupt.cpp **** void Interrupt::userUnmaskHard(){
 2183              		csrs sie, a5
 2184              	# 0 "" 2
 2185              		.loc 1 381 1
 2186              	#NO_APP
 2187 0960 03348100 		ld	s0,8(sp)
 2188              		.cfi_restore 8
 2189              		.cfi_def_cfa 2, 16
 2190 0964 13010101 		addi	sp,sp,16
 2191              		.cfi_def_cfa_offset 0
 2192 0968 67800000 		jr	ra
 2193              		.cfi_endproc
 2194              	.LFE39:
 2196              		.align	2
 2197              		.globl	_ZN9Interrupt14userUnmaskHardEv
 2199              	_ZN9Interrupt14userUnmaskHardEv:
 2200              	.LFB40:
 382:src/Interrupt.cpp ****     uint64 mask = 512;
 2201              		.loc 1 382 33 is_stmt 1
 2202              		.cfi_startproc
 2203 096c 130101FF 		addi	sp,sp,-16
 2204              		.cfi_def_cfa_offset 16
 2205 0970 23348100 		sd	s0,8(sp)
 2206              		.cfi_offset 8, -8
 2207 0974 13040101 		addi	s0,sp,16
GAS LISTING /tmp/ccCs0PLf.s 			page 54


 2208              		.cfi_def_cfa 8, 0
 383:src/Interrupt.cpp ****     __asm__ volatile("csrs sie, %[mask]" : : [mask]"r"(mask));
 2209              		.loc 1 383 5
 2210              	.LVL147:
 384:src/Interrupt.cpp **** }
 2211              		.loc 1 384 5
 384:src/Interrupt.cpp **** }
 2212              		.loc 1 384 62 is_stmt 0
 2213 0978 93070020 		li	a5,512
 2214              	#APP
 2215              	# 384 "src/Interrupt.cpp" 1
 385:src/Interrupt.cpp **** 
 2216              		csrs sie, a5
 2217              	# 0 "" 2
 2218              		.loc 1 385 1
 2219              	#NO_APP
 2220 0980 03348100 		ld	s0,8(sp)
 2221              		.cfi_restore 8
 2222              		.cfi_def_cfa 2, 16
 2223 0984 13010101 		addi	sp,sp,16
 2224              		.cfi_def_cfa_offset 0
 2225 0988 67800000 		jr	ra
 2226              		.cfi_endproc
 2227              	.LFE40:
 2229              		.align	2
 2230              		.globl	_ZN9Interrupt19switchToSystemStackEv
 2232              	_ZN9Interrupt19switchToSystemStackEv:
 2233              	.LFB41:
 387:src/Interrupt.cpp ****     if(PCB::running != nullptr && enableSystemStack)
 2234              		.loc 1 387 39 is_stmt 1
 2235              		.cfi_startproc
 388:src/Interrupt.cpp ****     {
 2236              		.loc 1 388 5
 2237              	.LBB347:
 388:src/Interrupt.cpp ****     {
 2238              		.loc 1 388 21 is_stmt 0
 2239 098c 97070000 		la	a5,_ZN3PCB7runningE
 2239      83B70700 
 2240 0994 03B50700 		ld	a0,0(a5)
 388:src/Interrupt.cpp ****     {
 2241              		.loc 1 388 5
 2242 0998 63080500 		beqz	a0,.L115
 388:src/Interrupt.cpp ****     {
 2243              		.loc 1 388 32 discriminator 1
 2244 099c 97070000 		lbu	a5,.LANCHOR1
 2244      83C70700 
 2245 09a4 63940700 		bnez	a5,.L118
 2246              	.L115:
 2247 09a8 67800000 		ret
 2248              	.L118:
 2249              	.LBE347:
 387:src/Interrupt.cpp ****     if(PCB::running != nullptr && enableSystemStack)
 2250              		.loc 1 387 39
 2251 09ac 130101FE 		addi	sp,sp,-32
 2252              		.cfi_def_cfa_offset 32
 2253 09b0 233C1100 		sd	ra,24(sp)
 2254 09b4 23388100 		sd	s0,16(sp)
GAS LISTING /tmp/ccCs0PLf.s 			page 55


 2255 09b8 23349100 		sd	s1,8(sp)
 2256              		.cfi_offset 1, -8
 2257              		.cfi_offset 8, -16
 2258              		.cfi_offset 9, -24
 2259 09bc 13040102 		addi	s0,sp,32
 2260              		.cfi_def_cfa 8, 0
 2261              	.LBB349:
 2262              	.LBB348:
 390:src/Interrupt.cpp ****         __asm__ volatile("mv %[sp],sp" :  [sp]"=r"(sp));
 2263              		.loc 1 390 9 is_stmt 1
 390:src/Interrupt.cpp ****         __asm__ volatile("mv %[sp],sp" :  [sp]"=r"(sp));
 2264              		.loc 1 390 46 is_stmt 0
 2265 09c0 97000000 		call	_ZN3PCB6getSSPEv@plt
 2265      E7800000 
 2266              	.LVL148:
 2267 09c8 93040500 		mv	s1,a0
 2268              	.LVL149:
 391:src/Interrupt.cpp ****         PCB::running->setSP(sp);
 2269              		.loc 1 391 9 is_stmt 1
 391:src/Interrupt.cpp ****         PCB::running->setSP(sp);
 2270              		.loc 1 391 56 is_stmt 0
 2271              	#APP
 2272              	# 391 "src/Interrupt.cpp" 1
 2273              		mv a1,sp
 2274              	# 0 "" 2
 2275              	.LVL150:
 392:src/Interrupt.cpp ****         __asm__ volatile("mv sp, %[ssp]" : : [ssp]"r"(ssp));
 2276              		.loc 1 392 9 is_stmt 1
 392:src/Interrupt.cpp ****         __asm__ volatile("mv sp, %[ssp]" : : [ssp]"r"(ssp));
 2277              		.loc 1 392 28 is_stmt 0
 2278              	#NO_APP
 2279 09d0 97070000 		la	a5,_ZN3PCB7runningE
 2279      83B70700 
 2280 09d8 03B50700 		ld	a0,0(a5)
 2281 09dc 97000000 		call	_ZN3PCB5setSPEm@plt
 2281      E7800000 
 2282              	.LVL151:
 393:src/Interrupt.cpp ****     }
 2283              		.loc 1 393 9 is_stmt 1
 393:src/Interrupt.cpp ****     }
 2284              		.loc 1 393 60 is_stmt 0
 2285              	#APP
 2286              	# 393 "src/Interrupt.cpp" 1
 2287              		mv sp, s1
 2288              	# 0 "" 2
 2289              	#NO_APP
 2290              	.LBE348:
 2291              	.LBE349:
 396:src/Interrupt.cpp **** 
 2292              		.loc 1 396 1
 2293 09e8 83308101 		ld	ra,24(sp)
 2294              		.cfi_restore 1
 2295 09ec 03340101 		ld	s0,16(sp)
 2296              		.cfi_restore 8
 2297              		.cfi_def_cfa 2, 32
 2298 09f0 83348100 		ld	s1,8(sp)
 2299              		.cfi_restore 9
GAS LISTING /tmp/ccCs0PLf.s 			page 56


 2300              	.LVL152:
 2301 09f4 13010102 		addi	sp,sp,32
 2302              		.cfi_def_cfa_offset 0
 2303 09f8 67800000 		jr	ra
 2304              		.cfi_endproc
 2305              	.LFE41:
 2307              		.align	2
 2308              		.globl	_ZN9Interrupt17switchToUserStackEv
 2310              	_ZN9Interrupt17switchToUserStackEv:
 2311              	.LFB42:
 398:src/Interrupt.cpp ****     if(PCB::running != nullptr && enableSystemStack)
 2312              		.loc 1 398 37 is_stmt 1
 2313              		.cfi_startproc
 399:src/Interrupt.cpp ****     {
 2314              		.loc 1 399 5
 2315              	.LBB350:
 399:src/Interrupt.cpp ****     {
 2316              		.loc 1 399 21 is_stmt 0
 2317 09fc 97070000 		la	a5,_ZN3PCB7runningE
 2317      83B70700 
 2318 0a04 03B50700 		ld	a0,0(a5)
 399:src/Interrupt.cpp ****     {
 2319              		.loc 1 399 5
 2320 0a08 63080500 		beqz	a0,.L122
 399:src/Interrupt.cpp ****     {
 2321              		.loc 1 399 32 discriminator 1
 2322 0a0c 97070000 		lbu	a5,.LANCHOR1
 2322      83C70700 
 2323 0a14 63940700 		bnez	a5,.L125
 2324              	.L122:
 2325 0a18 67800000 		ret
 2326              	.L125:
 2327              	.LBE350:
 398:src/Interrupt.cpp ****     if(PCB::running != nullptr && enableSystemStack)
 2328              		.loc 1 398 37
 2329 0a1c 130101FE 		addi	sp,sp,-32
 2330              		.cfi_def_cfa_offset 32
 2331 0a20 233C1100 		sd	ra,24(sp)
 2332 0a24 23388100 		sd	s0,16(sp)
 2333 0a28 23349100 		sd	s1,8(sp)
 2334              		.cfi_offset 1, -8
 2335              		.cfi_offset 8, -16
 2336              		.cfi_offset 9, -24
 2337 0a2c 13040102 		addi	s0,sp,32
 2338              		.cfi_def_cfa 8, 0
 2339              	.LBB352:
 2340              	.LBB351:
 401:src/Interrupt.cpp ****         uint64 ssp;
 2341              		.loc 1 401 9 is_stmt 1
 401:src/Interrupt.cpp ****         uint64 ssp;
 2342              		.loc 1 401 40 is_stmt 0
 2343 0a30 97000000 		call	_ZN3PCB5getSPEv@plt
 2343      E7800000 
 2344              	.LVL153:
 2345 0a38 93040500 		mv	s1,a0
 2346              	.LVL154:
 402:src/Interrupt.cpp ****         __asm__ volatile("mv %[ssp] , sp" : [ssp]"=r"(ssp));
GAS LISTING /tmp/ccCs0PLf.s 			page 57


 2347              		.loc 1 402 9 is_stmt 1
 403:src/Interrupt.cpp ****         PCB::running->setSSP(ssp);
 2348              		.loc 1 403 9
 403:src/Interrupt.cpp ****         PCB::running->setSSP(ssp);
 2349              		.loc 1 403 60 is_stmt 0
 2350              	#APP
 2351              	# 403 "src/Interrupt.cpp" 1
 2352              		mv a1 , sp
 2353              	# 0 "" 2
 2354              	.LVL155:
 404:src/Interrupt.cpp ****         __asm__ volatile("mv sp, %[sp]" : : [sp]"r"(sp));
 2355              		.loc 1 404 9 is_stmt 1
 404:src/Interrupt.cpp ****         __asm__ volatile("mv sp, %[sp]" : : [sp]"r"(sp));
 2356              		.loc 1 404 29 is_stmt 0
 2357              	#NO_APP
 2358 0a40 97070000 		la	a5,_ZN3PCB7runningE
 2358      83B70700 
 2359 0a48 03B50700 		ld	a0,0(a5)
 2360 0a4c 97000000 		call	_ZN3PCB6setSSPEm@plt
 2360      E7800000 
 2361              	.LVL156:
 405:src/Interrupt.cpp ****     }
 2362              		.loc 1 405 9 is_stmt 1
 405:src/Interrupt.cpp ****     }
 2363              		.loc 1 405 57 is_stmt 0
 2364              	#APP
 2365              	# 405 "src/Interrupt.cpp" 1
 2366              		mv sp, s1
 2367              	# 0 "" 2
 2368              	#NO_APP
 2369              	.LBE351:
 2370              	.LBE352:
 407:src/Interrupt.cpp **** 
 2371              		.loc 1 407 1
 2372 0a58 83308101 		ld	ra,24(sp)
 2373              		.cfi_restore 1
 2374 0a5c 03340101 		ld	s0,16(sp)
 2375              		.cfi_restore 8
 2376              		.cfi_def_cfa 2, 32
 2377 0a60 83348100 		ld	s1,8(sp)
 2378              		.cfi_restore 9
 2379              	.LVL157:
 2380 0a64 13010102 		addi	sp,sp,32
 2381              		.cfi_def_cfa_offset 0
 2382 0a68 67800000 		jr	ra
 2383              		.cfi_endproc
 2384              	.LFE42:
 2386              		.globl	_ZN9Interrupt17enableSystemStackE
 2387              		.globl	_ZN9Interrupt8lock_varE
 2388              		.globl	_ZN9Interrupt11prevSstatusE
 2389              		.data
 2390              		.align	3
 2391              		.set	.LANCHOR0,. + 0
 2394              	_ZN9Interrupt8lock_varE:
 2395 0000 01000000 		.word	1
 2396 0004 00000000 		.zero	4
 2399              	_ZN9Interrupt11prevSstatusE:
GAS LISTING /tmp/ccCs0PLf.s 			page 58


 2400 0008 02000000 		.dword	2
 2400      00000000 
 2401              		.bss
 2402              		.set	.LANCHOR1,. + 0
 2405              	_ZN9Interrupt17enableSystemStackE:
 2406 0000 00       		.zero	1
 2407              		.text
 2408              	.Letext0:
 2409              		.file 2 "src/../h/../lib/hw.h"
 2410              		.file 3 "src/../h/../h/../h/../h/syscall_c.h"
 2411              		.file 4 "src/../h/../h/../h/PCB_List.h"
 2412              		.file 5 "src/../h/../h/PCB.h"
 2413              		.file 6 "src/../h/../h/../h/MemoryAllocator.h"
 2414              		.file 7 "src/../h/../h/Sem.h"
 2415              		.file 8 "src/../h/../h/../h/Scheduler.h"
 2416              		.file 9 "src/../h/Interrupt.h"
 2417              		.file 10 "src/../h/Cons.hpp"
GAS LISTING /tmp/ccCs0PLf.s 			page 59


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Interrupt.cpp
     /tmp/ccCs0PLf.s:9      .text:0000000000000000 _ZN9Interrupt7callSysEmmmmm
     /tmp/ccCs0PLf.s:13     .text:0000000000000000 .L0 
     /tmp/ccCs0PLf.s:15     .text:0000000000000000 .L0 
     /tmp/ccCs0PLf.s:16     .text:0000000000000004 .L0 
     /tmp/ccCs0PLf.s:24     .text:0000000000000020 .L0 
     /tmp/ccCs0PLf.s:25     .text:0000000000000020 .L0 
     /tmp/ccCs0PLf.s:26     .text:0000000000000020 .L0 
     /tmp/ccCs0PLf.s:27     .text:0000000000000020 .L0 
     /tmp/ccCs0PLf.s:28     .text:0000000000000020 .L0 
     /tmp/ccCs0PLf.s:29     .text:0000000000000020 .L0 
     /tmp/ccCs0PLf.s:30     .text:0000000000000020 .L0 
     /tmp/ccCs0PLf.s:32     .text:0000000000000024 .L0 
     /tmp/ccCs0PLf.s:36     .text:0000000000000028 .L0 
     /tmp/ccCs0PLf.s:45     .text:000000000000003c .L0 
     /tmp/ccCs0PLf.s:53     .text:0000000000000044 .L0 
     /tmp/ccCs0PLf.s:63     .text:000000000000004c .L0 
     /tmp/ccCs0PLf.s:75     .text:0000000000000054 .L0 
     /tmp/ccCs0PLf.s:89     .text:000000000000005c .L0 
     /tmp/ccCs0PLf.s:105    .text:0000000000000064 .L0 
     /tmp/ccCs0PLf.s:123    .text:000000000000006c .L0 
     /tmp/ccCs0PLf.s:143    .text:0000000000000074 .L0 
     /tmp/ccCs0PLf.s:165    .text:000000000000007c .L0 
     /tmp/ccCs0PLf.s:189    .text:0000000000000084 .L0 
     /tmp/ccCs0PLf.s:215    .text:000000000000008c .L0 
     /tmp/ccCs0PLf.s:243    .text:0000000000000094 .L0 
     /tmp/ccCs0PLf.s:273    .text:000000000000009c .L0 
     /tmp/ccCs0PLf.s:305    .text:00000000000000a4 .L0 
     /tmp/ccCs0PLf.s:339    .text:00000000000000ac .L0 
     /tmp/ccCs0PLf.s:344    .text:00000000000000b4 .L0 
     /tmp/ccCs0PLf.s:348    .text:00000000000000c4 .L0 
     /tmp/ccCs0PLf.s:349    .text:00000000000000c4 .L0 
     /tmp/ccCs0PLf.s:357    .text:00000000000000d4 .L0 
     /tmp/ccCs0PLf.s:358    .text:00000000000000d4 .L0 
     /tmp/ccCs0PLf.s:378    .text:00000000000000dc .L0 
     /tmp/ccCs0PLf.s:384    .text:00000000000000e0 .L0 
     /tmp/ccCs0PLf.s:385    .text:00000000000000e0 .L0 
     /tmp/ccCs0PLf.s:386    .text:00000000000000e0 .L0 
     /tmp/ccCs0PLf.s:387    .text:00000000000000e0 .L0 
     /tmp/ccCs0PLf.s:392    .text:00000000000000ec .L0 
     /tmp/ccCs0PLf.s:393    .text:00000000000000ec .L0 
     /tmp/ccCs0PLf.s:394    .text:00000000000000ec .L0 
     /tmp/ccCs0PLf.s:399    .text:00000000000000f8 .L0 
     /tmp/ccCs0PLf.s:400    .text:00000000000000f8 .L0 
     /tmp/ccCs0PLf.s:402    .text:00000000000000fc .L0 
     /tmp/ccCs0PLf.s:403    .text:00000000000000fc .L0 
     /tmp/ccCs0PLf.s:406    .text:0000000000000100 .L0 
   src/Interrupt.cpp:85     .text:0000000000000100 .L0 
     /tmp/ccCs0PLf.s:417    .text:0000000000000104 .L0 
     /tmp/ccCs0PLf.s:418    .text:0000000000000108 .L0 
     /tmp/ccCs0PLf.s:419    .text:0000000000000108 .L0 
     /tmp/ccCs0PLf.s:421    .text:000000000000010c .L0 
     /tmp/ccCs0PLf.s:422    .text:000000000000010c .L0 
     /tmp/ccCs0PLf.s:424    .text:0000000000000110 .L0 
     /tmp/ccCs0PLf.s:427    .text:0000000000000114 .L0 
     /tmp/ccCs0PLf.s:429    .text:0000000000000118 .L0 
GAS LISTING /tmp/ccCs0PLf.s 			page 60


     /tmp/ccCs0PLf.s:431    .text:000000000000011c .L0 
     /tmp/ccCs0PLf.s:433    .text:0000000000000120 .L0 
     /tmp/ccCs0PLf.s:435    .text:0000000000000124 .L0 
     /tmp/ccCs0PLf.s:439    .text:0000000000000128 .L0 
     /tmp/ccCs0PLf.s:444    .text:0000000000000128 .L0 
     /tmp/ccCs0PLf.s:445    .text:0000000000000128 .L0 
     /tmp/ccCs0PLf.s:446    .text:0000000000000128 .L0 
     /tmp/ccCs0PLf.s:451    .text:0000000000000134 .L0 
   src/Interrupt.cpp:92     .text:0000000000000134 .L0 
     /tmp/ccCs0PLf.s:464    .text:000000000000013c .L0 
     /tmp/ccCs0PLf.s:465    .text:000000000000013c .L0 
     /tmp/ccCs0PLf.s:466    .text:000000000000013c .L0 
     /tmp/ccCs0PLf.s:468    .text:0000000000000140 .L0 
     /tmp/ccCs0PLf.s:471    .text:0000000000000148 .L0 
     /tmp/ccCs0PLf.s:473    .text:000000000000014c .L0 
     /tmp/ccCs0PLf.s:474    .text:000000000000014c .L0 
     /tmp/ccCs0PLf.s:476    .text:0000000000000150 .L0 
     /tmp/ccCs0PLf.s:478    .text:0000000000000154 .L0 
     /tmp/ccCs0PLf.s:480    .text:0000000000000158 .L0 
     /tmp/ccCs0PLf.s:481    .text:0000000000000158 .L0 
     /tmp/ccCs0PLf.s:489    .text:0000000000000174 .L0 
     /tmp/ccCs0PLf.s:491    .text:0000000000000178 .L0 
     /tmp/ccCs0PLf.s:493    .text:000000000000017c .L0 
     /tmp/ccCs0PLf.s:517    .text:00000000000001d4 .L0 
     /tmp/ccCs0PLf.s:518    .text:00000000000001d4 .L0 
     /tmp/ccCs0PLf.s:519    .text:00000000000001d4 .L0 
     /tmp/ccCs0PLf.s:529    .text:00000000000001e0 .L0 
     /tmp/ccCs0PLf.s:530    .text:00000000000001e0 .L0 
     /tmp/ccCs0PLf.s:531    .text:00000000000001e0 .L0 
     /tmp/ccCs0PLf.s:544    .text:00000000000001ec .L0 
     /tmp/ccCs0PLf.s:545    .text:00000000000001ec .L0 
     /tmp/ccCs0PLf.s:546    .text:00000000000001ec .L0 
     /tmp/ccCs0PLf.s:548    .text:00000000000001f0 .L0 
     /tmp/ccCs0PLf.s:551    .text:00000000000001f8 .L0 
     /tmp/ccCs0PLf.s:553    .text:00000000000001fc .L0 
     /tmp/ccCs0PLf.s:554    .text:00000000000001fc .L0 
     /tmp/ccCs0PLf.s:556    .text:0000000000000200 .L0 
     /tmp/ccCs0PLf.s:558    .text:0000000000000204 .L0 
     /tmp/ccCs0PLf.s:560    .text:0000000000000208 .L0 
     /tmp/ccCs0PLf.s:561    .text:0000000000000208 .L0 
     /tmp/ccCs0PLf.s:569    .text:0000000000000224 .L0 
     /tmp/ccCs0PLf.s:571    .text:0000000000000228 .L0 
     /tmp/ccCs0PLf.s:573    .text:000000000000022c .L0 
     /tmp/ccCs0PLf.s:596    .text:0000000000000284 .L0 
     /tmp/ccCs0PLf.s:597    .text:0000000000000284 .L0 
     /tmp/ccCs0PLf.s:600    .text:0000000000000290 .L0 
     /tmp/ccCs0PLf.s:602    .text:0000000000000294 .L0 
     /tmp/ccCs0PLf.s:603    .text:0000000000000294 .L0 
     /tmp/ccCs0PLf.s:605    .text:0000000000000298 .L0 
     /tmp/ccCs0PLf.s:610    .text:00000000000002a4 .L0 
     /tmp/ccCs0PLf.s:611    .text:00000000000002a4 .L0 
     /tmp/ccCs0PLf.s:612    .text:00000000000002a4 .L0 
     /tmp/ccCs0PLf.s:622    .text:00000000000002b0 .L0 
     /tmp/ccCs0PLf.s:623    .text:00000000000002b0 .L0 
     /tmp/ccCs0PLf.s:624    .text:00000000000002b0 .L0 
     /tmp/ccCs0PLf.s:634    .text:00000000000002bc .L0 
     /tmp/ccCs0PLf.s:635    .text:00000000000002bc .L0 
GAS LISTING /tmp/ccCs0PLf.s 			page 61


     /tmp/ccCs0PLf.s:637    .text:00000000000002c0 .L0 
     /tmp/ccCs0PLf.s:639    .text:00000000000002c4 .L0 
     /tmp/ccCs0PLf.s:656    .text:00000000000002d4 .L0 
     /tmp/ccCs0PLf.s:657    .text:00000000000002d4 .L0 
     /tmp/ccCs0PLf.s:661    .text:00000000000002e0 .L0 
     /tmp/ccCs0PLf.s:664    .text:00000000000002e4 .L0 
     /tmp/ccCs0PLf.s:665    .text:00000000000002e4 .L0 
     /tmp/ccCs0PLf.s:669    .text:00000000000002f0 .L0 
     /tmp/ccCs0PLf.s:670    .text:00000000000002f0 .L0 
     /tmp/ccCs0PLf.s:671    .text:00000000000002f0 .L0 
     /tmp/ccCs0PLf.s:683    .text:00000000000002fc .L0 
     /tmp/ccCs0PLf.s:684    .text:00000000000002fc .L0 
     /tmp/ccCs0PLf.s:685    .text:00000000000002fc .L0 
     /tmp/ccCs0PLf.s:698    .text:0000000000000308 .L0 
     /tmp/ccCs0PLf.s:699    .text:0000000000000308 .L0 
     /tmp/ccCs0PLf.s:702    .text:0000000000000314 .L0 
     /tmp/ccCs0PLf.s:703    .text:0000000000000314 .L0 
     /tmp/ccCs0PLf.s:711    .text:0000000000000320 .L0 
     /tmp/ccCs0PLf.s:712    .text:0000000000000320 .L0 
     /tmp/ccCs0PLf.s:713    .text:0000000000000320 .L0 
     /tmp/ccCs0PLf.s:715    .text:0000000000000324 .L0 
     /tmp/ccCs0PLf.s:718    .text:000000000000032c .L0 
     /tmp/ccCs0PLf.s:720    .text:0000000000000330 .L0 
     /tmp/ccCs0PLf.s:721    .text:0000000000000330 .L0 
     /tmp/ccCs0PLf.s:723    .text:0000000000000334 .L0 
     /tmp/ccCs0PLf.s:725    .text:0000000000000338 .L0 
     /tmp/ccCs0PLf.s:727    .text:000000000000033c .L0 
     /tmp/ccCs0PLf.s:728    .text:000000000000033c .L0 
     /tmp/ccCs0PLf.s:733    .text:000000000000034c .L0 
     /tmp/ccCs0PLf.s:735    .text:0000000000000350 .L0 
     /tmp/ccCs0PLf.s:737    .text:0000000000000354 .L0 
     /tmp/ccCs0PLf.s:743    .text:0000000000000364 .L0 
     /tmp/ccCs0PLf.s:744    .text:0000000000000364 .L0 
     /tmp/ccCs0PLf.s:745    .text:0000000000000364 .L0 
     /tmp/ccCs0PLf.s:755    .text:0000000000000370 .L0 
     /tmp/ccCs0PLf.s:756    .text:0000000000000370 .L0 
     /tmp/ccCs0PLf.s:757    .text:0000000000000370 .L0 
     /tmp/ccCs0PLf.s:770    .text:000000000000037c .L0 
     /tmp/ccCs0PLf.s:771    .text:000000000000037c .L0 
     /tmp/ccCs0PLf.s:772    .text:000000000000037c .L0 
     /tmp/ccCs0PLf.s:775    .text:0000000000000380 .L0 
     /tmp/ccCs0PLf.s:777    .text:0000000000000384 .L0 
     /tmp/ccCs0PLf.s:778    .text:0000000000000384 .L0 
     /tmp/ccCs0PLf.s:781    .text:000000000000038c .L0 
     /tmp/ccCs0PLf.s:782    .text:000000000000038c .L0 
     /tmp/ccCs0PLf.s:783    .text:000000000000038c .L0 
     /tmp/ccCs0PLf.s:793    .text:0000000000000398 .L0 
     /tmp/ccCs0PLf.s:794    .text:0000000000000398 .L0 
     /tmp/ccCs0PLf.s:795    .text:0000000000000398 .L0 
     /tmp/ccCs0PLf.s:808    .text:00000000000003a4 .L0 
     /tmp/ccCs0PLf.s:809    .text:00000000000003a4 .L0 
     /tmp/ccCs0PLf.s:810    .text:00000000000003a4 .L0 
     /tmp/ccCs0PLf.s:813    .text:00000000000003a8 .L0 
     /tmp/ccCs0PLf.s:815    .text:00000000000003ac .L0 
     /tmp/ccCs0PLf.s:816    .text:00000000000003ac .L0 
     /tmp/ccCs0PLf.s:819    .text:00000000000003b4 .L0 
     /tmp/ccCs0PLf.s:820    .text:00000000000003b4 .L0 
GAS LISTING /tmp/ccCs0PLf.s 			page 62


     /tmp/ccCs0PLf.s:824    .text:00000000000003c4 .L0 
     /tmp/ccCs0PLf.s:827    .text:00000000000003c8 .L0 
     /tmp/ccCs0PLf.s:828    .text:00000000000003c8 .L0 
   src/Interrupt.cpp:177    .text:00000000000003c8 .L0 
     /tmp/ccCs0PLf.s:838    .text:00000000000003d0 .L0 
     /tmp/ccCs0PLf.s:839    .text:00000000000003d0 .L0 
     /tmp/ccCs0PLf.s:840    .text:00000000000003d0 .L0 
     /tmp/ccCs0PLf.s:850    .text:00000000000003dc .L0 
     /tmp/ccCs0PLf.s:851    .text:00000000000003dc .L0 
     /tmp/ccCs0PLf.s:852    .text:00000000000003dc .L0 
     /tmp/ccCs0PLf.s:865    .text:00000000000003e8 .L0 
     /tmp/ccCs0PLf.s:866    .text:00000000000003e8 .L0 
     /tmp/ccCs0PLf.s:867    .text:00000000000003e8 .L0 
     /tmp/ccCs0PLf.s:870    .text:00000000000003ec .L0 
     /tmp/ccCs0PLf.s:872    .text:00000000000003f0 .L0 
     /tmp/ccCs0PLf.s:873    .text:00000000000003f0 .L0 
     /tmp/ccCs0PLf.s:876    .text:00000000000003f8 .L0 
     /tmp/ccCs0PLf.s:877    .text:00000000000003f8 .L0 
     /tmp/ccCs0PLf.s:878    .text:00000000000003f8 .L0 
     /tmp/ccCs0PLf.s:888    .text:0000000000000404 .L0 
     /tmp/ccCs0PLf.s:889    .text:0000000000000404 .L0 
     /tmp/ccCs0PLf.s:890    .text:0000000000000404 .L0 
     /tmp/ccCs0PLf.s:903    .text:0000000000000410 .L0 
     /tmp/ccCs0PLf.s:904    .text:0000000000000410 .L0 
     /tmp/ccCs0PLf.s:905    .text:0000000000000410 .L0 
     /tmp/ccCs0PLf.s:910    .text:000000000000041c .L0 
     /tmp/ccCs0PLf.s:911    .text:000000000000041c .L0 
     /tmp/ccCs0PLf.s:914    .text:0000000000000428 .L0 
     /tmp/ccCs0PLf.s:915    .text:0000000000000428 .L0 
     /tmp/ccCs0PLf.s:918    .text:0000000000000430 .L0 
     /tmp/ccCs0PLf.s:919    .text:0000000000000430 .L0 
     /tmp/ccCs0PLf.s:920    .text:0000000000000430 .L0 
     /tmp/ccCs0PLf.s:933    .text:000000000000043c .L0 
     /tmp/ccCs0PLf.s:934    .text:000000000000043c .L0 
     /tmp/ccCs0PLf.s:935    .text:000000000000043c .L0 
     /tmp/ccCs0PLf.s:941    .text:0000000000000450 .L0 
     /tmp/ccCs0PLf.s:942    .text:0000000000000450 .L0 
   src/Interrupt.cpp:215    .text:0000000000000450 .L0 
     /tmp/ccCs0PLf.s:955    .text:0000000000000458 .L0 
     /tmp/ccCs0PLf.s:956    .text:0000000000000458 .L0 
     /tmp/ccCs0PLf.s:957    .text:0000000000000458 .L0 
     /tmp/ccCs0PLf.s:971    .text:0000000000000474 .L0 
     /tmp/ccCs0PLf.s:972    .text:0000000000000474 .L0 
     /tmp/ccCs0PLf.s:973    .text:0000000000000474 .L0 
     /tmp/ccCs0PLf.s:980    .text:000000000000047c .L0 
     /tmp/ccCs0PLf.s:988    .text:0000000000000480 .L0 
     /tmp/ccCs0PLf.s:989    .text:0000000000000480 .L0 
     /tmp/ccCs0PLf.s:990    .text:0000000000000480 .L0 
     /tmp/ccCs0PLf.s:992    .text:0000000000000484 .L0 
     /tmp/ccCs0PLf.s:994    .text:0000000000000488 .L0 
     /tmp/ccCs0PLf.s:1006   .text:0000000000000494 .L0 
     /tmp/ccCs0PLf.s:1007   .text:0000000000000494 .L0 
     /tmp/ccCs0PLf.s:1010   .text:00000000000004a0 .L0 
     /tmp/ccCs0PLf.s:1011   .text:00000000000004a0 .L0 
     /tmp/ccCs0PLf.s:1018   .text:00000000000004b4 .L0 
     /tmp/ccCs0PLf.s:1019   .text:00000000000004b4 .L0 
     /tmp/ccCs0PLf.s:1021   .text:00000000000004b8 .L0 
GAS LISTING /tmp/ccCs0PLf.s 			page 63


     /tmp/ccCs0PLf.s:1022   .text:00000000000004b8 .L0 
     /tmp/ccCs0PLf.s:1025   .text:00000000000004c0 .L0 
     /tmp/ccCs0PLf.s:1026   .text:00000000000004c0 .L0 
     /tmp/ccCs0PLf.s:1031   .text:00000000000004d4 .L0 
     /tmp/ccCs0PLf.s:1051   .text:00000000000004d8 .L0 
     /tmp/ccCs0PLf.s:1057   .text:00000000000004d8 _ZN9Interrupt8r_statusEv
     /tmp/ccCs0PLf.s:1060   .text:00000000000004d8 .L0 
     /tmp/ccCs0PLf.s:1061   .text:00000000000004d8 .L0 
     /tmp/ccCs0PLf.s:1062   .text:00000000000004dc .L0 
     /tmp/ccCs0PLf.s:1064   .text:00000000000004e0 .L0 
     /tmp/ccCs0PLf.s:1066   .text:00000000000004e4 .L0 
     /tmp/ccCs0PLf.s:1070   .text:00000000000004e4 .L0 
     /tmp/ccCs0PLf.s:1071   .text:00000000000004e4 .L0 
     /tmp/ccCs0PLf.s:1072   .text:00000000000004e4 .L0 
   src/Interrupt.cpp:258    .text:00000000000004e4 .L0 
     /tmp/ccCs0PLf.s:1082   .text:00000000000004e8 .L0 
     /tmp/ccCs0PLf.s:1083   .text:00000000000004e8 .L0 
     /tmp/ccCs0PLf.s:1084   .text:00000000000004e8 .L0 
     /tmp/ccCs0PLf.s:1085   .text:00000000000004ec .L0 
     /tmp/ccCs0PLf.s:1086   .text:00000000000004ec .L0 
     /tmp/ccCs0PLf.s:1088   .text:00000000000004f0 .L0 
     /tmp/ccCs0PLf.s:1090   .text:00000000000004f4 .L0 
     /tmp/ccCs0PLf.s:1096   .text:00000000000004f4 _ZN9Interrupt8w_statusEm
     /tmp/ccCs0PLf.s:1099   .text:00000000000004f4 .L0 
     /tmp/ccCs0PLf.s:1101   .text:00000000000004f4 .L0 
     /tmp/ccCs0PLf.s:1102   .text:00000000000004f8 .L0 
     /tmp/ccCs0PLf.s:1104   .text:00000000000004fc .L0 
     /tmp/ccCs0PLf.s:1106   .text:0000000000000500 .L0 
     /tmp/ccCs0PLf.s:1111   .text:0000000000000500 .L0 
     /tmp/ccCs0PLf.s:1112   .text:0000000000000500 .L0 
   src/Interrupt.cpp:269    .text:0000000000000500 .L0 
     /tmp/ccCs0PLf.s:1122   .text:0000000000000504 .L0 
     /tmp/ccCs0PLf.s:1123   .text:0000000000000508 .L0 
     /tmp/ccCs0PLf.s:1124   .text:0000000000000508 .L0 
     /tmp/ccCs0PLf.s:1126   .text:000000000000050c .L0 
     /tmp/ccCs0PLf.s:1128   .text:0000000000000510 .L0 
     /tmp/ccCs0PLf.s:1134   .text:0000000000000510 _ZN9Interrupt7r_stvecEv
     /tmp/ccCs0PLf.s:1137   .text:0000000000000510 .L0 
     /tmp/ccCs0PLf.s:1138   .text:0000000000000510 .L0 
     /tmp/ccCs0PLf.s:1139   .text:0000000000000514 .L0 
     /tmp/ccCs0PLf.s:1141   .text:0000000000000518 .L0 
     /tmp/ccCs0PLf.s:1143   .text:000000000000051c .L0 
     /tmp/ccCs0PLf.s:1147   .text:000000000000051c .L0 
     /tmp/ccCs0PLf.s:1148   .text:000000000000051c .L0 
     /tmp/ccCs0PLf.s:1149   .text:000000000000051c .L0 
   src/Interrupt.cpp:278    .text:000000000000051c .L0 
     /tmp/ccCs0PLf.s:1159   .text:0000000000000520 .L0 
     /tmp/ccCs0PLf.s:1160   .text:0000000000000520 .L0 
     /tmp/ccCs0PLf.s:1161   .text:0000000000000520 .L0 
     /tmp/ccCs0PLf.s:1162   .text:0000000000000524 .L0 
     /tmp/ccCs0PLf.s:1163   .text:0000000000000524 .L0 
     /tmp/ccCs0PLf.s:1165   .text:0000000000000528 .L0 
     /tmp/ccCs0PLf.s:1167   .text:000000000000052c .L0 
     /tmp/ccCs0PLf.s:1173   .text:000000000000052c _ZN9Interrupt7w_stvecEm
     /tmp/ccCs0PLf.s:1176   .text:000000000000052c .L0 
     /tmp/ccCs0PLf.s:1178   .text:000000000000052c .L0 
     /tmp/ccCs0PLf.s:1179   .text:0000000000000530 .L0 
GAS LISTING /tmp/ccCs0PLf.s 			page 64


     /tmp/ccCs0PLf.s:1181   .text:0000000000000534 .L0 
     /tmp/ccCs0PLf.s:1183   .text:0000000000000538 .L0 
     /tmp/ccCs0PLf.s:1188   .text:0000000000000538 .L0 
     /tmp/ccCs0PLf.s:1189   .text:0000000000000538 .L0 
   src/Interrupt.cpp:286    .text:0000000000000538 .L0 
     /tmp/ccCs0PLf.s:1199   .text:000000000000053c .L0 
     /tmp/ccCs0PLf.s:1200   .text:0000000000000540 .L0 
     /tmp/ccCs0PLf.s:1201   .text:0000000000000540 .L0 
     /tmp/ccCs0PLf.s:1203   .text:0000000000000544 .L0 
     /tmp/ccCs0PLf.s:1205   .text:0000000000000548 .L0 
     /tmp/ccCs0PLf.s:1211   .text:0000000000000548 _ZN9Interrupt8r_scauseEv
     /tmp/ccCs0PLf.s:1214   .text:0000000000000548 .L0 
     /tmp/ccCs0PLf.s:1215   .text:0000000000000548 .L0 
     /tmp/ccCs0PLf.s:1216   .text:000000000000054c .L0 
     /tmp/ccCs0PLf.s:1218   .text:0000000000000550 .L0 
     /tmp/ccCs0PLf.s:1220   .text:0000000000000554 .L0 
     /tmp/ccCs0PLf.s:1224   .text:0000000000000554 .L0 
     /tmp/ccCs0PLf.s:1225   .text:0000000000000554 .L0 
     /tmp/ccCs0PLf.s:1226   .text:0000000000000554 .L0 
   src/Interrupt.cpp:297    .text:0000000000000554 .L0 
     /tmp/ccCs0PLf.s:1236   .text:0000000000000558 .L0 
     /tmp/ccCs0PLf.s:1237   .text:0000000000000558 .L0 
     /tmp/ccCs0PLf.s:1238   .text:0000000000000558 .L0 
     /tmp/ccCs0PLf.s:1239   .text:000000000000055c .L0 
     /tmp/ccCs0PLf.s:1240   .text:000000000000055c .L0 
     /tmp/ccCs0PLf.s:1242   .text:0000000000000560 .L0 
     /tmp/ccCs0PLf.s:1244   .text:0000000000000564 .L0 
     /tmp/ccCs0PLf.s:1250   .text:0000000000000564 _ZN9Interrupt8w_scauseEm
     /tmp/ccCs0PLf.s:1253   .text:0000000000000564 .L0 
     /tmp/ccCs0PLf.s:1255   .text:0000000000000564 .L0 
     /tmp/ccCs0PLf.s:1256   .text:0000000000000568 .L0 
     /tmp/ccCs0PLf.s:1258   .text:000000000000056c .L0 
     /tmp/ccCs0PLf.s:1260   .text:0000000000000570 .L0 
     /tmp/ccCs0PLf.s:1265   .text:0000000000000570 .L0 
     /tmp/ccCs0PLf.s:1266   .text:0000000000000570 .L0 
   src/Interrupt.cpp:305    .text:0000000000000570 .L0 
     /tmp/ccCs0PLf.s:1276   .text:0000000000000574 .L0 
     /tmp/ccCs0PLf.s:1277   .text:0000000000000578 .L0 
     /tmp/ccCs0PLf.s:1278   .text:0000000000000578 .L0 
     /tmp/ccCs0PLf.s:1280   .text:000000000000057c .L0 
     /tmp/ccCs0PLf.s:1282   .text:0000000000000580 .L0 
     /tmp/ccCs0PLf.s:1288   .text:0000000000000580 _ZN9Interrupt6w_sepcEm
     /tmp/ccCs0PLf.s:1291   .text:0000000000000580 .L0 
     /tmp/ccCs0PLf.s:1293   .text:0000000000000580 .L0 
     /tmp/ccCs0PLf.s:1294   .text:0000000000000584 .L0 
     /tmp/ccCs0PLf.s:1296   .text:0000000000000588 .L0 
     /tmp/ccCs0PLf.s:1298   .text:000000000000058c .L0 
     /tmp/ccCs0PLf.s:1303   .text:000000000000058c .L0 
     /tmp/ccCs0PLf.s:1304   .text:000000000000058c .L0 
   src/Interrupt.cpp:314    .text:000000000000058c .L0 
     /tmp/ccCs0PLf.s:1314   .text:0000000000000590 .L0 
     /tmp/ccCs0PLf.s:1315   .text:0000000000000594 .L0 
     /tmp/ccCs0PLf.s:1316   .text:0000000000000594 .L0 
     /tmp/ccCs0PLf.s:1318   .text:0000000000000598 .L0 
     /tmp/ccCs0PLf.s:1320   .text:000000000000059c .L0 
     /tmp/ccCs0PLf.s:1326   .text:000000000000059c _ZN9Interrupt6r_sepcEv
     /tmp/ccCs0PLf.s:1329   .text:000000000000059c .L0 
GAS LISTING /tmp/ccCs0PLf.s 			page 65


     /tmp/ccCs0PLf.s:1330   .text:000000000000059c .L0 
     /tmp/ccCs0PLf.s:1331   .text:00000000000005a0 .L0 
     /tmp/ccCs0PLf.s:1333   .text:00000000000005a4 .L0 
     /tmp/ccCs0PLf.s:1335   .text:00000000000005a8 .L0 
     /tmp/ccCs0PLf.s:1339   .text:00000000000005a8 .L0 
     /tmp/ccCs0PLf.s:1340   .text:00000000000005a8 .L0 
     /tmp/ccCs0PLf.s:1341   .text:00000000000005a8 .L0 
   src/Interrupt.cpp:325    .text:00000000000005a8 .L0 
     /tmp/ccCs0PLf.s:1351   .text:00000000000005ac .L0 
     /tmp/ccCs0PLf.s:1352   .text:00000000000005ac .L0 
     /tmp/ccCs0PLf.s:1353   .text:00000000000005ac .L0 
     /tmp/ccCs0PLf.s:1354   .text:00000000000005b0 .L0 
     /tmp/ccCs0PLf.s:1355   .text:00000000000005b0 .L0 
     /tmp/ccCs0PLf.s:1357   .text:00000000000005b4 .L0 
     /tmp/ccCs0PLf.s:1359   .text:00000000000005b8 .L0 
     /tmp/ccCs0PLf.s:1365   .text:00000000000005b8 _ZN9Interrupt13handleSysCallEv
     /tmp/ccCs0PLf.s:1368   .text:00000000000005b8 .L0 
     /tmp/ccCs0PLf.s:1369   .text:00000000000005b8 .L0 
     /tmp/ccCs0PLf.s:1370   .text:00000000000005bc .L0 
     /tmp/ccCs0PLf.s:1375   .text:00000000000005cc .L0 
     /tmp/ccCs0PLf.s:1376   .text:00000000000005cc .L0 
     /tmp/ccCs0PLf.s:1377   .text:00000000000005cc .L0 
     /tmp/ccCs0PLf.s:1378   .text:00000000000005cc .L0 
     /tmp/ccCs0PLf.s:1380   .text:00000000000005d0 .L0 
     /tmp/ccCs0PLf.s:1384   .text:00000000000005d0 .L0 
     /tmp/ccCs0PLf.s:1385   .text:00000000000005d0 .L0 
     /tmp/ccCs0PLf.s:1386   .text:00000000000005d0 .L0 
   src/Interrupt.cpp:297    .text:00000000000005d0 .L0 
     /tmp/ccCs0PLf.s:1396   .text:00000000000005d4 .L0 
     /tmp/ccCs0PLf.s:1398   .text:00000000000005d4 .L0 
     /tmp/ccCs0PLf.s:1399   .text:00000000000005d4 .L0 
     /tmp/ccCs0PLf.s:1401   .text:00000000000005d8 .L0 
     /tmp/ccCs0PLf.s:1407   .text:00000000000005e0 .L0 
     /tmp/ccCs0PLf.s:1417   .text:00000000000005f0 .L0 
     /tmp/ccCs0PLf.s:1427   .text:0000000000000600 .L0 
     /tmp/ccCs0PLf.s:1428   .text:0000000000000604 .L0 
     /tmp/ccCs0PLf.s:1429   .text:0000000000000604 .L0 
     /tmp/ccCs0PLf.s:1431   .text:0000000000000608 .L0 
     /tmp/ccCs0PLf.s:1432   .text:0000000000000608 .L0 
     /tmp/ccCs0PLf.s:1434   .text:000000000000060c .L0 
     /tmp/ccCs0PLf.s:1436   .text:0000000000000610 .L0 
     /tmp/ccCs0PLf.s:1438   .text:0000000000000614 .L0 
     /tmp/ccCs0PLf.s:1442   .text:0000000000000618 .L0 
     /tmp/ccCs0PLf.s:1448   .text:0000000000000618 .L0 
     /tmp/ccCs0PLf.s:1449   .text:0000000000000618 .L0 
     /tmp/ccCs0PLf.s:1450   .text:0000000000000618 .L0 
   src/Interrupt.cpp:325    .text:0000000000000618 .L0 
     /tmp/ccCs0PLf.s:1460   .text:000000000000061c .L0 
     /tmp/ccCs0PLf.s:1461   .text:000000000000061c .L0 
     /tmp/ccCs0PLf.s:1466   .text:0000000000000620 .L0 
     /tmp/ccCs0PLf.s:1467   .text:0000000000000620 .L0 
     /tmp/ccCs0PLf.s:1468   .text:0000000000000620 .L0 
   src/Interrupt.cpp:297    .text:0000000000000620 .L0 
     /tmp/ccCs0PLf.s:1478   .text:0000000000000624 .L0 
     /tmp/ccCs0PLf.s:1479   .text:0000000000000624 .L0 
     /tmp/ccCs0PLf.s:1480   .text:0000000000000624 .L0 
   src/Interrupt.cpp:19     .text:0000000000000624 .L0 
GAS LISTING /tmp/ccCs0PLf.s 			page 66


     /tmp/ccCs0PLf.s:1487   .text:0000000000000628 .L0 
   src/Interrupt.cpp:20     .text:0000000000000628 .L0 
     /tmp/ccCs0PLf.s:1493   .text:000000000000062c .L0 
   src/Interrupt.cpp:21     .text:000000000000062c .L0 
     /tmp/ccCs0PLf.s:1499   .text:0000000000000630 .L0 
   src/Interrupt.cpp:22     .text:0000000000000630 .L0 
     /tmp/ccCs0PLf.s:1505   .text:0000000000000634 .L0 
   src/Interrupt.cpp:23     .text:0000000000000634 .L0 
     /tmp/ccCs0PLf.s:1511   .text:0000000000000638 .L0 
     /tmp/ccCs0PLf.s:1513   .text:0000000000000638 .L0 
     /tmp/ccCs0PLf.s:1518   .text:0000000000000640 .L0 
     /tmp/ccCs0PLf.s:1519   .text:0000000000000640 .L0 
   src/Interrupt.cpp:305    .text:0000000000000640 .L0 
     /tmp/ccCs0PLf.s:1531   .text:0000000000000644 .L0 
     /tmp/ccCs0PLf.s:1532   .text:0000000000000644 .L0 
   src/Interrupt.cpp:314    .text:0000000000000644 .L0 
     /tmp/ccCs0PLf.s:1539   .text:0000000000000648 .L0 
     /tmp/ccCs0PLf.s:1550   .text:000000000000064c .L0 
     /tmp/ccCs0PLf.s:1551   .text:000000000000064c .L0 
     /tmp/ccCs0PLf.s:1552   .text:000000000000064c .L0 
   src/Interrupt.cpp:411    .text:000000000000064c .L0 
     /tmp/ccCs0PLf.s:1562   .text:0000000000000650 .L0 
     /tmp/ccCs0PLf.s:1563   .text:0000000000000650 .L0 
     /tmp/ccCs0PLf.s:1564   .text:0000000000000650 .L0 
     /tmp/ccCs0PLf.s:1567   .text:0000000000000654 .L0 
     /tmp/ccCs0PLf.s:1572   .text:0000000000000658 .L0 
     /tmp/ccCs0PLf.s:1573   .text:0000000000000658 .L0 
     /tmp/ccCs0PLf.s:1574   .text:0000000000000658 .L0 
     /tmp/ccCs0PLf.s:1584   .text:0000000000000660 .L0 
     /tmp/ccCs0PLf.s:1587   .text:0000000000000664 .L0 
     /tmp/ccCs0PLf.s:1588   .text:0000000000000664 .L0 
     /tmp/ccCs0PLf.s:1597   .text:000000000000067c .L0 
     /tmp/ccCs0PLf.s:1598   .text:000000000000067c .L0 
     /tmp/ccCs0PLf.s:1603   .text:000000000000068c .L0 
     /tmp/ccCs0PLf.s:1604   .text:000000000000068c .L0 
     /tmp/ccCs0PLf.s:1610   .text:0000000000000698 .L0 
     /tmp/ccCs0PLf.s:1611   .text:0000000000000698 .L0 
     /tmp/ccCs0PLf.s:1612   .text:0000000000000698 .L0 
     /tmp/ccCs0PLf.s:1617   .text:00000000000006ac .L0 
     /tmp/ccCs0PLf.s:1620   .text:00000000000006b0 .L0 
     /tmp/ccCs0PLf.s:1621   .text:00000000000006b0 .L0 
     /tmp/ccCs0PLf.s:1628   .text:00000000000006c8 .L0 
     /tmp/ccCs0PLf.s:1629   .text:00000000000006c8 .L0 
     /tmp/ccCs0PLf.s:1631   .text:00000000000006cc .L0 
     /tmp/ccCs0PLf.s:1633   .text:00000000000006d0 .L0 
     /tmp/ccCs0PLf.s:1637   .text:00000000000006e0 .L0 
     /tmp/ccCs0PLf.s:1638   .text:00000000000006e0 .L0 
     /tmp/ccCs0PLf.s:1649   .text:0000000000000700 .L0 
     /tmp/ccCs0PLf.s:1650   .text:0000000000000700 .L0 
     /tmp/ccCs0PLf.s:1656   .text:0000000000000714 .L0 
     /tmp/ccCs0PLf.s:1657   .text:0000000000000714 .L0 
     /tmp/ccCs0PLf.s:1662   .text:0000000000000728 .L0 
     /tmp/ccCs0PLf.s:1664   .text:000000000000072c .L0 
     /tmp/ccCs0PLf.s:1671   .text:0000000000000730 .L0 
     /tmp/ccCs0PLf.s:1672   .text:0000000000000730 .L0 
     /tmp/ccCs0PLf.s:1673   .text:0000000000000730 .L0 
     /tmp/ccCs0PLf.s:1680   .text:0000000000000738 .L0 
GAS LISTING /tmp/ccCs0PLf.s 			page 67


     /tmp/ccCs0PLf.s:1688   .text:000000000000073c .L0 
     /tmp/ccCs0PLf.s:1689   .text:000000000000073c .L0 
     /tmp/ccCs0PLf.s:1696   .text:0000000000000748 .L0 
     /tmp/ccCs0PLf.s:1697   .text:0000000000000748 .L0 
     /tmp/ccCs0PLf.s:1698   .text:0000000000000748 .L0 
   src/Interrupt.cpp:297    .text:0000000000000748 .L0 
     /tmp/ccCs0PLf.s:1708   .text:000000000000074c .L0 
     /tmp/ccCs0PLf.s:1709   .text:000000000000074c .L0 
     /tmp/ccCs0PLf.s:1710   .text:000000000000074c .L0 
     /tmp/ccCs0PLf.s:1713   .text:0000000000000758 .L0 
     /tmp/ccCs0PLf.s:1714   .text:0000000000000758 .L0 
     /tmp/ccCs0PLf.s:1719   .text:0000000000000760 .L0 
     /tmp/ccCs0PLf.s:1720   .text:0000000000000760 .L0 
   src/Interrupt.cpp:305    .text:0000000000000760 .L0 
     /tmp/ccCs0PLf.s:1730   .text:0000000000000764 .L0 
     /tmp/ccCs0PLf.s:1731   .text:0000000000000764 .L0 
     /tmp/ccCs0PLf.s:1743   .text:0000000000000774 .L0 
     /tmp/ccCs0PLf.s:1744   .text:0000000000000774 .L0 
     /tmp/ccCs0PLf.s:1750   .text:0000000000000780 .L0 
     /tmp/ccCs0PLf.s:1756   .text:0000000000000788 .L0 
     /tmp/ccCs0PLf.s:1757   .text:0000000000000788 .L0 
     /tmp/ccCs0PLf.s:1768   .text:0000000000000798 .L0 
     /tmp/ccCs0PLf.s:1769   .text:0000000000000798 .L0 
     /tmp/ccCs0PLf.s:1773   .text:00000000000007a8 .L0 
     /tmp/ccCs0PLf.s:1777   .text:00000000000007ac .L0 
     /tmp/ccCs0PLf.s:1778   .text:00000000000007ac .L0 
     /tmp/ccCs0PLf.s:1779   .text:00000000000007ac .L0 
     /tmp/ccCs0PLf.s:1781   .text:00000000000007b0 .L0 
     /tmp/ccCs0PLf.s:1785   .text:00000000000007b8 .L0 
     /tmp/ccCs0PLf.s:1786   .text:00000000000007b8 .L0 
     /tmp/ccCs0PLf.s:1790   .text:00000000000007c4 .L0 
     /tmp/ccCs0PLf.s:1791   .text:00000000000007c4 .L0 
     /tmp/ccCs0PLf.s:1798   .text:00000000000007dc .L0 
     /tmp/ccCs0PLf.s:1799   .text:00000000000007dc .L0 
     /tmp/ccCs0PLf.s:1801   .text:00000000000007e0 .L0 
     /tmp/ccCs0PLf.s:1804   .text:00000000000007e4 .L0 
     /tmp/ccCs0PLf.s:1811   .text:00000000000007e8 .L0 
     /tmp/ccCs0PLf.s:1817   .text:00000000000007e8 _ZN9Interrupt9us_statusEm
     /tmp/ccCs0PLf.s:1820   .text:00000000000007e8 .L0 
     /tmp/ccCs0PLf.s:1822   .text:00000000000007e8 .L0 
     /tmp/ccCs0PLf.s:1823   .text:00000000000007ec .L0 
     /tmp/ccCs0PLf.s:1825   .text:00000000000007f0 .L0 
     /tmp/ccCs0PLf.s:1827   .text:00000000000007f4 .L0 
     /tmp/ccCs0PLf.s:1831   .text:00000000000007f4 .L0 
     /tmp/ccCs0PLf.s:1832   .text:00000000000007f4 .L0 
     /tmp/ccCs0PLf.s:1833   .text:00000000000007f4 .L0 
   src/Interrupt.cpp:258    .text:00000000000007f4 .L0 
     /tmp/ccCs0PLf.s:1843   .text:00000000000007f8 .L0 
     /tmp/ccCs0PLf.s:1844   .text:00000000000007f8 .L0 
     /tmp/ccCs0PLf.s:1845   .text:00000000000007f8 .L0 
     /tmp/ccCs0PLf.s:1848   .text:00000000000007fc .L0 
     /tmp/ccCs0PLf.s:1849   .text:00000000000007fc .L0 
     /tmp/ccCs0PLf.s:1854   .text:0000000000000800 .L0 
     /tmp/ccCs0PLf.s:1855   .text:0000000000000800 .L0 
   src/Interrupt.cpp:269    .text:0000000000000800 .L0 
     /tmp/ccCs0PLf.s:1865   .text:0000000000000804 .L0 
     /tmp/ccCs0PLf.s:1866   .text:0000000000000808 .L0 
GAS LISTING /tmp/ccCs0PLf.s 			page 68


     /tmp/ccCs0PLf.s:1867   .text:0000000000000808 .L0 
     /tmp/ccCs0PLf.s:1869   .text:000000000000080c .L0 
     /tmp/ccCs0PLf.s:1871   .text:0000000000000810 .L0 
     /tmp/ccCs0PLf.s:1877   .text:0000000000000810 _ZN9Interrupt10popSppSpieEv
     /tmp/ccCs0PLf.s:1880   .text:0000000000000810 .L0 
     /tmp/ccCs0PLf.s:1881   .text:0000000000000810 .L0 
     /tmp/ccCs0PLf.s:1882   .text:0000000000000814 .L0 
     /tmp/ccCs0PLf.s:1884   .text:0000000000000818 .L0 
     /tmp/ccCs0PLf.s:1886   .text:000000000000081c .L0 
     /tmp/ccCs0PLf.s:1888   .text:000000000000081c .L0 
   src/Interrupt.cpp:339    .text:000000000000081c .L0 
     /tmp/ccCs0PLf.s:1894   .text:0000000000000820 .L0 
   src/Interrupt.cpp:340    .text:0000000000000820 .L0 
     /tmp/ccCs0PLf.s:1900   .text:0000000000000824 .L0 
     /tmp/ccCs0PLf.s:1901   .text:0000000000000828 .L0 
     /tmp/ccCs0PLf.s:1902   .text:0000000000000828 .L0 
     /tmp/ccCs0PLf.s:1904   .text:000000000000082c .L0 
     /tmp/ccCs0PLf.s:1906   .text:0000000000000830 .L0 
     /tmp/ccCs0PLf.s:1912   .text:0000000000000830 _ZN9Interrupt4lockEv
     /tmp/ccCs0PLf.s:1915   .text:0000000000000830 .L0 
     /tmp/ccCs0PLf.s:1916   .text:0000000000000830 .L0 
     /tmp/ccCs0PLf.s:1917   .text:0000000000000830 .L0 
     /tmp/ccCs0PLf.s:1918   .text:0000000000000830 .L0 
     /tmp/ccCs0PLf.s:1923   .text:0000000000000844 .L0 
     /tmp/ccCs0PLf.s:1927   .text:000000000000084c .L0 
     /tmp/ccCs0PLf.s:1928   .text:0000000000000850 .L0 
     /tmp/ccCs0PLf.s:1931   .text:0000000000000858 .L0 
     /tmp/ccCs0PLf.s:1932   .text:0000000000000858 .L0 
     /tmp/ccCs0PLf.s:1934   .text:000000000000085c .L0 
     /tmp/ccCs0PLf.s:1936   .text:000000000000085c .L0 
     /tmp/ccCs0PLf.s:1937   .text:000000000000085c .L0 
     /tmp/ccCs0PLf.s:1940   .text:0000000000000864 .L0 
     /tmp/ccCs0PLf.s:1945   .text:000000000000086c .L0 
     /tmp/ccCs0PLf.s:1946   .text:000000000000086c .L0 
     /tmp/ccCs0PLf.s:1947   .text:000000000000086c .L0 
     /tmp/ccCs0PLf.s:1957   .text:0000000000000874 .L0 
     /tmp/ccCs0PLf.s:1958   .text:0000000000000878 .L0 
     /tmp/ccCs0PLf.s:1960   .text:000000000000087c .L0 
     /tmp/ccCs0PLf.s:1961   .text:000000000000087c .L0 
     /tmp/ccCs0PLf.s:1963   .text:0000000000000880 .L0 
     /tmp/ccCs0PLf.s:1965   .text:0000000000000884 .L0 
     /tmp/ccCs0PLf.s:1971   .text:0000000000000884 _ZN9Interrupt6unlockEv
     /tmp/ccCs0PLf.s:1974   .text:0000000000000884 .L0 
     /tmp/ccCs0PLf.s:1975   .text:0000000000000884 .L0 
     /tmp/ccCs0PLf.s:1976   .text:0000000000000888 .L0 
     /tmp/ccCs0PLf.s:1978   .text:000000000000088c .L0 
     /tmp/ccCs0PLf.s:1980   .text:0000000000000890 .L0 
     /tmp/ccCs0PLf.s:1982   .text:0000000000000890 .L0 
     /tmp/ccCs0PLf.s:1983   .text:0000000000000890 .L0 
     /tmp/ccCs0PLf.s:1988   .text:00000000000008a4 .L0 
     /tmp/ccCs0PLf.s:1990   .text:00000000000008a8 .L0 
     /tmp/ccCs0PLf.s:1992   .text:00000000000008ac .L0 
     /tmp/ccCs0PLf.s:1993   .text:00000000000008ac .L0 
     /tmp/ccCs0PLf.s:1995   .text:00000000000008b4 .L0 
     /tmp/ccCs0PLf.s:2001   .text:00000000000008bc .L0 
   src/Interrupt.cpp:246    .text:00000000000008bc .L0 
     /tmp/ccCs0PLf.s:2012   .text:00000000000008c0 .L0 
GAS LISTING /tmp/ccCs0PLf.s 			page 69


     /tmp/ccCs0PLf.s:2013   .text:00000000000008c4 .L0 
     /tmp/ccCs0PLf.s:2014   .text:00000000000008c4 .L0 
     /tmp/ccCs0PLf.s:2016   .text:00000000000008c8 .L0 
     /tmp/ccCs0PLf.s:2018   .text:00000000000008cc .L0 
     /tmp/ccCs0PLf.s:2024   .text:00000000000008cc _ZN9Interrupt13disable_sintrEv
     /tmp/ccCs0PLf.s:2027   .text:00000000000008cc .L0 
     /tmp/ccCs0PLf.s:2028   .text:00000000000008cc .L0 
     /tmp/ccCs0PLf.s:2029   .text:00000000000008d0 .L0 
     /tmp/ccCs0PLf.s:2031   .text:00000000000008d4 .L0 
     /tmp/ccCs0PLf.s:2033   .text:00000000000008d8 .L0 
     /tmp/ccCs0PLf.s:2038   .text:00000000000008d8 .L0 
     /tmp/ccCs0PLf.s:2039   .text:00000000000008d8 .L0 
     /tmp/ccCs0PLf.s:2040   .text:00000000000008d8 .L0 
     /tmp/ccCs0PLf.s:2050   .text:00000000000008e0 .L0 
     /tmp/ccCs0PLf.s:2051   .text:00000000000008e4 .L0 
     /tmp/ccCs0PLf.s:2052   .text:00000000000008e4 .L0 
     /tmp/ccCs0PLf.s:2054   .text:00000000000008e8 .L0 
     /tmp/ccCs0PLf.s:2056   .text:00000000000008ec .L0 
     /tmp/ccCs0PLf.s:2062   .text:00000000000008ec _ZN9Interrupt12enable_sintrEv
     /tmp/ccCs0PLf.s:2065   .text:00000000000008ec .L0 
     /tmp/ccCs0PLf.s:2066   .text:00000000000008ec .L0 
     /tmp/ccCs0PLf.s:2067   .text:00000000000008f0 .L0 
     /tmp/ccCs0PLf.s:2069   .text:00000000000008f4 .L0 
     /tmp/ccCs0PLf.s:2071   .text:00000000000008f8 .L0 
     /tmp/ccCs0PLf.s:2076   .text:00000000000008f8 .L0 
     /tmp/ccCs0PLf.s:2077   .text:00000000000008f8 .L0 
     /tmp/ccCs0PLf.s:2078   .text:00000000000008f8 .L0 
     /tmp/ccCs0PLf.s:2088   .text:0000000000000900 .L0 
     /tmp/ccCs0PLf.s:2089   .text:0000000000000904 .L0 
     /tmp/ccCs0PLf.s:2090   .text:0000000000000904 .L0 
     /tmp/ccCs0PLf.s:2092   .text:0000000000000908 .L0 
     /tmp/ccCs0PLf.s:2094   .text:000000000000090c .L0 
     /tmp/ccCs0PLf.s:2100   .text:000000000000090c _ZN9Interrupt12userMaskSoftEv
     /tmp/ccCs0PLf.s:2103   .text:000000000000090c .L0 
     /tmp/ccCs0PLf.s:2104   .text:000000000000090c .L0 
     /tmp/ccCs0PLf.s:2105   .text:0000000000000910 .L0 
     /tmp/ccCs0PLf.s:2107   .text:0000000000000914 .L0 
     /tmp/ccCs0PLf.s:2109   .text:0000000000000918 .L0 
     /tmp/ccCs0PLf.s:2112   .text:0000000000000918 .L0 
     /tmp/ccCs0PLf.s:2113   .text:0000000000000918 .L0 
     /tmp/ccCs0PLf.s:2114   .text:0000000000000918 .L0 
     /tmp/ccCs0PLf.s:2121   .text:0000000000000920 .L0 
     /tmp/ccCs0PLf.s:2122   .text:0000000000000924 .L0 
     /tmp/ccCs0PLf.s:2123   .text:0000000000000924 .L0 
     /tmp/ccCs0PLf.s:2125   .text:0000000000000928 .L0 
     /tmp/ccCs0PLf.s:2127   .text:000000000000092c .L0 
     /tmp/ccCs0PLf.s:2133   .text:000000000000092c _ZN9Interrupt12userMaskHardEv
     /tmp/ccCs0PLf.s:2136   .text:000000000000092c .L0 
     /tmp/ccCs0PLf.s:2137   .text:000000000000092c .L0 
     /tmp/ccCs0PLf.s:2138   .text:0000000000000930 .L0 
     /tmp/ccCs0PLf.s:2140   .text:0000000000000934 .L0 
     /tmp/ccCs0PLf.s:2142   .text:0000000000000938 .L0 
     /tmp/ccCs0PLf.s:2145   .text:0000000000000938 .L0 
     /tmp/ccCs0PLf.s:2146   .text:0000000000000938 .L0 
     /tmp/ccCs0PLf.s:2147   .text:0000000000000938 .L0 
     /tmp/ccCs0PLf.s:2154   .text:0000000000000940 .L0 
     /tmp/ccCs0PLf.s:2155   .text:0000000000000944 .L0 
GAS LISTING /tmp/ccCs0PLf.s 			page 70


     /tmp/ccCs0PLf.s:2156   .text:0000000000000944 .L0 
     /tmp/ccCs0PLf.s:2158   .text:0000000000000948 .L0 
     /tmp/ccCs0PLf.s:2160   .text:000000000000094c .L0 
     /tmp/ccCs0PLf.s:2166   .text:000000000000094c _ZN9Interrupt14userUnmaskSoftEv
     /tmp/ccCs0PLf.s:2169   .text:000000000000094c .L0 
     /tmp/ccCs0PLf.s:2170   .text:000000000000094c .L0 
     /tmp/ccCs0PLf.s:2171   .text:0000000000000950 .L0 
     /tmp/ccCs0PLf.s:2173   .text:0000000000000954 .L0 
     /tmp/ccCs0PLf.s:2175   .text:0000000000000958 .L0 
     /tmp/ccCs0PLf.s:2178   .text:0000000000000958 .L0 
     /tmp/ccCs0PLf.s:2179   .text:0000000000000958 .L0 
     /tmp/ccCs0PLf.s:2180   .text:0000000000000958 .L0 
     /tmp/ccCs0PLf.s:2187   .text:0000000000000960 .L0 
     /tmp/ccCs0PLf.s:2188   .text:0000000000000964 .L0 
     /tmp/ccCs0PLf.s:2189   .text:0000000000000964 .L0 
     /tmp/ccCs0PLf.s:2191   .text:0000000000000968 .L0 
     /tmp/ccCs0PLf.s:2193   .text:000000000000096c .L0 
     /tmp/ccCs0PLf.s:2199   .text:000000000000096c _ZN9Interrupt14userUnmaskHardEv
     /tmp/ccCs0PLf.s:2202   .text:000000000000096c .L0 
     /tmp/ccCs0PLf.s:2203   .text:000000000000096c .L0 
     /tmp/ccCs0PLf.s:2204   .text:0000000000000970 .L0 
     /tmp/ccCs0PLf.s:2206   .text:0000000000000974 .L0 
     /tmp/ccCs0PLf.s:2208   .text:0000000000000978 .L0 
     /tmp/ccCs0PLf.s:2211   .text:0000000000000978 .L0 
     /tmp/ccCs0PLf.s:2212   .text:0000000000000978 .L0 
     /tmp/ccCs0PLf.s:2213   .text:0000000000000978 .L0 
     /tmp/ccCs0PLf.s:2220   .text:0000000000000980 .L0 
     /tmp/ccCs0PLf.s:2221   .text:0000000000000984 .L0 
     /tmp/ccCs0PLf.s:2222   .text:0000000000000984 .L0 
     /tmp/ccCs0PLf.s:2224   .text:0000000000000988 .L0 
     /tmp/ccCs0PLf.s:2226   .text:000000000000098c .L0 
     /tmp/ccCs0PLf.s:2232   .text:000000000000098c _ZN9Interrupt19switchToSystemStackEv
     /tmp/ccCs0PLf.s:2235   .text:000000000000098c .L0 
     /tmp/ccCs0PLf.s:2236   .text:000000000000098c .L0 
     /tmp/ccCs0PLf.s:2238   .text:000000000000098c .L0 
     /tmp/ccCs0PLf.s:2239   .text:000000000000098c .L0 
     /tmp/ccCs0PLf.s:2242   .text:0000000000000998 .L0 
     /tmp/ccCs0PLf.s:2244   .text:000000000000099c .L0 
     /tmp/ccCs0PLf.s:2251   .text:00000000000009ac .L0 
     /tmp/ccCs0PLf.s:2252   .text:00000000000009b0 .L0 
     /tmp/ccCs0PLf.s:2256   .text:00000000000009bc .L0 
     /tmp/ccCs0PLf.s:2257   .text:00000000000009bc .L0 
     /tmp/ccCs0PLf.s:2258   .text:00000000000009bc .L0 
     /tmp/ccCs0PLf.s:2260   .text:00000000000009c0 .L0 
     /tmp/ccCs0PLf.s:2264   .text:00000000000009c0 .L0 
     /tmp/ccCs0PLf.s:2265   .text:00000000000009c0 .L0 
     /tmp/ccCs0PLf.s:2270   .text:00000000000009cc .L0 
   src/Interrupt.cpp:391    .text:00000000000009cc .L0 
     /tmp/ccCs0PLf.s:2277   .text:00000000000009d0 .L0 
     /tmp/ccCs0PLf.s:2279   .text:00000000000009d0 .L0 
     /tmp/ccCs0PLf.s:2284   .text:00000000000009e4 .L0 
   src/Interrupt.cpp:393    .text:00000000000009e4 .L0 
     /tmp/ccCs0PLf.s:2293   .text:00000000000009e8 .L0 
     /tmp/ccCs0PLf.s:2294   .text:00000000000009ec .L0 
     /tmp/ccCs0PLf.s:2296   .text:00000000000009f0 .L0 
     /tmp/ccCs0PLf.s:2297   .text:00000000000009f0 .L0 
     /tmp/ccCs0PLf.s:2299   .text:00000000000009f4 .L0 
GAS LISTING /tmp/ccCs0PLf.s 			page 71


     /tmp/ccCs0PLf.s:2302   .text:00000000000009f8 .L0 
     /tmp/ccCs0PLf.s:2304   .text:00000000000009fc .L0 
     /tmp/ccCs0PLf.s:2310   .text:00000000000009fc _ZN9Interrupt17switchToUserStackEv
     /tmp/ccCs0PLf.s:2313   .text:00000000000009fc .L0 
     /tmp/ccCs0PLf.s:2314   .text:00000000000009fc .L0 
     /tmp/ccCs0PLf.s:2316   .text:00000000000009fc .L0 
     /tmp/ccCs0PLf.s:2317   .text:00000000000009fc .L0 
     /tmp/ccCs0PLf.s:2320   .text:0000000000000a08 .L0 
     /tmp/ccCs0PLf.s:2322   .text:0000000000000a0c .L0 
     /tmp/ccCs0PLf.s:2329   .text:0000000000000a1c .L0 
     /tmp/ccCs0PLf.s:2330   .text:0000000000000a20 .L0 
     /tmp/ccCs0PLf.s:2334   .text:0000000000000a2c .L0 
     /tmp/ccCs0PLf.s:2335   .text:0000000000000a2c .L0 
     /tmp/ccCs0PLf.s:2336   .text:0000000000000a2c .L0 
     /tmp/ccCs0PLf.s:2338   .text:0000000000000a30 .L0 
     /tmp/ccCs0PLf.s:2342   .text:0000000000000a30 .L0 
     /tmp/ccCs0PLf.s:2343   .text:0000000000000a30 .L0 
     /tmp/ccCs0PLf.s:2348   .text:0000000000000a3c .L0 
     /tmp/ccCs0PLf.s:2349   .text:0000000000000a3c .L0 
   src/Interrupt.cpp:403    .text:0000000000000a3c .L0 
     /tmp/ccCs0PLf.s:2356   .text:0000000000000a40 .L0 
     /tmp/ccCs0PLf.s:2358   .text:0000000000000a40 .L0 
     /tmp/ccCs0PLf.s:2363   .text:0000000000000a54 .L0 
   src/Interrupt.cpp:405    .text:0000000000000a54 .L0 
     /tmp/ccCs0PLf.s:2372   .text:0000000000000a58 .L0 
     /tmp/ccCs0PLf.s:2373   .text:0000000000000a5c .L0 
     /tmp/ccCs0PLf.s:2375   .text:0000000000000a60 .L0 
     /tmp/ccCs0PLf.s:2376   .text:0000000000000a60 .L0 
     /tmp/ccCs0PLf.s:2378   .text:0000000000000a64 .L0 
     /tmp/ccCs0PLf.s:2381   .text:0000000000000a68 .L0 
     /tmp/ccCs0PLf.s:2383   .text:0000000000000a6c .L0 
     /tmp/ccCs0PLf.s:2405   .bss:0000000000000000 _ZN9Interrupt17enableSystemStackE
     /tmp/ccCs0PLf.s:2394   .data:0000000000000000 _ZN9Interrupt8lock_varE
     /tmp/ccCs0PLf.s:2399   .data:0000000000000008 _ZN9Interrupt11prevSstatusE
     /tmp/ccCs0PLf.s:2391   .data:0000000000000000 .LANCHOR0
     /tmp/ccCs0PLf.s:2402   .bss:0000000000000000 .LANCHOR1
     /tmp/ccCs0PLf.s:2418   .text:0000000000000a6c .L0 
     /tmp/ccCs0PLf.s:344    .text:00000000000000b4 .L0 
     /tmp/ccCs0PLf.s:349    .text:00000000000000c4 .L0 
     /tmp/ccCs0PLf.s:597    .text:0000000000000284 .L0 
     /tmp/ccCs0PLf.s:639    .text:00000000000002c4 .L0 
     /tmp/ccCs0PLf.s:657    .text:00000000000002d4 .L0 
     /tmp/ccCs0PLf.s:699    .text:0000000000000308 .L0 
     /tmp/ccCs0PLf.s:820    .text:00000000000003b4 .L0 
     /tmp/ccCs0PLf.s:911    .text:000000000000041c .L0 
     /tmp/ccCs0PLf.s:935    .text:000000000000043c .L0 
     /tmp/ccCs0PLf.s:958    .text:000000000000045c .L0 
     /tmp/ccCs0PLf.s:1007   .text:0000000000000494 .L0 
     /tmp/ccCs0PLf.s:1011   .text:00000000000004a0 .L0 
     /tmp/ccCs0PLf.s:1026   .text:00000000000004c0 .L0 
     /tmp/ccCs0PLf.s:1588   .text:0000000000000664 .L0 
     /tmp/ccCs0PLf.s:1612   .text:0000000000000698 .L0 
     /tmp/ccCs0PLf.s:1621   .text:00000000000006b0 .L0 
     /tmp/ccCs0PLf.s:1633   .text:00000000000006d0 .L0 
     /tmp/ccCs0PLf.s:1640   .text:00000000000006e8 .L0 
     /tmp/ccCs0PLf.s:1650   .text:0000000000000700 .L0 
     /tmp/ccCs0PLf.s:1657   .text:0000000000000714 .L0 
GAS LISTING /tmp/ccCs0PLf.s 			page 72


     /tmp/ccCs0PLf.s:1710   .text:000000000000074c .L0 
     /tmp/ccCs0PLf.s:1769   .text:0000000000000798 .L0 
     /tmp/ccCs0PLf.s:1786   .text:00000000000007b8 .L0 
     /tmp/ccCs0PLf.s:1792   .text:00000000000007c8 .L0 
     /tmp/ccCs0PLf.s:1918   .text:0000000000000830 .L0 
     /tmp/ccCs0PLf.s:1940   .text:0000000000000864 .L0 
     /tmp/ccCs0PLf.s:1983   .text:0000000000000890 .L0 
     /tmp/ccCs0PLf.s:1993   .text:00000000000008ac .L0 
     /tmp/ccCs0PLf.s:2239   .text:000000000000098c .L0 
     /tmp/ccCs0PLf.s:2244   .text:000000000000099c .L0 
     /tmp/ccCs0PLf.s:2279   .text:00000000000009d0 .L0 
     /tmp/ccCs0PLf.s:2317   .text:00000000000009fc .L0 
     /tmp/ccCs0PLf.s:2322   .text:0000000000000a0c .L0 
     /tmp/ccCs0PLf.s:2358   .text:0000000000000a40 .L0 
     /tmp/ccCs0PLf.s:380    .text:00000000000000e0 .L32
     /tmp/ccCs0PLf.s:438    .text:0000000000000128 .L33
     /tmp/ccCs0PLf.s:460    .text:000000000000013c .L34
     /tmp/ccCs0PLf.s:539    .text:00000000000001ec .L35
     /tmp/ccCs0PLf.s:643    .text:00000000000002d4 .L36
     /tmp/ccCs0PLf.s:693    .text:0000000000000308 .L37
     /tmp/ccCs0PLf.s:707    .text:0000000000000320 .L38
     /tmp/ccCs0PLf.s:765    .text:000000000000037c .L39
     /tmp/ccCs0PLf.s:803    .text:00000000000003a4 .L40
     /tmp/ccCs0PLf.s:860    .text:00000000000003e8 .L41
     /tmp/ccCs0PLf.s:898    .text:0000000000000410 .L42
     /tmp/ccCs0PLf.s:929    .text:000000000000043c .L43
     /tmp/ccCs0PLf.s:951    .text:0000000000000458 .L44
     /tmp/ccCs0PLf.s:966    .text:0000000000000474 .L45
     /tmp/ccCs0PLf.s:982    .text:0000000000000480 .L46
     /tmp/ccCs0PLf.s:413    .text:0000000000000104 .L1
     /tmp/ccCs0PLf.s:1000   .text:0000000000000494 .L47
     /tmp/ccCs0PLf.s:527    .text:00000000000001e0 .L48
     /tmp/ccCs0PLf.s:620    .text:00000000000002b0 .L49
     /tmp/ccCs0PLf.s:632    .text:00000000000002bc .L50
     /tmp/ccCs0PLf.s:608    .text:00000000000002a4 .L10
     /tmp/ccCs0PLf.s:680    .text:00000000000002fc .L12
     /tmp/ccCs0PLf.s:753    .text:0000000000000370 .L51
     /tmp/ccCs0PLf.s:791    .text:0000000000000398 .L17
     /tmp/ccCs0PLf.s:848    .text:00000000000003dc .L19
     /tmp/ccCs0PLf.s:836    .text:00000000000003d0 .L20
     /tmp/ccCs0PLf.s:886    .text:0000000000000404 .L22
     /tmp/ccCs0PLf.s:354    .text:00000000000000d4 .L29
     /tmp/ccCs0PLf.s:1016   .text:00000000000004b4 .L30
     /tmp/ccCs0PLf.s:1441   .text:0000000000000618 .L81
     /tmp/ccCs0PLf.s:1541   .text:000000000000064c .L82
     /tmp/ccCs0PLf.s:1737   .text:0000000000000774 .L83
     /tmp/ccCs0PLf.s:1422   .text:0000000000000600 .L68
     /tmp/ccCs0PLf.s:1585   .text:0000000000000664 .L72
     /tmp/ccCs0PLf.s:1607   .text:0000000000000698 .L73
     /tmp/ccCs0PLf.s:1646   .text:0000000000000700 .L74
     /tmp/ccCs0PLf.s:1594   .text:000000000000067c .L75
     /tmp/ccCs0PLf.s:1682   .text:000000000000073c .L84
     /tmp/ccCs0PLf.s:1665   .text:0000000000000730 .L77
     /tmp/ccCs0PLf.s:1763   .text:0000000000000798 .L85
     /tmp/ccCs0PLf.s:1753   .text:0000000000000788 .L78
     /tmp/ccCs0PLf.s:1775   .text:00000000000007ac .L79
     /tmp/ccCs0PLf.s:1925   .text:000000000000084c .L96
GAS LISTING /tmp/ccCs0PLf.s 			page 73


     /tmp/ccCs0PLf.s:2008   .text:00000000000008c0 .L97
     /tmp/ccCs0PLf.s:2246   .text:00000000000009a8 .L115
     /tmp/ccCs0PLf.s:2248   .text:00000000000009ac .L118
     /tmp/ccCs0PLf.s:2324   .text:0000000000000a18 .L122
     /tmp/ccCs0PLf.s:2326   .text:0000000000000a1c .L125
     /tmp/ccCs0PLf.s:5721   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccCs0PLf.s:8761   .debug_str:0000000000000cd2 .LASF263
     /tmp/ccCs0PLf.s:8769   .debug_str:0000000000000dcb .LASF264
     /tmp/ccCs0PLf.s:8785   .debug_str:0000000000000e62 .LASF265
     /tmp/ccCs0PLf.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccCs0PLf.s:2408   .text:0000000000000a6c .Letext0
     /tmp/ccCs0PLf.s:8319   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccCs0PLf.s:8529   .debug_str:0000000000000616 .LASF0
     /tmp/ccCs0PLf.s:8567   .debug_str:000000000000072c .LASF1
     /tmp/ccCs0PLf.s:8687   .debug_str:0000000000000ad5 .LASF2
     /tmp/ccCs0PLf.s:8699   .debug_str:0000000000000b35 .LASF4
     /tmp/ccCs0PLf.s:8543   .debug_str:0000000000000668 .LASF3
     /tmp/ccCs0PLf.s:8339   .debug_str:000000000000007e .LASF5
     /tmp/ccCs0PLf.s:8661   .debug_str:00000000000009f7 .LASF6
     /tmp/ccCs0PLf.s:8647   .debug_str:000000000000097e .LASF7
     /tmp/ccCs0PLf.s:8555   .debug_str:00000000000006d3 .LASF8
     /tmp/ccCs0PLf.s:8485   .debug_str:000000000000049b .LASF9
     /tmp/ccCs0PLf.s:8497   .debug_str:00000000000004ed .LASF10
     /tmp/ccCs0PLf.s:8385   .debug_str:00000000000001fa .LASF11
     /tmp/ccCs0PLf.s:8471   .debug_str:000000000000044a .LASF12
     /tmp/ccCs0PLf.s:8407   .debug_str:00000000000002a0 .LASF13
     /tmp/ccCs0PLf.s:8383   .debug_str:00000000000001ea .LASF14
     /tmp/ccCs0PLf.s:8731   .debug_str:0000000000000c07 .LASF15
     /tmp/ccCs0PLf.s:8449   .debug_str:00000000000003b7 .LASF16
     /tmp/ccCs0PLf.s:8721   .debug_str:0000000000000bc1 .LASF17
     /tmp/ccCs0PLf.s:8635   .debug_str:000000000000092b .LASF18
     /tmp/ccCs0PLf.s:8619   .debug_str:00000000000008d2 .LASF21
     /tmp/ccCs0PLf.s:8361   .debug_str:0000000000000162 .LASF19
     /tmp/ccCs0PLf.s:8819   .debug_str:0000000000000f61 .LASF20
     /tmp/ccCs0PLf.s:8559   .debug_str:00000000000006ff .LASF22
     /tmp/ccCs0PLf.s:8729   .debug_str:0000000000000c02 .LASF23
     /tmp/ccCs0PLf.s:8839   .debug_str:0000000000000feb .LASF24
     /tmp/ccCs0PLf.s:8639   .debug_str:0000000000000950 .LASF27
     /tmp/ccCs0PLf.s:8601   .debug_str:000000000000082d .LASF28
     /tmp/ccCs0PLf.s:8343   .debug_str:000000000000008d .LASF30
     /tmp/ccCs0PLf.s:8741   .debug_str:0000000000000c4c .LASF63
     /tmp/ccCs0PLf.s:8603   .debug_str:0000000000000837 .LASF65
     /tmp/ccCs0PLf.s:8771   .debug_str:0000000000000ddd .LASF266
     /tmp/ccCs0PLf.s:8399   .debug_str:0000000000000270 .LASF25
     /tmp/ccCs0PLf.s:8387   .debug_str:0000000000000209 .LASF26
     /tmp/ccCs0PLf.s:8395   .debug_str:000000000000024a .LASF267
     /tmp/ccCs0PLf.s:8823   .debug_str:0000000000000f77 .LASF32
     /tmp/ccCs0PLf.s:8589   .debug_str:00000000000007e0 .LASF36
     /tmp/ccCs0PLf.s:8469   .debug_str:0000000000000438 .LASF38
     /tmp/ccCs0PLf.s:8437   .debug_str:0000000000000358 .LASF29
     /tmp/ccCs0PLf.s:8781   .debug_str:0000000000000e34 .LASF31
     /tmp/ccCs0PLf.s:8607   .debug_str:000000000000085e .LASF103
     /tmp/ccCs0PLf.s:8633   .debug_str:0000000000000926 .LASF268
     /tmp/ccCs0PLf.s:8757   .debug_str:0000000000000cb7 .LASF33
     /tmp/ccCs0PLf.s:8365   .debug_str:0000000000000183 .LASF34
     /tmp/ccCs0PLf.s:8503   .debug_str:0000000000000523 .LASF35
     /tmp/ccCs0PLf.s:8501   .debug_str:0000000000000515 .LASF37
GAS LISTING /tmp/ccCs0PLf.s 			page 74


     /tmp/ccCs0PLf.s:8569   .debug_str:000000000000073f .LASF39
     /tmp/ccCs0PLf.s:8787   .debug_str:0000000000000e85 .LASF40
     /tmp/ccCs0PLf.s:8493   .debug_str:00000000000004cb .LASF41
     /tmp/ccCs0PLf.s:8525   .debug_str:0000000000000602 .LASF42
     /tmp/ccCs0PLf.s:8557   .debug_str:00000000000006e6 .LASF43
     /tmp/ccCs0PLf.s:8429   .debug_str:000000000000032e .LASF145
     /tmp/ccCs0PLf.s:8349   .debug_str:00000000000000dc .LASF147
     /tmp/ccCs0PLf.s:8341   .debug_str:0000000000000085 .LASF44
     /tmp/ccCs0PLf.s:8759   .debug_str:0000000000000cbf .LASF45
     /tmp/ccCs0PLf.s:8643   .debug_str:0000000000000969 .LASF46
     /tmp/ccCs0PLf.s:8701   .debug_str:0000000000000b3c .LASF47
     /tmp/ccCs0PLf.s:8849   .debug_str:0000000000001032 .LASF48
     /tmp/ccCs0PLf.s:8595   .debug_str:000000000000080d .LASF49
     /tmp/ccCs0PLf.s:8455   .debug_str:00000000000003ea .LASF68
     /tmp/ccCs0PLf.s:8679   .debug_str:0000000000000a95 .LASF70
     /tmp/ccCs0PLf.s:8353   .debug_str:0000000000000109 .LASF50
     /tmp/ccCs0PLf.s:8707   .debug_str:0000000000000b67 .LASF51
     /tmp/ccCs0PLf.s:8861   .debug_str:000000000000106a .LASF52
     /tmp/ccCs0PLf.s:8733   .debug_str:0000000000000c13 .LASF53
     /tmp/ccCs0PLf.s:8747   .debug_str:0000000000000c7c .LASF54
     /tmp/ccCs0PLf.s:8583   .debug_str:00000000000007b9 .LASF55
     /tmp/ccCs0PLf.s:8737   .debug_str:0000000000000c32 .LASF56
     /tmp/ccCs0PLf.s:8751   .debug_str:0000000000000c8c .LASF57
     /tmp/ccCs0PLf.s:8755   .debug_str:0000000000000cb0 .LASF58
     /tmp/ccCs0PLf.s:8577   .debug_str:000000000000078e .LASF59
     /tmp/ccCs0PLf.s:8413   .debug_str:00000000000002d0 .LASF60
     /tmp/ccCs0PLf.s:8427   .debug_str:0000000000000321 .LASF61
     /tmp/ccCs0PLf.s:8695   .debug_str:0000000000000b13 .LASF62
     /tmp/ccCs0PLf.s:8573   .debug_str:000000000000076f .LASF64
     /tmp/ccCs0PLf.s:8649   .debug_str:0000000000000991 .LASF66
     /tmp/ccCs0PLf.s:8645   .debug_str:0000000000000971 .LASF80
     /tmp/ccCs0PLf.s:8421   .debug_str:0000000000000308 .LASF67
     /tmp/ccCs0PLf.s:8753   .debug_str:0000000000000c9c .LASF69
     /tmp/ccCs0PLf.s:8613   .debug_str:000000000000088b .LASF71
     /tmp/ccCs0PLf.s:8379   .debug_str:00000000000001d9 .LASF72
     /tmp/ccCs0PLf.s:8845   .debug_str:000000000000100c .LASF73
     /tmp/ccCs0PLf.s:8425   .debug_str:000000000000031b .LASF74
     /tmp/ccCs0PLf.s:8797   .debug_str:0000000000000ed4 .LASF75
     /tmp/ccCs0PLf.s:8609   .debug_str:0000000000000875 .LASF76
     /tmp/ccCs0PLf.s:8655   .debug_str:00000000000009c0 .LASF77
     /tmp/ccCs0PLf.s:8335   .debug_str:0000000000000058 .LASF78
     /tmp/ccCs0PLf.s:8509   .debug_str:0000000000000567 .LASF79
     /tmp/ccCs0PLf.s:8599   .debug_str:0000000000000822 .LASF81
     /tmp/ccCs0PLf.s:8703   .debug_str:0000000000000b4e .LASF82
     /tmp/ccCs0PLf.s:8357   .debug_str:000000000000012d .LASF83
     /tmp/ccCs0PLf.s:8743   .debug_str:0000000000000c55 .LASF84
     /tmp/ccCs0PLf.s:8855   .debug_str:0000000000001053 .LASF85
     /tmp/ccCs0PLf.s:8791   .debug_str:0000000000000ea8 .LASF86
     /tmp/ccCs0PLf.s:8807   .debug_str:0000000000000f15 .LASF87
     /tmp/ccCs0PLf.s:8563   .debug_str:0000000000000712 .LASF88
     /tmp/ccCs0PLf.s:8777   .debug_str:0000000000000e11 .LASF89
     /tmp/ccCs0PLf.s:8719   .debug_str:0000000000000bb8 .LASF90
     /tmp/ccCs0PLf.s:8691   .debug_str:0000000000000b01 .LASF91
     /tmp/ccCs0PLf.s:8505   .debug_str:000000000000053a .LASF92
     /tmp/ccCs0PLf.s:8605   .debug_str:0000000000000858 .LASF93
     /tmp/ccCs0PLf.s:8329   .debug_str:0000000000000042 .LASF94
     /tmp/ccCs0PLf.s:8371   .debug_str:00000000000001a1 .LASF269
GAS LISTING /tmp/ccCs0PLf.s 			page 75


     /tmp/ccCs0PLf.s:8355   .debug_str:0000000000000114 .LASF270
     /tmp/ccCs0PLf.s:8417   .debug_str:00000000000002ee .LASF95
     /tmp/ccCs0PLf.s:8359   .debug_str:000000000000013a .LASF97
     /tmp/ccCs0PLf.s:8381   .debug_str:00000000000001e0 .LASF96
     /tmp/ccCs0PLf.s:8481   .debug_str:000000000000047d .LASF98
     /tmp/ccCs0PLf.s:8537   .debug_str:000000000000064b .LASF185
     /tmp/ccCs0PLf.s:8775   .debug_str:0000000000000dfd .LASF271
     /tmp/ccCs0PLf.s:8641   .debug_str:0000000000000960 .LASF99
     /tmp/ccCs0PLf.s:8727   .debug_str:0000000000000bfd .LASF100
     /tmp/ccCs0PLf.s:8621   .debug_str:00000000000008db .LASF101
     /tmp/ccCs0PLf.s:8627   .debug_str:0000000000000904 .LASF102
     /tmp/ccCs0PLf.s:8521   .debug_str:00000000000005c6 .LASF104
     /tmp/ccCs0PLf.s:8531   .debug_str:0000000000000623 .LASF230
     /tmp/ccCs0PLf.s:8475   .debug_str:0000000000000460 .LASF105
     /tmp/ccCs0PLf.s:8517   .debug_str:00000000000005a4 .LASF106
     /tmp/ccCs0PLf.s:8835   .debug_str:0000000000000fd8 .LASF107
     /tmp/ccCs0PLf.s:8549   .debug_str:000000000000069f .LASF108
     /tmp/ccCs0PLf.s:8675   .debug_str:0000000000000a76 .LASF109
     /tmp/ccCs0PLf.s:8789   .debug_str:0000000000000e91 .LASF110
     /tmp/ccCs0PLf.s:8717   .debug_str:0000000000000bb0 .LASF111
     /tmp/ccCs0PLf.s:8327   .debug_str:000000000000002b .LASF112
     /tmp/ccCs0PLf.s:8323   .debug_str:000000000000001c .LASF113
     /tmp/ccCs0PLf.s:8411   .debug_str:00000000000002c4 .LASF114
     /tmp/ccCs0PLf.s:8465   .debug_str:0000000000000424 .LASF115
     /tmp/ccCs0PLf.s:8827   .debug_str:0000000000000f99 .LASF116
     /tmp/ccCs0PLf.s:8373   .debug_str:00000000000001af .LASF117
     /tmp/ccCs0PLf.s:8431   .debug_str:0000000000000337 .LASF118
     /tmp/ccCs0PLf.s:8611   .debug_str:000000000000087c .LASF119
     /tmp/ccCs0PLf.s:8735   .debug_str:0000000000000c2b .LASF120
     /tmp/ccCs0PLf.s:8715   .debug_str:0000000000000b9f .LASF121
     /tmp/ccCs0PLf.s:8519   .debug_str:00000000000005c0 .LASF122
     /tmp/ccCs0PLf.s:8447   .debug_str:00000000000003a7 .LASF123
     /tmp/ccCs0PLf.s:8403   .debug_str:000000000000027e .LASF124
     /tmp/ccCs0PLf.s:8345   .debug_str:00000000000000ae .LASF125
     /tmp/ccCs0PLf.s:8527   .debug_str:0000000000000610 .LASF126
     /tmp/ccCs0PLf.s:8551   .debug_str:00000000000006bb .LASF127
     /tmp/ccCs0PLf.s:8331   .debug_str:0000000000000047 .LASF128
     /tmp/ccCs0PLf.s:8763   .debug_str:0000000000000d96 .LASF129
     /tmp/ccCs0PLf.s:8483   .debug_str:0000000000000491 .LASF130
     /tmp/ccCs0PLf.s:8659   .debug_str:00000000000009df .LASF272
     /tmp/ccCs0PLf.s:8851   .debug_str:0000000000001038 .LASF273
     /tmp/ccCs0PLf.s:8457   .debug_str:00000000000003f6 .LASF131
     /tmp/ccCs0PLf.s:8793   .debug_str:0000000000000eb5 .LASF132
     /tmp/ccCs0PLf.s:8843   .debug_str:0000000000000ffa .LASF133
     /tmp/ccCs0PLf.s:8597   .debug_str:000000000000081d .LASF134
     /tmp/ccCs0PLf.s:8749   .debug_str:0000000000000c87 .LASF135
     /tmp/ccCs0PLf.s:8697   .debug_str:0000000000000b2b .LASF136
     /tmp/ccCs0PLf.s:8435   .debug_str:000000000000034a .LASF140
     /tmp/ccCs0PLf.s:8463   .debug_str:0000000000000418 .LASF137
     /tmp/ccCs0PLf.s:8561   .debug_str:0000000000000705 .LASF138
     /tmp/ccCs0PLf.s:8423   .debug_str:000000000000030f .LASF139
     /tmp/ccCs0PLf.s:8671   .debug_str:0000000000000a4f .LASF141
     /tmp/ccCs0PLf.s:8547   .debug_str:0000000000000696 .LASF142
     /tmp/ccCs0PLf.s:8461   .debug_str:000000000000040f .LASF143
     /tmp/ccCs0PLf.s:8841   .debug_str:0000000000000ff1 .LASF144
     /tmp/ccCs0PLf.s:8477   .debug_str:0000000000000468 .LASF146
     /tmp/ccCs0PLf.s:8617   .debug_str:00000000000008b3 .LASF148
GAS LISTING /tmp/ccCs0PLf.s 			page 76


     /tmp/ccCs0PLf.s:8709   .debug_str:0000000000000b7e .LASF149
     /tmp/ccCs0PLf.s:8397   .debug_str:0000000000000252 .LASF150
     /tmp/ccCs0PLf.s:8833   .debug_str:0000000000000fcf .LASF151
     /tmp/ccCs0PLf.s:8857   .debug_str:0000000000001059 .LASF152
     /tmp/ccCs0PLf.s:8847   .debug_str:000000000000101d .LASF153
     /tmp/ccCs0PLf.s:8853   .debug_str:000000000000104c .LASF154
     /tmp/ccCs0PLf.s:8391   .debug_str:0000000000000213 .LASF155
     /tmp/ccCs0PLf.s:8419   .debug_str:00000000000002fc .LASF156
     /tmp/ccCs0PLf.s:8623   .debug_str:00000000000008e0 .LASF157
     /tmp/ccCs0PLf.s:8433   .debug_str:000000000000033c .LASF158
     /tmp/ccCs0PLf.s:8723   .debug_str:0000000000000bd7 .LASF159
     /tmp/ccCs0PLf.s:8553   .debug_str:00000000000006cb .LASF160
     /tmp/ccCs0PLf.s:8745   .debug_str:0000000000000c64 .LASF161
     /tmp/ccCs0PLf.s:8683   .debug_str:0000000000000ab4 .LASF162
     /tmp/ccCs0PLf.s:8663   .debug_str:00000000000009fe .LASF163
     /tmp/ccCs0PLf.s:8681   .debug_str:0000000000000aac .LASF164
     /tmp/ccCs0PLf.s:8685   .debug_str:0000000000000abd .LASF165
     /tmp/ccCs0PLf.s:8333   .debug_str:000000000000004f .LASF166
     /tmp/ccCs0PLf.s:8779   .debug_str:0000000000000e1b .LASF167
     /tmp/ccCs0PLf.s:8441   .debug_str:0000000000000369 .LASF168
     /tmp/ccCs0PLf.s:8665   .debug_str:0000000000000a17 .LASF169
     /tmp/ccCs0PLf.s:8491   .debug_str:00000000000004c1 .LASF170
     /tmp/ccCs0PLf.s:8809   .debug_str:0000000000000f1a .LASF171
     /tmp/ccCs0PLf.s:8325   .debug_str:0000000000000022 .LASF172
     /tmp/ccCs0PLf.s:8363   .debug_str:000000000000016a .LASF173
     /tmp/ccCs0PLf.s:8631   .debug_str:000000000000091c .LASF174
     /tmp/ccCs0PLf.s:8667   .debug_str:0000000000000a30 .LASF175
     /tmp/ccCs0PLf.s:8867   .debug_str:0000000000001086 .LASF176
     /tmp/ccCs0PLf.s:8375   .debug_str:00000000000001bb .LASF177
     /tmp/ccCs0PLf.s:8369   .debug_str:0000000000000197 .LASF178
     /tmp/ccCs0PLf.s:8783   .debug_str:0000000000000e48 .LASF179
     /tmp/ccCs0PLf.s:8803   .debug_str:0000000000000eee .LASF180
     /tmp/ccCs0PLf.s:8575   .debug_str:0000000000000775 .LASF181
     /tmp/ccCs0PLf.s:8539   .debug_str:0000000000000655 .LASF182
     /tmp/ccCs0PLf.s:8499   .debug_str:00000000000004fb .LASF183
     /tmp/ccCs0PLf.s:8651   .debug_str:00000000000009a1 .LASF184
     /tmp/ccCs0PLf.s:8813   .debug_str:0000000000000f3b .LASF186
     /tmp/ccCs0PLf.s:8511   .debug_str:0000000000000577 .LASF187
     /tmp/ccCs0PLf.s:8351   .debug_str:00000000000000ef .LASF188
     /tmp/ccCs0PLf.s:8625   .debug_str:00000000000008fd .LASF189
     /tmp/ccCs0PLf.s:8571   .debug_str:0000000000000758 .LASF190
     /tmp/ccCs0PLf.s:8863   .debug_str:0000000000001077 .LASF191
     /tmp/ccCs0PLf.s:8515   .debug_str:000000000000058c .LASF192
     /tmp/ccCs0PLf.s:8811   .debug_str:0000000000000f34 .LASF193
     /tmp/ccCs0PLf.s:8677   .debug_str:0000000000000a7e .LASF194
     /tmp/ccCs0PLf.s:8581   .debug_str:00000000000007b1 .LASF195
     /tmp/ccCs0PLf.s:8773   .debug_str:0000000000000de5 .LASF196
     /tmp/ccCs0PLf.s:8711   .debug_str:0000000000000b8b .LASF197
     /tmp/ccCs0PLf.s:8831   .debug_str:0000000000000fb8 .LASF198
     /tmp/ccCs0PLf.s:8513   .debug_str:0000000000000581 .LASF199
     /tmp/ccCs0PLf.s:8545   .debug_str:000000000000067a .LASF200
     /tmp/ccCs0PLf.s:8705   .debug_str:0000000000000b60 .LASF201
     /tmp/ccCs0PLf.s:8405   .debug_str:0000000000000289 .LASF202
     /tmp/ccCs0PLf.s:8859   .debug_str:000000000000105e .LASF203
     /tmp/ccCs0PLf.s:8713   .debug_str:0000000000000b92 .LASF204
     /tmp/ccCs0PLf.s:8765   .debug_str:0000000000000da8 .LASF205
     /tmp/ccCs0PLf.s:8821   .debug_str:0000000000000f6a .LASF206
GAS LISTING /tmp/ccCs0PLf.s 			page 77


     /tmp/ccCs0PLf.s:8805   .debug_str:0000000000000ef7 .LASF207
     /tmp/ccCs0PLf.s:8487   .debug_str:00000000000004ab .LASF208
     /tmp/ccCs0PLf.s:8393   .debug_str:000000000000022a .LASF209
     /tmp/ccCs0PLf.s:8459   .debug_str:0000000000000400 .LASF210
     /tmp/ccCs0PLf.s:8337   .debug_str:000000000000005e .LASF211
     /tmp/ccCs0PLf.s:8825   .debug_str:0000000000000f85 .LASF212
     /tmp/ccCs0PLf.s:8523   .debug_str:00000000000005dd .LASF213
     /tmp/ccCs0PLf.s:8565   .debug_str:000000000000071a .LASF214
     /tmp/ccCs0PLf.s:8445   .debug_str:0000000000000384 .LASF215
     /tmp/ccCs0PLf.s:8443   .debug_str:0000000000000372 .LASF216
     /tmp/ccCs0PLf.s:8693   .debug_str:0000000000000b0b .LASF217
     /tmp/ccCs0PLf.s:8321   .debug_str:0000000000000000 .LASF218
     /tmp/ccCs0PLf.s:8587   .debug_str:00000000000007d5 .LASF219
     /tmp/ccCs0PLf.s:8533   .debug_str:0000000000000636 .LASF220
     /tmp/ccCs0PLf.s:8615   .debug_str:00000000000008aa .LASF221
     /tmp/ccCs0PLf.s:8489   .debug_str:00000000000004ba .LASF222
     /tmp/ccCs0PLf.s:8479   .debug_str:0000000000000476 .LASF223
     /tmp/ccCs0PLf.s:8415   .debug_str:00000000000002e9 .LASF224
     /tmp/ccCs0PLf.s:8541   .debug_str:000000000000065f .LASF225
     /tmp/ccCs0PLf.s:8473   .debug_str:0000000000000459 .LASF226
     /tmp/ccCs0PLf.s:8739   .debug_str:0000000000000c38 .LASF227
     /tmp/ccCs0PLf.s:8535   .debug_str:000000000000063f .LASF228
     /tmp/ccCs0PLf.s:8409   .debug_str:00000000000002b0 .LASF229
     /tmp/ccCs0PLf.s:8579   .debug_str:000000000000079b .LASF231
     /tmp/ccCs0PLf.s:8453   .debug_str:00000000000003d4 .LASF232
     /tmp/ccCs0PLf.s:8467   .debug_str:0000000000000430 .LASF233
     /tmp/ccCs0PLf.s:8591   .debug_str:00000000000007e8 .LASF234
     /tmp/ccCs0PLf.s:8495   .debug_str:00000000000004e2 .LASF235
     /tmp/ccCs0PLf.s:8689   .debug_str:0000000000000ae3 .LASF236
     /tmp/ccCs0PLf.s:8673   .debug_str:0000000000000a5a .LASF237
     /tmp/ccCs0PLf.s:8347   .debug_str:00000000000000c4 .LASF238
     /tmp/ccCs0PLf.s:8507   .debug_str:0000000000000545 .LASF239
     /tmp/ccCs0PLf.s:2311   .text:00000000000009fc .LFB42
     /tmp/ccCs0PLf.s:2384   .text:0000000000000a6c .LFE42
     /tmp/ccCs0PLf.s:2340   .text:0000000000000a30 .LBB351
     /tmp/ccCs0PLf.s:2369   .text:0000000000000a58 .LBE351
     /tmp/ccCs0PLf.s:7095   .debug_loc:0000000000000000 .LLST71
     /tmp/ccCs0PLf.s:7102   .debug_loc:0000000000000023 .LLST72
     /tmp/ccCs0PLf.s:2344   .text:0000000000000a38 .LVL153
     /tmp/ccCs0PLf.s:2361   .text:0000000000000a54 .LVL156
     /tmp/ccCs0PLf.s:2233   .text:000000000000098c .LFB41
     /tmp/ccCs0PLf.s:2305   .text:00000000000009fc .LFE41
     /tmp/ccCs0PLf.s:2262   .text:00000000000009c0 .LBB348
     /tmp/ccCs0PLf.s:2290   .text:00000000000009e8 .LBE348
     /tmp/ccCs0PLf.s:7109   .debug_loc:0000000000000046 .LLST69
     /tmp/ccCs0PLf.s:7116   .debug_loc:0000000000000069 .LLST70
     /tmp/ccCs0PLf.s:2266   .text:00000000000009c8 .LVL148
     /tmp/ccCs0PLf.s:2282   .text:00000000000009e4 .LVL151
     /tmp/ccCs0PLf.s:2200   .text:000000000000096c .LFB40
     /tmp/ccCs0PLf.s:2227   .text:000000000000098c .LFE40
     /tmp/ccCs0PLf.s:8815   .debug_str:0000000000000f55 .LASF240
     /tmp/ccCs0PLf.s:2167   .text:000000000000094c .LFB39
     /tmp/ccCs0PLf.s:2194   .text:000000000000096c .LFE39
     /tmp/ccCs0PLf.s:2134   .text:000000000000092c .LFB38
     /tmp/ccCs0PLf.s:2161   .text:000000000000094c .LFE38
     /tmp/ccCs0PLf.s:2101   .text:000000000000090c .LFB37
     /tmp/ccCs0PLf.s:2128   .text:000000000000092c .LFE37
GAS LISTING /tmp/ccCs0PLf.s 			page 78


     /tmp/ccCs0PLf.s:2063   .text:00000000000008ec .LFB35
     /tmp/ccCs0PLf.s:2095   .text:000000000000090c .LFE35
     /tmp/ccCs0PLf.s:2074   .text:00000000000008f8 .LBB345
     /tmp/ccCs0PLf.s:2086   .text:0000000000000900 .LBE345
     /tmp/ccCs0PLf.s:7123   .debug_loc:000000000000008c .LLST68
     /tmp/ccCs0PLf.s:2025   .text:00000000000008cc .LFB34
     /tmp/ccCs0PLf.s:2057   .text:00000000000008ec .LFE34
     /tmp/ccCs0PLf.s:2036   .text:00000000000008d8 .LBB343
     /tmp/ccCs0PLf.s:2048   .text:00000000000008e0 .LBE343
     /tmp/ccCs0PLf.s:7131   .debug_loc:00000000000000b0 .LLST67
     /tmp/ccCs0PLf.s:1972   .text:0000000000000884 .LFB33
     /tmp/ccCs0PLf.s:2019   .text:00000000000008cc .LFE33
     /tmp/ccCs0PLf.s:1998   .text:00000000000008bc .LBB341
     /tmp/ccCs0PLf.s:2010   .text:00000000000008c0 .LBE341
     /tmp/ccCs0PLf.s:7139   .debug_loc:00000000000000d4 .LLST66
     /tmp/ccCs0PLf.s:1913   .text:0000000000000830 .LFB32
     /tmp/ccCs0PLf.s:1966   .text:0000000000000884 .LFE32
     /tmp/ccCs0PLf.s:1943   .text:000000000000086c .LBB339
     /tmp/ccCs0PLf.s:1955   .text:0000000000000874 .LBE339
     /tmp/ccCs0PLf.s:7146   .debug_loc:00000000000000f7 .LLST65
     /tmp/ccCs0PLf.s:1938   .text:0000000000000864 .LVL135
     /tmp/ccCs0PLf.s:1878   .text:0000000000000810 .LFB31
     /tmp/ccCs0PLf.s:1907   .text:0000000000000830 .LFE31
     /tmp/ccCs0PLf.s:1818   .text:00000000000007e8 .LFB30
     /tmp/ccCs0PLf.s:1872   .text:0000000000000810 .LFE30
     /tmp/ccCs0PLf.s:7154   .debug_loc:000000000000011b .LLST62
     /tmp/ccCs0PLf.s:8401   .debug_str:0000000000000279 .LASF241
     /tmp/ccCs0PLf.s:7168   .debug_loc:0000000000000154 .LLST63
     /tmp/ccCs0PLf.s:1829   .text:00000000000007f4 .LBB335
     /tmp/ccCs0PLf.s:1842   .text:00000000000007f8 .LBE335
     /tmp/ccCs0PLf.s:1852   .text:0000000000000800 .LBB337
     /tmp/ccCs0PLf.s:1863   .text:0000000000000804 .LBE337
     /tmp/ccCs0PLf.s:7179   .debug_loc:000000000000018a .LLST64
     /tmp/ccCs0PLf.s:8767   .debug_str:0000000000000dc6 .LASF242
     /tmp/ccCs0PLf.s:1327   .text:000000000000059c .LFB28
     /tmp/ccCs0PLf.s:1360   .text:00000000000005b8 .LFE28
     /tmp/ccCs0PLf.s:1337   .text:00000000000005a8 .LBB291
     /tmp/ccCs0PLf.s:1350   .text:00000000000005ac .LBE291
     /tmp/ccCs0PLf.s:1289   .text:0000000000000580 .LFB26
     /tmp/ccCs0PLf.s:1321   .text:000000000000059c .LFE26
     /tmp/ccCs0PLf.s:1301   .text:000000000000058c .LBB289
     /tmp/ccCs0PLf.s:1312   .text:0000000000000590 .LBE289
     /tmp/ccCs0PLf.s:7186   .debug_loc:00000000000001ad .LLST42
     /tmp/ccCs0PLf.s:8725   .debug_str:0000000000000bf6 .LASF243
     /tmp/ccCs0PLf.s:1251   .text:0000000000000564 .LFB24
     /tmp/ccCs0PLf.s:1283   .text:0000000000000580 .LFE24
     /tmp/ccCs0PLf.s:1263   .text:0000000000000570 .LBB287
     /tmp/ccCs0PLf.s:1274   .text:0000000000000574 .LBE287
     /tmp/ccCs0PLf.s:7193   .debug_loc:00000000000001d0 .LLST41
     /tmp/ccCs0PLf.s:1212   .text:0000000000000548 .LFB22
     /tmp/ccCs0PLf.s:1245   .text:0000000000000564 .LFE22
     /tmp/ccCs0PLf.s:1222   .text:0000000000000554 .LBB285
     /tmp/ccCs0PLf.s:1235   .text:0000000000000558 .LBE285
     /tmp/ccCs0PLf.s:8585   .debug_str:00000000000007cf .LASF244
     /tmp/ccCs0PLf.s:1174   .text:000000000000052c .LFB20
     /tmp/ccCs0PLf.s:1206   .text:0000000000000548 .LFE20
     /tmp/ccCs0PLf.s:1186   .text:0000000000000538 .LBB283
GAS LISTING /tmp/ccCs0PLf.s 			page 79


     /tmp/ccCs0PLf.s:1197   .text:000000000000053c .LBE283
     /tmp/ccCs0PLf.s:7200   .debug_loc:00000000000001f3 .LLST40
     /tmp/ccCs0PLf.s:1135   .text:0000000000000510 .LFB18
     /tmp/ccCs0PLf.s:1168   .text:000000000000052c .LFE18
     /tmp/ccCs0PLf.s:1145   .text:000000000000051c .LBB281
     /tmp/ccCs0PLf.s:1158   .text:0000000000000520 .LBE281
     /tmp/ccCs0PLf.s:8829   .debug_str:0000000000000fb0 .LASF245
     /tmp/ccCs0PLf.s:1097   .text:00000000000004f4 .LFB16
     /tmp/ccCs0PLf.s:1129   .text:0000000000000510 .LFE16
     /tmp/ccCs0PLf.s:1109   .text:0000000000000500 .LBB279
     /tmp/ccCs0PLf.s:1120   .text:0000000000000504 .LBE279
     /tmp/ccCs0PLf.s:7207   .debug_loc:0000000000000216 .LLST39
     /tmp/ccCs0PLf.s:1058   .text:00000000000004d8 .LFB14
     /tmp/ccCs0PLf.s:1091   .text:00000000000004f4 .LFE14
     /tmp/ccCs0PLf.s:1068   .text:00000000000004e4 .LBB277
     /tmp/ccCs0PLf.s:1081   .text:00000000000004e8 .LBE277
     /tmp/ccCs0PLf.s:10     .text:0000000000000000 .LFB11
     /tmp/ccCs0PLf.s:1052   .text:00000000000004d8 .LFE11
     /tmp/ccCs0PLf.s:8629   .debug_str:0000000000000915 .LASF246
     /tmp/ccCs0PLf.s:7214   .debug_loc:0000000000000239 .LLST0
     /tmp/ccCs0PLf.s:8795   .debug_str:0000000000000ecf .LASF247
     /tmp/ccCs0PLf.s:7382   .debug_loc:00000000000004b0 .LLST1
     /tmp/ccCs0PLf.s:8669   .debug_str:0000000000000a4a .LASF248
     /tmp/ccCs0PLf.s:7404   .debug_loc:000000000000050f .LLST2
     /tmp/ccCs0PLf.s:8799   .debug_str:0000000000000ee4 .LASF249
     /tmp/ccCs0PLf.s:7530   .debug_loc:000000000000075c .LLST3
     /tmp/ccCs0PLf.s:8801   .debug_str:0000000000000ee9 .LASF250
     /tmp/ccCs0PLf.s:7659   .debug_loc:00000000000009ac .LLST4
     /tmp/ccCs0PLf.s:382    .text:00000000000000e0 .LBB256
     /tmp/ccCs0PLf.s:414    .text:0000000000000104 .LBE256
     /tmp/ccCs0PLf.s:7793   .debug_loc:0000000000000c1f .LLST36
     /tmp/ccCs0PLf.s:8451   .debug_str:00000000000003cd .LASF251
     /tmp/ccCs0PLf.s:7820   .debug_loc:0000000000000c83 .LLST37
     /tmp/ccCs0PLf.s:8865   .debug_str:000000000000107f .LASF252
     /tmp/ccCs0PLf.s:7833   .debug_loc:0000000000000cbb .LLST38
     /tmp/ccCs0PLf.s:390    .text:00000000000000ec .LVL6
     /tmp/ccCs0PLf.s:442    .text:0000000000000128 .LBB239
     /tmp/ccCs0PLf.s:457    .text:0000000000000138 .LBE239
     /tmp/ccCs0PLf.s:7840   .debug_loc:0000000000000cde .LLST34
     /tmp/ccCs0PLf.s:7847   .debug_loc:0000000000000d01 .LLST35
     /tmp/ccCs0PLf.s:449    .text:0000000000000134 .LVL13
     /tmp/ccCs0PLf.s:462    .text:000000000000013c .LBB223
     /tmp/ccCs0PLf.s:540    .text:00000000000001ec .LBE223
     /tmp/ccCs0PLf.s:8837   .debug_str:0000000000000fe4 .LASF253
     /tmp/ccCs0PLf.s:7854   .debug_loc:0000000000000d24 .LLST29
     /tmp/ccCs0PLf.s:7861   .debug_loc:0000000000000d47 .LLST30
     /tmp/ccCs0PLf.s:7872   .debug_loc:0000000000000d7d .LLST31
     /tmp/ccCs0PLf.s:8377   .debug_str:00000000000001d4 .LASF254
     /tmp/ccCs0PLf.s:7883   .debug_loc:0000000000000db3 .LLST32
     /tmp/ccCs0PLf.s:7894   .debug_loc:0000000000000de9 .LLST33
     /tmp/ccCs0PLf.s:469    .text:0000000000000148 .LVL15
     /tmp/ccCs0PLf.s:487    .text:0000000000000174 .LVL16
     /tmp/ccCs0PLf.s:542    .text:00000000000001ec .LBB209
     /tmp/ccCs0PLf.s:644    .text:00000000000002d4 .LBE209
     /tmp/ccCs0PLf.s:7908   .debug_loc:0000000000000e22 .LLST24
     /tmp/ccCs0PLf.s:7915   .debug_loc:0000000000000e45 .LLST25
     /tmp/ccCs0PLf.s:7926   .debug_loc:0000000000000e7b .LLST26
GAS LISTING /tmp/ccCs0PLf.s 			page 80


     /tmp/ccCs0PLf.s:7937   .debug_loc:0000000000000eb1 .LLST27
     /tmp/ccCs0PLf.s:7948   .debug_loc:0000000000000ee7 .LLST28
     /tmp/ccCs0PLf.s:549    .text:00000000000001f8 .LVL20
     /tmp/ccCs0PLf.s:567    .text:0000000000000224 .LVL21
     /tmp/ccCs0PLf.s:607    .text:00000000000002a4 .LVL22
     /tmp/ccCs0PLf.s:662    .text:00000000000002e4 .LBB195
     /tmp/ccCs0PLf.s:677    .text:00000000000002f8 .LBE195
     /tmp/ccCs0PLf.s:7962   .debug_loc:0000000000000f20 .LLST22
     /tmp/ccCs0PLf.s:667    .text:00000000000002f0 .LVL27
     /tmp/ccCs0PLf.s:681    .text:00000000000002fc .LBB196
     /tmp/ccCs0PLf.s:694    .text:0000000000000308 .LBE196
     /tmp/ccCs0PLf.s:7970   .debug_loc:0000000000000f44 .LLST23
     /tmp/ccCs0PLf.s:709    .text:0000000000000320 .LBB172
     /tmp/ccCs0PLf.s:766    .text:000000000000037c .LBE172
     /tmp/ccCs0PLf.s:7979   .debug_loc:0000000000000f69 .LLST19
     /tmp/ccCs0PLf.s:8389   .debug_str:000000000000020e .LASF255
     /tmp/ccCs0PLf.s:7986   .debug_loc:0000000000000f8c .LLST20
     /tmp/ccCs0PLf.s:7997   .debug_loc:0000000000000fc2 .LLST21
     /tmp/ccCs0PLf.s:716    .text:000000000000032c .LVL32
     /tmp/ccCs0PLf.s:731    .text:000000000000034c .LVL33
     /tmp/ccCs0PLf.s:768    .text:000000000000037c .LBB162
     /tmp/ccCs0PLf.s:804    .text:00000000000003a4 .LBE162
     /tmp/ccCs0PLf.s:8011   .debug_loc:0000000000000ffb .LLST17
     /tmp/ccCs0PLf.s:8018   .debug_loc:000000000000101e .LLST18
     /tmp/ccCs0PLf.s:779    .text:000000000000038c .LVL38
     /tmp/ccCs0PLf.s:806    .text:00000000000003a4 .LBB153
     /tmp/ccCs0PLf.s:861    .text:00000000000003e8 .LBE153
     /tmp/ccCs0PLf.s:8032   .debug_loc:0000000000001057 .LLST15
     /tmp/ccCs0PLf.s:8039   .debug_loc:000000000000107a .LLST16
     /tmp/ccCs0PLf.s:817    .text:00000000000003b4 .LVL42
     /tmp/ccCs0PLf.s:863    .text:00000000000003e8 .LBB145
     /tmp/ccCs0PLf.s:899    .text:0000000000000410 .LBE145
     /tmp/ccCs0PLf.s:8059   .debug_loc:00000000000010c8 .LLST13
     /tmp/ccCs0PLf.s:8066   .debug_loc:00000000000010eb .LLST14
     /tmp/ccCs0PLf.s:874    .text:00000000000003f8 .LVL48
     /tmp/ccCs0PLf.s:901    .text:0000000000000410 .LBB138
     /tmp/ccCs0PLf.s:926    .text:0000000000000438 .LBE138
     /tmp/ccCs0PLf.s:8653   .debug_str:00000000000009bb .LASF256
     /tmp/ccCs0PLf.s:8080   .debug_loc:0000000000001124 .LLST11
     /tmp/ccCs0PLf.s:8087   .debug_loc:0000000000001147 .LLST12
     /tmp/ccCs0PLf.s:908    .text:000000000000041c .LVL52
     /tmp/ccCs0PLf.s:916    .text:0000000000000430 .LVL53
     /tmp/ccCs0PLf.s:931    .text:000000000000043c .LBB132
     /tmp/ccCs0PLf.s:948    .text:0000000000000454 .LBE132
     /tmp/ccCs0PLf.s:8095   .debug_loc:000000000000116b .LLST9
     /tmp/ccCs0PLf.s:939    .text:0000000000000450 .LVL56
     /tmp/ccCs0PLf.s:953    .text:0000000000000458 .LBB127
     /tmp/ccCs0PLf.s:963    .text:0000000000000470 .LBE127
     /tmp/ccCs0PLf.s:8102   .debug_loc:000000000000118e .LLST8
     /tmp/ccCs0PLf.s:962    .text:0000000000000470 .LVL59
     /tmp/ccCs0PLf.s:986    .text:0000000000000480 .LBB119
     /tmp/ccCs0PLf.s:997    .text:0000000000000490 .LBE119
     /tmp/ccCs0PLf.s:8109   .debug_loc:00000000000011b1 .LLST6
     /tmp/ccCs0PLf.s:1004   .text:0000000000000494 .LBB116
     /tmp/ccCs0PLf.s:1032   .text:00000000000004d8 .LBE116
     /tmp/ccCs0PLf.s:8637   .debug_str:0000000000000941 .LASF257
     /tmp/ccCs0PLf.s:8116   .debug_loc:00000000000011d4 .LLST5
GAS LISTING /tmp/ccCs0PLf.s 			page 81


     /tmp/ccCs0PLf.s:1015   .text:00000000000004b4 .LVL65
     /tmp/ccCs0PLf.s:1023   .text:00000000000004c0 .LVL66
     /tmp/ccCs0PLf.s:1029   .text:00000000000004d4 .LVL67
     /tmp/ccCs0PLf.s:969    .text:0000000000000474 .LBB122
     /tmp/ccCs0PLf.s:984    .text:0000000000000480 .LBE122
     /tmp/ccCs0PLf.s:8127   .debug_loc:000000000000120a .LLST7
     /tmp/ccCs0PLf.s:359    .text:00000000000000dc .LVL3
     /tmp/ccCs0PLf.s:704    .text:000000000000031c .LVL30
     /tmp/ccCs0PLf.s:8439   .debug_str:0000000000000360 .LASF258
     /tmp/ccCs0PLf.s:1366   .text:00000000000005b8 .LFB10
     /tmp/ccCs0PLf.s:1812   .text:00000000000007e8 .LFE10
     /tmp/ccCs0PLf.s:8136   .debug_loc:0000000000001230 .LLST43
     /tmp/ccCs0PLf.s:1444   .text:0000000000000618 .LBB322
     /tmp/ccCs0PLf.s:1544   .text:000000000000064c .LBE322
     /tmp/ccCs0PLf.s:8155   .debug_loc:000000000000128c .LLST53
     /tmp/ccCs0PLf.s:8367   .debug_str:000000000000018f .LASF259
     /tmp/ccCs0PLf.s:8162   .debug_loc:00000000000012af .LLST54
     /tmp/ccCs0PLf.s:8169   .debug_loc:00000000000012d2 .LLST55
     /tmp/ccCs0PLf.s:8176   .debug_loc:00000000000012f5 .LLST56
     /tmp/ccCs0PLf.s:8183   .debug_loc:0000000000001318 .LLST57
     /tmp/ccCs0PLf.s:8190   .debug_loc:000000000000133b .LLST58
     /tmp/ccCs0PLf.s:8197   .debug_loc:000000000000135e .LLST59
     /tmp/ccCs0PLf.s:1446   .text:0000000000000618 .LBB323
     /tmp/ccCs0PLf.s:1459   .text:000000000000061c .LBE323
     /tmp/ccCs0PLf.s:1464   .text:0000000000000620 .LBB325
     /tmp/ccCs0PLf.s:1477   .text:0000000000000624 .LBE325
     /tmp/ccCs0PLf.s:1516   .text:0000000000000640 .LBB327
     /tmp/ccCs0PLf.s:1527   .text:0000000000000644 .LBE327
     /tmp/ccCs0PLf.s:8204   .debug_loc:0000000000001381 .LLST60
     /tmp/ccCs0PLf.s:1529   .text:0000000000000644 .LBB329
     /tmp/ccCs0PLf.s:1543   .text:000000000000064c .LBE329
     /tmp/ccCs0PLf.s:8211   .debug_loc:00000000000013a4 .LLST61
     /tmp/ccCs0PLf.s:1514   .text:0000000000000640 .LVL95
     /tmp/ccCs0PLf.s:1546   .text:000000000000064c .LBB304
     /tmp/ccCs0PLf.s:1739   .text:0000000000000774 .LBE304
     /tmp/ccCs0PLf.s:8218   .debug_loc:00000000000013c7 .LLST46
     /tmp/ccCs0PLf.s:8305   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccCs0PLf.s:8225   .debug_loc:00000000000013ea .LLST48
     /tmp/ccCs0PLf.s:1601   .text:000000000000068c .LVL104
     /tmp/ccCs0PLf.s:1606   .text:0000000000000698 .LVL105
     /tmp/ccCs0PLf.s:1624   .text:00000000000006c4 .LVL107
     /tmp/ccCs0PLf.s:1643   .text:00000000000006fc .LVL109
     /tmp/ccCs0PLf.s:1686   .text:000000000000073c .LBB312
     /tmp/ccCs0PLf.s:1734   .text:0000000000000770 .LBE312
     /tmp/ccCs0PLf.s:8236   .debug_loc:0000000000001420 .LLST49
     /tmp/ccCs0PLf.s:8243   .debug_loc:0000000000001443 .LLST50
     /tmp/ccCs0PLf.s:1694   .text:0000000000000748 .LBB313
     /tmp/ccCs0PLf.s:1707   .text:000000000000074c .LBE313
     /tmp/ccCs0PLf.s:1717   .text:0000000000000760 .LBB315
     /tmp/ccCs0PLf.s:1728   .text:0000000000000764 .LBE315
     /tmp/ccCs0PLf.s:8250   .debug_loc:0000000000001466 .LLST51
     /tmp/ccCs0PLf.s:1690   .text:0000000000000744 .LVL114
     /tmp/ccCs0PLf.s:1715   .text:0000000000000760 .LVL117
     /tmp/ccCs0PLf.s:1733   .text:0000000000000770 .LVL119
     /tmp/ccCs0PLf.s:1548   .text:000000000000064c .LBB305
     /tmp/ccCs0PLf.s:1561   .text:0000000000000650 .LBE305
     /tmp/ccCs0PLf.s:1570   .text:0000000000000658 .LBB307
GAS LISTING /tmp/ccCs0PLf.s 			page 82


     /tmp/ccCs0PLf.s:1582   .text:0000000000000660 .LBE307
     /tmp/ccCs0PLf.s:8257   .debug_loc:0000000000001489 .LLST47
     /tmp/ccCs0PLf.s:1669   .text:0000000000000730 .LBB317
     /tmp/ccCs0PLf.s:1684   .text:000000000000073c .LBE317
     /tmp/ccCs0PLf.s:8265   .debug_loc:00000000000014ad .LLST52
     /tmp/ccCs0PLf.s:1591   .text:0000000000000678 .LVL102
     /tmp/ccCs0PLf.s:1615   .text:00000000000006ac .LVL106
     /tmp/ccCs0PLf.s:1660   .text:0000000000000728 .LVL111
     /tmp/ccCs0PLf.s:8273   .debug_loc:00000000000014d1 .LLST44
     /tmp/ccCs0PLf.s:1766   .text:0000000000000798 .LBB300
     /tmp/ccCs0PLf.s:1805   .text:00000000000007e8 .LBE300
     /tmp/ccCs0PLf.s:8817   .debug_str:0000000000000f5a .LASF260
     /tmp/ccCs0PLf.s:1783   .text:00000000000007b8 .LBB301
     /tmp/ccCs0PLf.s:1802   .text:00000000000007e4 .LBE301
     /tmp/ccCs0PLf.s:8284   .debug_loc:0000000000001507 .LLST45
     /tmp/ccCs0PLf.s:1796   .text:00000000000007dc .LVL129
     /tmp/ccCs0PLf.s:1745   .text:000000000000077c .LVL121
     /tmp/ccCs0PLf.s:1759   .text:0000000000000794 .LVL124
     /tmp/ccCs0PLf.s:1382   .text:00000000000005d0 .LBB293
     /tmp/ccCs0PLf.s:1395   .text:00000000000005d4 .LBE293
     /tmp/ccCs0PLf.s:8593   .debug_str:0000000000000802 .LASF261
     /tmp/ccCs0PLf.s:8657   .debug_str:00000000000009d1 .LASF262
     /tmp/ccCs0PLf.s:2346   .text:0000000000000a3c .LVL154
     /tmp/ccCs0PLf.s:2379   .text:0000000000000a64 .LVL157
     /tmp/ccCs0PLf.s:2354   .text:0000000000000a40 .LVL155
     /tmp/ccCs0PLf.s:2275   .text:00000000000009d0 .LVL150
     /tmp/ccCs0PLf.s:2268   .text:00000000000009cc .LVL149
     /tmp/ccCs0PLf.s:2300   .text:00000000000009f4 .LVL152
     /tmp/ccCs0PLf.s:2073   .text:00000000000008f8 .LVL142
     /tmp/ccCs0PLf.s:2083   .text:0000000000000900 .LVL143
     /tmp/ccCs0PLf.s:2035   .text:00000000000008d8 .LVL140
     /tmp/ccCs0PLf.s:2045   .text:00000000000008e0 .LVL141
     /tmp/ccCs0PLf.s:1997   .text:00000000000008bc .LVL138
     /tmp/ccCs0PLf.s:2006   .text:00000000000008c0 .LVL139
     /tmp/ccCs0PLf.s:1942   .text:000000000000086c .LVL136
     /tmp/ccCs0PLf.s:1952   .text:0000000000000874 .LVL137
     /tmp/ccCs0PLf.s:1821   .text:00000000000007e8 .LVL130
     /tmp/ccCs0PLf.s:1850   .text:0000000000000800 .LVL133
     /tmp/ccCs0PLf.s:1838   .text:00000000000007f8 .LVL131
     /tmp/ccCs0PLf.s:1860   .text:0000000000000804 .LVL134
     /tmp/ccCs0PLf.s:1300   .text:000000000000058c .LVL81
     /tmp/ccCs0PLf.s:1309   .text:0000000000000590 .LVL82
     /tmp/ccCs0PLf.s:1262   .text:0000000000000570 .LVL78
     /tmp/ccCs0PLf.s:1271   .text:0000000000000574 .LVL79
     /tmp/ccCs0PLf.s:1185   .text:0000000000000538 .LVL74
     /tmp/ccCs0PLf.s:1194   .text:000000000000053c .LVL75
     /tmp/ccCs0PLf.s:1108   .text:0000000000000500 .LVL70
     /tmp/ccCs0PLf.s:1117   .text:0000000000000504 .LVL71
     /tmp/ccCs0PLf.s:14     .text:0000000000000000 .LVL0
     /tmp/ccCs0PLf.s:353    .text:00000000000000d4 .LVL2
     /tmp/ccCs0PLf.s:379    .text:00000000000000e0 .LVL4
     /tmp/ccCs0PLf.s:388    .text:00000000000000e4 .LVL5
     /tmp/ccCs0PLf.s:437    .text:0000000000000128 .LVL11
     /tmp/ccCs0PLf.s:447    .text:000000000000012c .LVL12
     /tmp/ccCs0PLf.s:459    .text:000000000000013c .LVL14
     /tmp/ccCs0PLf.s:538    .text:00000000000001ec .LVL19
     /tmp/ccCs0PLf.s:642    .text:00000000000002d4 .LVL25
GAS LISTING /tmp/ccCs0PLf.s 			page 83


     /tmp/ccCs0PLf.s:659    .text:00000000000002e0 .LVL26
     /tmp/ccCs0PLf.s:692    .text:0000000000000308 .LVL29
     /tmp/ccCs0PLf.s:706    .text:0000000000000320 .LVL31
     /tmp/ccCs0PLf.s:764    .text:000000000000037c .LVL36
     /tmp/ccCs0PLf.s:773    .text:0000000000000380 .LVL37
     /tmp/ccCs0PLf.s:802    .text:00000000000003a4 .LVL40
     /tmp/ccCs0PLf.s:811    .text:00000000000003a8 .LVL41
     /tmp/ccCs0PLf.s:859    .text:00000000000003e8 .LVL46
     /tmp/ccCs0PLf.s:868    .text:00000000000003ec .LVL47
     /tmp/ccCs0PLf.s:897    .text:0000000000000410 .LVL50
     /tmp/ccCs0PLf.s:906    .text:0000000000000414 .LVL51
     /tmp/ccCs0PLf.s:928    .text:000000000000043c .LVL54
     /tmp/ccCs0PLf.s:937    .text:0000000000000448 .LVL55
     /tmp/ccCs0PLf.s:950    .text:0000000000000458 .LVL57
     /tmp/ccCs0PLf.s:960    .text:0000000000000468 .LVL58
     /tmp/ccCs0PLf.s:965    .text:0000000000000474 .LVL60
     /tmp/ccCs0PLf.s:1013   .text:00000000000004ac .LVL64
     /tmp/ccCs0PLf.s:425    .text:0000000000000110 .LVL10
     /tmp/ccCs0PLf.s:679    .text:00000000000002fc .LVL28
     /tmp/ccCs0PLf.s:790    .text:0000000000000398 .LVL39
     /tmp/ccCs0PLf.s:847    .text:00000000000003dc .LVL45
     /tmp/ccCs0PLf.s:885    .text:0000000000000404 .LVL49
     /tmp/ccCs0PLf.s:351    .text:00000000000000d0 .LVL1
     /tmp/ccCs0PLf.s:995    .text:000000000000048c .LVL62
     /tmp/ccCs0PLf.s:999    .text:0000000000000494 .LVL63
     /tmp/ccCs0PLf.s:397    .text:00000000000000f8 .LVL7
     /tmp/ccCs0PLf.s:411    .text:0000000000000104 .LVL9
     /tmp/ccCs0PLf.s:404    .text:0000000000000100 .LVL8
     /tmp/ccCs0PLf.s:516    .text:00000000000001d4 .LVL17
     /tmp/ccCs0PLf.s:526    .text:00000000000001e0 .LVL18
     /tmp/ccCs0PLf.s:619    .text:00000000000002b0 .LVL23
     /tmp/ccCs0PLf.s:631    .text:00000000000002bc .LVL24
     /tmp/ccCs0PLf.s:742    .text:0000000000000364 .LVL34
     /tmp/ccCs0PLf.s:752    .text:0000000000000370 .LVL35
     /tmp/ccCs0PLf.s:826    .text:00000000000003c8 .LVL43
     /tmp/ccCs0PLf.s:835    .text:00000000000003d0 .LVL44
     /tmp/ccCs0PLf.s:981    .text:0000000000000480 .LVL61
     /tmp/ccCs0PLf.s:1391   .text:00000000000005d4 .LVL84
     /tmp/ccCs0PLf.s:1421   .text:0000000000000600 .LVL85
     /tmp/ccCs0PLf.s:1440   .text:0000000000000618 .LVL86
     /tmp/ccCs0PLf.s:1509   .text:0000000000000638 .LVL94
     /tmp/ccCs0PLf.s:1540   .text:000000000000064c .LVL97
     /tmp/ccCs0PLf.s:1736   .text:0000000000000774 .LVL120
     /tmp/ccCs0PLf.s:1462   .text:0000000000000620 .LVL88
     /tmp/ccCs0PLf.s:1473   .text:0000000000000624 .LVL89
     /tmp/ccCs0PLf.s:1485   .text:0000000000000628 .LVL90
     /tmp/ccCs0PLf.s:1491   .text:000000000000062c .LVL91
     /tmp/ccCs0PLf.s:1497   .text:0000000000000630 .LVL92
     /tmp/ccCs0PLf.s:1503   .text:0000000000000634 .LVL93
     /tmp/ccCs0PLf.s:1524   .text:0000000000000644 .LVL96
     /tmp/ccCs0PLf.s:1557   .text:0000000000000650 .LVL98
     /tmp/ccCs0PLf.s:1565   .text:0000000000000654 .LVL99
     /tmp/ccCs0PLf.s:1593   .text:000000000000067c .LVL103
     /tmp/ccCs0PLf.s:1626   .text:00000000000006c8 .LVL108
     /tmp/ccCs0PLf.s:1645   .text:0000000000000700 .LVL110
     /tmp/ccCs0PLf.s:1692   .text:0000000000000748 .LVL115
     /tmp/ccCs0PLf.s:1703   .text:000000000000074c .LVL116
GAS LISTING /tmp/ccCs0PLf.s 			page 84


     /tmp/ccCs0PLf.s:1725   .text:0000000000000764 .LVL118
     /tmp/ccCs0PLf.s:1569   .text:0000000000000658 .LVL100
     /tmp/ccCs0PLf.s:1579   .text:0000000000000660 .LVL101
     /tmp/ccCs0PLf.s:1668   .text:0000000000000730 .LVL112
     /tmp/ccCs0PLf.s:1681   .text:000000000000073c .LVL113
     /tmp/ccCs0PLf.s:1747   .text:0000000000000780 .LVL122
     /tmp/ccCs0PLf.s:1752   .text:0000000000000788 .LVL123
     /tmp/ccCs0PLf.s:1762   .text:0000000000000798 .LVL125
     /tmp/ccCs0PLf.s:1774   .text:00000000000007ac .LVL126
     /tmp/ccCs0PLf.s:1788   .text:00000000000007c4 .LVL127
     /tmp/ccCs0PLf.s:1793   .text:00000000000007d0 .LVL128
     /tmp/ccCs0PLf.s:2419   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccCs0PLf.s:1741   .text:0000000000000774 .LBB298
     /tmp/ccCs0PLf.s:1760   .text:0000000000000794 .LBE298
     /tmp/ccCs0PLf.s:1764   .text:0000000000000798 .LBB303
     /tmp/ccCs0PLf.s:1807   .text:00000000000007e8 .LBE303
     /tmp/ccCs0PLf.s:1595   .text:000000000000067c .LBB309
     /tmp/ccCs0PLf.s:1608   .text:0000000000000698 .LBE309
     /tmp/ccCs0PLf.s:1618   .text:00000000000006b0 .LBB310
     /tmp/ccCs0PLf.s:1647   .text:0000000000000700 .LBE310

UNDEFINED SYMBOLS
_ZN3PCB17isPeriodicBlockedE
_ZN3PCB8dispatchEv
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN3PCB11allocatePCBEv
_ZN3PCBC1EPFvPvES0_Pmm
_ZN3PCB7runningE
_ZN9Scheduler3putEP3PCB
_ZN3PCB11setFinishedEb
_ZN3PCB8timeLeftE
_ZN3Sem11allocateSemEv
_ZN3SemC1Ei
_ZN3Sem10deblockAllEv
_ZN3Sem4waitEv
_ZN3Sem6signalEv
_ZN3PCB5sleepEm
_ZN4Cons11inputBufferE
_ZN10CharBuffer3getEv
_ZN4Cons12outputBufferE
_ZN10CharBuffer3putEc
_ZN3PCB12perioThreadsE
_ZN8PCB_List3getEv
_ZN3PCB13sleeping_listE
_ZN8PCB_List7decTimeEv
_ZN3PCB11setSleepingEb
_ZN8PCB_List11getTimeLeftEv
_ZN8PCB_List7putTimeEP3PCBm
_ZNK3PCB12getTimeSliceEv
plic_claim
plic_complete
CONSOLE_STATUS
CONSOLE_RX_DATA
_ZN3PCB6getSSPEv
_ZN3PCB5setSPEm
_ZN3PCB5getSPEv
GAS LISTING /tmp/ccCs0PLf.s 			page 85


_ZN3PCB6setSSPEm
